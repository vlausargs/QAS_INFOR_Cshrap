using System;
namespace CSI.Data.SQL.UDDT
{

    public class AbcCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AbcCodeType(string value) : base(value) { }
        public static implicit operator AbcCodeType(string value) { return new AbcCodeType(value); }
        public static implicit operator AbcCodeType(DBNull value) { return new AbcCodeType(null); }
    }
    public class ABIdType : StringType
    {
        public override int Length { get => 128; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ABIdType(string value) : base(value) { }
        public static implicit operator ABIdType(string value) { return new ABIdType(value); }
        public static implicit operator ABIdType(DBNull value) { return new ABIdType(null); }
    }
    public class AbsenceHoursType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private AbsenceHoursType(decimal? value) : base(value) { }
        public static implicit operator AbsenceHoursType(decimal? value) { return new AbsenceHoursType(value); }
        public static implicit operator AbsenceHoursType(DBNull value) { return new AbsenceHoursType(null); }
    }
    public class AbsenceReasonCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AbsenceReasonCodeType(string value) : base(value) { }
        public static implicit operator AbsenceReasonCodeType(string value) { return new AbsenceReasonCodeType(value); }
        public static implicit operator AbsenceReasonCodeType(DBNull value) { return new AbsenceReasonCodeType(null); }
    }
    public class ABThemeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ABThemeType(short? value) : base(value) { }
        public static implicit operator ABThemeType(short? value) { return new ABThemeType(value); }
        public static implicit operator ABThemeType(DBNull value) { return new ABThemeType(null); }
        private ABThemeType(int? value) : base(value) { }
        public static implicit operator ABThemeType(int? value) { return new ABThemeType(value); }
    }
    public class ABVersionType : StringType
    {
        public override int Length { get => 64; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ABVersionType(string value) : base(value) { }
        public static implicit operator ABVersionType(string value) { return new ABVersionType(value); }
        public static implicit operator ABVersionType(DBNull value) { return new ABVersionType(null); }
    }
    public class ACAReceiptIDType : StringType
    {
        public override int Length { get => 48; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ACAReceiptIDType(string value) : base(value) { }
        public static implicit operator ACAReceiptIDType(string value) { return new ACAReceiptIDType(value); }
        public static implicit operator ACAReceiptIDType(DBNull value) { return new ACAReceiptIDType(null); }
    }
    public class ACARecordIDType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ACARecordIDType(short? value) : base(value) { }
        public static implicit operator ACARecordIDType(short? value) { return new ACARecordIDType(value); }
        public static implicit operator ACARecordIDType(DBNull value) { return new ACARecordIDType(null); }
        private ACARecordIDType(int? value) : base(value) { }
        public static implicit operator ACARecordIDType(int? value) { return new ACARecordIDType(value); }
    }
    public class ACASubmissionIDType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ACASubmissionIDType(short? value) : base(value) { }
        public static implicit operator ACASubmissionIDType(short? value) { return new ACASubmissionIDType(value); }
        public static implicit operator ACASubmissionIDType(DBNull value) { return new ACASubmissionIDType(null); }
        private ACASubmissionIDType(int? value) : base(value) { }
        public static implicit operator ACASubmissionIDType(int? value) { return new ACASubmissionIDType(value); }
    }
    public class AccessAsType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AccessAsType(string value) : base(value) { }
        public static implicit operator AccessAsType(string value) { return new AccessAsType(value); }
        public static implicit operator AccessAsType(DBNull value) { return new AccessAsType(null); }
    }
    public class AccountNameType : StringType
    {
        public override int Length { get => 64; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AccountNameType(string value) : base(value) { }
        public static implicit operator AccountNameType(string value) { return new AccountNameType(value); }
        public static implicit operator AccountNameType(DBNull value) { return new AccountNameType(null); }
    }
    public class AcctClassType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AcctClassType(string value) : base(value) { }
        public static implicit operator AcctClassType(string value) { return new AcctClassType(value); }
        public static implicit operator AcctClassType(DBNull value) { return new AcctClassType(null); }
    }
    public class AcctFieldsType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AcctFieldsType(byte? value) : base(value) { }
        public static implicit operator AcctFieldsType(byte? value) { return new AcctFieldsType(value); }
        public static implicit operator AcctFieldsType(DBNull value) { return new AcctFieldsType(null); }
        private AcctFieldsType(int? value) : base(value) { }
        public static implicit operator AcctFieldsType(int? value) { return new AcctFieldsType(value); }
    }
    public class AcctFmtType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AcctFmtType(string value) : base(value) { }
        public static implicit operator AcctFmtType(string value) { return new AcctFmtType(value); }
        public static implicit operator AcctFmtType(DBNull value) { return new AcctFmtType(null); }
    }
    public class AcctLenType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AcctLenType(byte? value) : base(value) { }
        public static implicit operator AcctLenType(byte? value) { return new AcctLenType(value); }
        public static implicit operator AcctLenType(DBNull value) { return new AcctLenType(null); }
        private AcctLenType(int? value) : base(value) { }
        public static implicit operator AcctLenType(int? value) { return new AcctLenType(value); }
    }
    public class AcctOnlyType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AcctOnlyType(string value) : base(value) { }
        public static implicit operator AcctOnlyType(string value) { return new AcctOnlyType(value); }
        public static implicit operator AcctOnlyType(DBNull value) { return new AcctOnlyType(null); }
    }
    public class AcctPosType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AcctPosType(byte? value) : base(value) { }
        public static implicit operator AcctPosType(byte? value) { return new AcctPosType(value); }
        public static implicit operator AcctPosType(DBNull value) { return new AcctPosType(null); }
        private AcctPosType(int? value) : base(value) { }
        public static implicit operator AcctPosType(int? value) { return new AcctPosType(value); }
    }
    public class AcctType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AcctType(string value) : base(value) { }
        public static implicit operator AcctType(string value) { return new AcctType(value); }
        public static implicit operator AcctType(DBNull value) { return new AcctType(null); }
    }
    public class AcctTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AcctTypeType(string value) : base(value) { }
        public static implicit operator AcctTypeType(string value) { return new AcctTypeType(value); }
        public static implicit operator AcctTypeType(DBNull value) { return new AcctTypeType(null); }
    }
    public class AchIdType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AchIdType(decimal? value) : base(value) { }
        public static implicit operator AchIdType(decimal? value) { return new AchIdType(value); }
        public static implicit operator AchIdType(DBNull value) { return new AchIdType(null); }
    }
    public class AchNameType : StringType
    {
        public override int Length { get => 46; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AchNameType(string value) : base(value) { }
        public static implicit operator AchNameType(string value) { return new AchNameType(value); }
        public static implicit operator AchNameType(DBNull value) { return new AchNameType(null); }
    }
    public class AchOriginIdType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AchOriginIdType(string value) : base(value) { }
        public static implicit operator AchOriginIdType(string value) { return new AchOriginIdType(value); }
        public static implicit operator AchOriginIdType(DBNull value) { return new AchOriginIdType(null); }
    }
    public class AchTransitReferenceType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AchTransitReferenceType(string value) : base(value) { }
        public static implicit operator AchTransitReferenceType(string value) { return new AchTransitReferenceType(value); }
        public static implicit operator AchTransitReferenceType(DBNull value) { return new AchTransitReferenceType(null); }
    }
    public class AchTransitType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AchTransitType(int? value) : base(value) { }
        public static implicit operator AchTransitType(int? value) { return new AchTransitType(value); }
        public static implicit operator AchTransitType(DBNull value) { return new AchTransitType(null); }
        private AchTransitType(long? value) : base(value) { }
        public static implicit operator AchTransitType(long? value) { return new AchTransitType(value); }
    }
    public class AckNumType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AckNumType(string value) : base(value) { }
        public static implicit operator AckNumType(string value) { return new AckNumType(value); }
        public static implicit operator AckNumType(DBNull value) { return new AckNumType(null); }
    }
    public class AckSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AckSeqType(int? value) : base(value) { }
        public static implicit operator AckSeqType(int? value) { return new AckSeqType(value); }
        public static implicit operator AckSeqType(DBNull value) { return new AckSeqType(null); }
        private AckSeqType(long? value) : base(value) { }
        public static implicit operator AckSeqType(long? value) { return new AckSeqType(value); }
    }
    public class AckStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AckStatusType(string value) : base(value) { }
        public static implicit operator AckStatusType(string value) { return new AckStatusType(value); }
        public static implicit operator AckStatusType(DBNull value) { return new AckStatusType(null); }
    }
    public class AcqExVatType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private AcqExVatType(decimal? value) : base(value) { }
        public static implicit operator AcqExVatType(decimal? value) { return new AcqExVatType(value); }
        public static implicit operator AcqExVatType(DBNull value) { return new AcqExVatType(null); }
    }
    public class AcqVatType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private AcqVatType(decimal? value) : base(value) { }
        public static implicit operator AcqVatType(decimal? value) { return new AcqVatType(value); }
        public static implicit operator AcqVatType(DBNull value) { return new AcqVatType(null); }
    }
    public class ActivityCodeType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ActivityCodeType(string value) : base(value) { }
        public static implicit operator ActivityCodeType(string value) { return new ActivityCodeType(value); }
        public static implicit operator ActivityCodeType(DBNull value) { return new ActivityCodeType(null); }
    }
    public class ActivitySeqType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ActivitySeqType(decimal? value) : base(value) { }
        public static implicit operator ActivitySeqType(decimal? value) { return new ActivitySeqType(value); }
        public static implicit operator ActivitySeqType(DBNull value) { return new ActivitySeqType(null); }
    }
    public class AddressLineType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AddressLineType(string value) : base(value) { }
        public static implicit operator AddressLineType(string value) { return new AddressLineType(value); }
        public static implicit operator AddressLineType(DBNull value) { return new AddressLineType(null); }
    }
    public class AddressType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AddressType(string value) : base(value) { }
        public static implicit operator AddressType(string value) { return new AddressType(value); }
        public static implicit operator AddressType(DBNull value) { return new AddressType(null); }
    }
    public class AdpCompanyCodeType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AdpCompanyCodeType(string value) : base(value) { }
        public static implicit operator AdpCompanyCodeType(string value) { return new AdpCompanyCodeType(value); }
        public static implicit operator AdpCompanyCodeType(DBNull value) { return new AdpCompanyCodeType(null); }
    }
    public class AdpFileIdType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AdpFileIdType(string value) : base(value) { }
        public static implicit operator AdpFileIdType(string value) { return new AdpFileIdType(value); }
        public static implicit operator AdpFileIdType(DBNull value) { return new AdpFileIdType(null); }
    }
    public class AdPublicationType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AdPublicationType(string value) : base(value) { }
        public static implicit operator AdPublicationType(string value) { return new AdPublicationType(value); }
        public static implicit operator AdPublicationType(DBNull value) { return new AdPublicationType(null); }
    }
    public class AdpVersionType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AdpVersionType(string value) : base(value) { }
        public static implicit operator AdpVersionType(string value) { return new AdpVersionType(value); }
        public static implicit operator AdpVersionType(DBNull value) { return new AdpVersionType(null); }
    }
    public class AdResponsesType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AdResponsesType(short? value) : base(value) { }
        public static implicit operator AdResponsesType(short? value) { return new AdResponsesType(value); }
        public static implicit operator AdResponsesType(DBNull value) { return new AdResponsesType(null); }
        private AdResponsesType(int? value) : base(value) { }
        public static implicit operator AdResponsesType(int? value) { return new AdResponsesType(value); }
    }
    public class AdSectionType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AdSectionType(string value) : base(value) { }
        public static implicit operator AdSectionType(string value) { return new AdSectionType(value); }
        public static implicit operator AdSectionType(DBNull value) { return new AdSectionType(null); }
    }
    public class AgeClassEffectivityType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AgeClassEffectivityType(string value) : base(value) { }
        public static implicit operator AgeClassEffectivityType(string value) { return new AgeClassEffectivityType(value); }
        public static implicit operator AgeClassEffectivityType(DBNull value) { return new AgeClassEffectivityType(null); }
    }
    public class AgeDaysType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AgeDaysType(short? value) : base(value) { }
        public static implicit operator AgeDaysType(short? value) { return new AgeDaysType(value); }
        public static implicit operator AgeDaysType(DBNull value) { return new AgeDaysType(null); }
        private AgeDaysType(int? value) : base(value) { }
        public static implicit operator AgeDaysType(int? value) { return new AgeDaysType(value); }
    }
    public class AgeDescType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AgeDescType(string value) : base(value) { }
        public static implicit operator AgeDescType(string value) { return new AgeDescType(value); }
        public static implicit operator AgeDescType(DBNull value) { return new AgeDescType(null); }
    }
    public class AlienNumType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AlienNumType(string value) : base(value) { }
        public static implicit operator AlienNumType(string value) { return new AlienNumType(value); }
        public static implicit operator AlienNumType(DBNull value) { return new AlienNumType(null); }
    }
    public class AllocationBasisRateType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private AllocationBasisRateType(decimal? value) : base(value) { }
        public static implicit operator AllocationBasisRateType(decimal? value) { return new AllocationBasisRateType(value); }
        public static implicit operator AllocationBasisRateType(DBNull value) { return new AllocationBasisRateType(null); }
    }
    public class AllocationBasisTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AllocationBasisTypeType(string value) : base(value) { }
        public static implicit operator AllocationBasisTypeType(string value) { return new AllocationBasisTypeType(value); }
        public static implicit operator AllocationBasisTypeType(DBNull value) { return new AllocationBasisTypeType(null); }
    }
    public class AlphaKeyType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AlphaKeyType(string value) : base(value) { }
        public static implicit operator AlphaKeyType(string value) { return new AlphaKeyType(value); }
        public static implicit operator AlphaKeyType(DBNull value) { return new AlphaKeyType(null); }
    }
    public class AlphaPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AlphaPrefixType(string value) : base(value) { }
        public static implicit operator AlphaPrefixType(string value) { return new AlphaPrefixType(value); }
        public static implicit operator AlphaPrefixType(DBNull value) { return new AlphaPrefixType(null); }
    }
    public class AmountType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 23; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private AmountType(decimal? value) : base(value) { }
        public static implicit operator AmountType(decimal? value) { return new AmountType(value); }
        public static implicit operator AmountType(DBNull value) { return new AmountType(null); }
    }
    public class AmtTotType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 24; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private AmtTotType(decimal? value) : base(value) { }
        public static implicit operator AmtTotType(decimal? value) { return new AmtTotType(value); }
        public static implicit operator AmtTotType(DBNull value) { return new AmtTotType(null); }
    }
    public class AnnouncementIdType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AnnouncementIdType(decimal? value) : base(value) { }
        public static implicit operator AnnouncementIdType(decimal? value) { return new AnnouncementIdType(value); }
        public static implicit operator AnnouncementIdType(DBNull value) { return new AnnouncementIdType(null); }
    }
    public class AnnualSalaryType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private AnnualSalaryType(decimal? value) : base(value) { }
        public static implicit operator AnnualSalaryType(decimal? value) { return new AnnualSalaryType(value); }
        public static implicit operator AnnualSalaryType(DBNull value) { return new AnnualSalaryType(null); }
    }
    public class AnyRefLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AnyRefLineType(short? value) : base(value) { }
        public static implicit operator AnyRefLineType(short? value) { return new AnyRefLineType(value); }
        public static implicit operator AnyRefLineType(DBNull value) { return new AnyRefLineType(null); }
        private AnyRefLineType(int? value) : base(value) { }
        public static implicit operator AnyRefLineType(int? value) { return new AnyRefLineType(value); }
    }
    public class AnyRefNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AnyRefNumType(string value) : base(value) { }
        public static implicit operator AnyRefNumType(string value) { return new AnyRefNumType(value); }
        public static implicit operator AnyRefNumType(DBNull value) { return new AnyRefNumType(null); }
    }
    public class AnyRefReleaseType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AnyRefReleaseType(short? value) : base(value) { }
        public static implicit operator AnyRefReleaseType(short? value) { return new AnyRefReleaseType(value); }
        public static implicit operator AnyRefReleaseType(DBNull value) { return new AnyRefReleaseType(null); }
        private AnyRefReleaseType(int? value) : base(value) { }
        public static implicit operator AnyRefReleaseType(int? value) { return new AnyRefReleaseType(value); }
    }
    public class AnyRefTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AnyRefTypeType(string value) : base(value) { }
        public static implicit operator AnyRefTypeType(string value) { return new AnyRefTypeType(value); }
        public static implicit operator AnyRefTypeType(DBNull value) { return new AnyRefTypeType(null); }
    }
    public class ApAgeByType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApAgeByType(string value) : base(value) { }
        public static implicit operator ApAgeByType(string value) { return new ApAgeByType(value); }
        public static implicit operator ApAgeByType(DBNull value) { return new ApAgeByType(null); }
    }
    public class ApCheckFormTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApCheckFormTypeType(string value) : base(value) { }
        public static implicit operator ApCheckFormTypeType(string value) { return new ApCheckFormTypeType(value); }
        public static implicit operator ApCheckFormTypeType(DBNull value) { return new ApCheckFormTypeType(null); }
    }
    public class ApCheckNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApCheckNumType(int? value) : base(value) { }
        public static implicit operator ApCheckNumType(int? value) { return new ApCheckNumType(value); }
        public static implicit operator ApCheckNumType(DBNull value) { return new ApCheckNumType(null); }
        private ApCheckNumType(long? value) : base(value) { }
        public static implicit operator ApCheckNumType(long? value) { return new ApCheckNumType(value); }
    }
    public class ApCheckSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApCheckSeqType(short? value) : base(value) { }
        public static implicit operator ApCheckSeqType(short? value) { return new ApCheckSeqType(value); }
        public static implicit operator ApCheckSeqType(DBNull value) { return new ApCheckSeqType(null); }
        private ApCheckSeqType(int? value) : base(value) { }
        public static implicit operator ApCheckSeqType(int? value) { return new ApCheckSeqType(value); }
    }
    public class ApDiscType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private ApDiscType(decimal? value) : base(value) { }
        public static implicit operator ApDiscType(decimal? value) { return new ApDiscType(value); }
        public static implicit operator ApDiscType(DBNull value) { return new ApDiscType(null); }
    }
    public class ApDistSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApDistSeqType(int? value) : base(value) { }
        public static implicit operator ApDistSeqType(int? value) { return new ApDistSeqType(value); }
        public static implicit operator ApDistSeqType(DBNull value) { return new ApDistSeqType(null); }
        private ApDistSeqType(long? value) : base(value) { }
        public static implicit operator ApDistSeqType(long? value) { return new ApDistSeqType(value); }
    }
    public class ApdrafttStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApdrafttStatusType(string value) : base(value) { }
        public static implicit operator ApdrafttStatusType(string value) { return new ApdrafttStatusType(value); }
        public static implicit operator ApdrafttStatusType(DBNull value) { return new ApdrafttStatusType(null); }
    }
    public class APIOperationIDType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private APIOperationIDType(string value) : base(value) { }
        public static implicit operator APIOperationIDType(string value) { return new APIOperationIDType(value); }
        public static implicit operator APIOperationIDType(DBNull value) { return new APIOperationIDType(null); }
    }
    public class APIOperationTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private APIOperationTypeType(string value) : base(value) { }
        public static implicit operator APIOperationTypeType(string value) { return new APIOperationTypeType(value); }
        public static implicit operator APIOperationTypeType(DBNull value) { return new APIOperationTypeType(null); }
    }
    public class ApplicationDebugLogSourceTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApplicationDebugLogSourceTypeType(string value) : base(value) { }
        public static implicit operator ApplicationDebugLogSourceTypeType(string value) { return new ApplicationDebugLogSourceTypeType(value); }
        public static implicit operator ApplicationDebugLogSourceTypeType(DBNull value) { return new ApplicationDebugLogSourceTypeType(null); }
    }
    public class ApplicationFeatureIDType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApplicationFeatureIDType(string value) : base(value) { }
        public static implicit operator ApplicationFeatureIDType(string value) { return new ApplicationFeatureIDType(value); }
        public static implicit operator ApplicationFeatureIDType(DBNull value) { return new ApplicationFeatureIDType(null); }
    }
    public class ApplicationFeatureNameType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApplicationFeatureNameType(string value) : base(value) { }
        public static implicit operator ApplicationFeatureNameType(string value) { return new ApplicationFeatureNameType(value); }
        public static implicit operator ApplicationFeatureNameType(DBNull value) { return new ApplicationFeatureNameType(null); }
    }
    public class ApplicationFeatureTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApplicationFeatureTypeType(string value) : base(value) { }
        public static implicit operator ApplicationFeatureTypeType(string value) { return new ApplicationFeatureTypeType(value); }
        public static implicit operator ApplicationFeatureTypeType(DBNull value) { return new ApplicationFeatureTypeType(null); }
    }
    public class ApplicationNameType : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApplicationNameType(string value) : base(value) { }
        public static implicit operator ApplicationNameType(string value) { return new ApplicationNameType(value); }
        public static implicit operator ApplicationNameType(DBNull value) { return new ApplicationNameType(null); }
    }
    public class ApplyToInvNumCategoryType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApplyToInvNumCategoryType(byte? value) : base(value) { }
        public static implicit operator ApplyToInvNumCategoryType(byte? value) { return new ApplyToInvNumCategoryType(value); }
        public static implicit operator ApplyToInvNumCategoryType(DBNull value) { return new ApplyToInvNumCategoryType(null); }
        private ApplyToInvNumCategoryType(int? value) : base(value) { }
        public static implicit operator ApplyToInvNumCategoryType(int? value) { return new ApplyToInvNumCategoryType(value); }
    }
    public class AppModuleType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AppModuleType(string value) : base(value) { }
        public static implicit operator AppModuleType(string value) { return new AppModuleType(value); }
        public static implicit operator AppModuleType(DBNull value) { return new AppModuleType(null); }
    }
    public class AppmtdTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AppmtdTypeType(string value) : base(value) { }
        public static implicit operator AppmtdTypeType(string value) { return new AppmtdTypeType(value); }
        public static implicit operator AppmtdTypeType(DBNull value) { return new AppmtdTypeType(null); }
    }
    public class AppmtPayTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AppmtPayTypeType(string value) : base(value) { }
        public static implicit operator AppmtPayTypeType(string value) { return new AppmtPayTypeType(value); }
        public static implicit operator AppmtPayTypeType(DBNull value) { return new AppmtPayTypeType(null); }
    }
    public class AppNumType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AppNumType(string value) : base(value) { }
        public static implicit operator AppNumType(string value) { return new AppNumType(value); }
        public static implicit operator AppNumType(DBNull value) { return new AppNumType(null); }
    }
    public class ApsAgvfleetType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsAgvfleetType(string value) : base(value) { }
        public static implicit operator ApsAgvfleetType(string value) { return new ApsAgvfleetType(value); }
        public static implicit operator ApsAgvfleetType(DBNull value) { return new ApsAgvfleetType(null); }
    }
    public class ApsAgvsysType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsAgvsysType(string value) : base(value) { }
        public static implicit operator ApsAgvsysType(string value) { return new ApsAgvsysType(value); }
        public static implicit operator ApsAgvsysType(DBNull value) { return new ApsAgvsysType(null); }
    }
    public class ApsAltChangeType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsAltChangeType(decimal? value) : base(value) { }
        public static implicit operator ApsAltChangeType(decimal? value) { return new ApsAltChangeType(value); }
        public static implicit operator ApsAltChangeType(DBNull value) { return new ApsAltChangeType(null); }
    }
    public class ApsAltNoType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsAltNoType(short? value) : base(value) { }
        public static implicit operator ApsAltNoType(short? value) { return new ApsAltNoType(value); }
        public static implicit operator ApsAltNoType(DBNull value) { return new ApsAltNoType(null); }
        private ApsAltNoType(int? value) : base(value) { }
        public static implicit operator ApsAltNoType(int? value) { return new ApsAltNoType(value); }
    }
    public class ApsAttribType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsAttribType(string value) : base(value) { }
        public static implicit operator ApsAttribType(string value) { return new ApsAttribType(value); }
        public static implicit operator ApsAttribType(DBNull value) { return new ApsAttribType(null); }
    }
    public class ApsAttvalType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsAttvalType(string value) : base(value) { }
        public static implicit operator ApsAttvalType(string value) { return new ApsAttvalType(value); }
        public static implicit operator ApsAttvalType(DBNull value) { return new ApsAttvalType(null); }
    }
    public class ApsBatchNumberType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsBatchNumberType(int? value) : base(value) { }
        public static implicit operator ApsBatchNumberType(int? value) { return new ApsBatchNumberType(value); }
        public static implicit operator ApsBatchNumberType(DBNull value) { return new ApsBatchNumberType(null); }
        private ApsBatchNumberType(long? value) : base(value) { }
        public static implicit operator ApsBatchNumberType(long? value) { return new ApsBatchNumberType(value); }
    }
    public class ApsBatchOverRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsBatchOverRlType(short? value) : base(value) { }
        public static implicit operator ApsBatchOverRlType(short? value) { return new ApsBatchOverRlType(value); }
        public static implicit operator ApsBatchOverRlType(DBNull value) { return new ApsBatchOverRlType(null); }
        private ApsBatchOverRlType(int? value) : base(value) { }
        public static implicit operator ApsBatchOverRlType(int? value) { return new ApsBatchOverRlType(value); }
    }
    public class ApsBatchQuanRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsBatchQuanRlType(short? value) : base(value) { }
        public static implicit operator ApsBatchQuanRlType(short? value) { return new ApsBatchQuanRlType(value); }
        public static implicit operator ApsBatchQuanRlType(DBNull value) { return new ApsBatchQuanRlType(null); }
        private ApsBatchQuanRlType(int? value) : base(value) { }
        public static implicit operator ApsBatchQuanRlType(int? value) { return new ApsBatchQuanRlType(value); }
    }
    public class ApsBatchReportCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsBatchReportCodeType(string value) : base(value) { }
        public static implicit operator ApsBatchReportCodeType(string value) { return new ApsBatchReportCodeType(value); }
        public static implicit operator ApsBatchReportCodeType(DBNull value) { return new ApsBatchReportCodeType(null); }
    }
    public class ApsBatchSepRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsBatchSepRlType(short? value) : base(value) { }
        public static implicit operator ApsBatchSepRlType(short? value) { return new ApsBatchSepRlType(value); }
        public static implicit operator ApsBatchSepRlType(DBNull value) { return new ApsBatchSepRlType(null); }
        private ApsBatchSepRlType(int? value) : base(value) { }
        public static implicit operator ApsBatchSepRlType(int? value) { return new ApsBatchSepRlType(value); }
    }
    public class APSBatchStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private APSBatchStatusType(string value) : base(value) { }
        public static implicit operator APSBatchStatusType(string value) { return new APSBatchStatusType(value); }
        public static implicit operator APSBatchStatusType(DBNull value) { return new APSBatchStatusType(null); }
    }
    public class ApsBatchType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsBatchType(string value) : base(value) { }
        public static implicit operator ApsBatchType(string value) { return new ApsBatchType(value); }
        public static implicit operator ApsBatchType(DBNull value) { return new ApsBatchType(null); }
    }
    public class ApsBitFlagsType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsBitFlagsType(int? value) : base(value) { }
        public static implicit operator ApsBitFlagsType(int? value) { return new ApsBitFlagsType(value); }
        public static implicit operator ApsBitFlagsType(DBNull value) { return new ApsBitFlagsType(null); }
        private ApsBitFlagsType(long? value) : base(value) { }
        public static implicit operator ApsBitFlagsType(long? value) { return new ApsBitFlagsType(value); }
    }
    public class ApsBitmapType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsBitmapType(string value) : base(value) { }
        public static implicit operator ApsBitmapType(string value) { return new ApsBitmapType(value); }
        public static implicit operator ApsBitmapType(DBNull value) { return new ApsBitmapType(null); }
    }
    public class ApsBomQuanCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsBomQuanCodeType(string value) : base(value) { }
        public static implicit operator ApsBomQuanCodeType(string value) { return new ApsBomQuanCodeType(value); }
        public static implicit operator ApsBomQuanCodeType(DBNull value) { return new ApsBomQuanCodeType(null); }
    }
    public class ApsBreakRuleType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsBreakRuleType(short? value) : base(value) { }
        public static implicit operator ApsBreakRuleType(short? value) { return new ApsBreakRuleType(value); }
        public static implicit operator ApsBreakRuleType(DBNull value) { return new ApsBreakRuleType(null); }
        private ApsBreakRuleType(int? value) : base(value) { }
        public static implicit operator ApsBreakRuleType(int? value) { return new ApsBreakRuleType(value); }
    }
    public class ApsBufferScaleType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsBufferScaleType(int? value) : base(value) { }
        public static implicit operator ApsBufferScaleType(int? value) { return new ApsBufferScaleType(value); }
        public static implicit operator ApsBufferScaleType(DBNull value) { return new ApsBufferScaleType(null); }
        private ApsBufferScaleType(long? value) : base(value) { }
        public static implicit operator ApsBufferScaleType(long? value) { return new ApsBufferScaleType(value); }
    }
    public class ApsCalidType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsCalidType(string value) : base(value) { }
        public static implicit operator ApsCalidType(string value) { return new ApsCalidType(value); }
        public static implicit operator ApsCalidType(DBNull value) { return new ApsCalidType(null); }
    }
    public class ApsCategoryType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsCategoryType(int? value) : base(value) { }
        public static implicit operator ApsCategoryType(int? value) { return new ApsCategoryType(value); }
        public static implicit operator ApsCategoryType(DBNull value) { return new ApsCategoryType(null); }
        private ApsCategoryType(long? value) : base(value) { }
        public static implicit operator ApsCategoryType(long? value) { return new ApsCategoryType(value); }
    }
    public class ApsChangeTypeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsChangeTypeType(int? value) : base(value) { }
        public static implicit operator ApsChangeTypeType(int? value) { return new ApsChangeTypeType(value); }
        public static implicit operator ApsChangeTypeType(DBNull value) { return new ApsChangeTypeType(null); }
        private ApsChangeTypeType(long? value) : base(value) { }
        public static implicit operator ApsChangeTypeType(long? value) { return new ApsChangeTypeType(value); }
    }
    public class ApsCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsCodeType(string value) : base(value) { }
        public static implicit operator ApsCodeType(string value) { return new ApsCodeType(value); }
        public static implicit operator ApsCodeType(DBNull value) { return new ApsCodeType(null); }
    }
    public class ApsConsegType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsConsegType(string value) : base(value) { }
        public static implicit operator ApsConsegType(string value) { return new ApsConsegType(value); }
        public static implicit operator ApsConsegType(DBNull value) { return new ApsConsegType(null); }
    }
    public class ApsConsysType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsConsysType(string value) : base(value) { }
        public static implicit operator ApsConsysType(string value) { return new ApsConsysType(value); }
        public static implicit operator ApsConsysType(DBNull value) { return new ApsConsysType(null); }
    }
    public class ApsCostType : FloatType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 53; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsCostType(double? value) : base(value) { }
        public static implicit operator ApsCostType(double? value) { return new ApsCostType(value); }
        public static implicit operator ApsCostType(DBNull value) { return new ApsCostType((double?)null); }
        private ApsCostType(decimal? value) : base(value) { }
        public static implicit operator ApsCostType(decimal? value) { return new ApsCostType(value); }
    }
    public class ApsCostTypeCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsCostTypeCodeType(string value) : base(value) { }
        public static implicit operator ApsCostTypeCodeType(string value) { return new ApsCostTypeCodeType(value); }
        public static implicit operator ApsCostTypeCodeType(DBNull value) { return new ApsCostTypeCodeType(null); }
    }
    public class ApsCustomerType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsCustomerType(string value) : base(value) { }
        public static implicit operator ApsCustomerType(string value) { return new ApsCustomerType(value); }
        public static implicit operator ApsCustomerType(DBNull value) { return new ApsCustomerType(null); }
    }
    public class ApsDatabasenameType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsDatabasenameType(string value) : base(value) { }
        public static implicit operator ApsDatabasenameType(string value) { return new ApsDatabasenameType(value); }
        public static implicit operator ApsDatabasenameType(DBNull value) { return new ApsDatabasenameType(null); }
    }
    public class ApsDatasetNumberType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsDatasetNumberType(short? value) : base(value) { }
        public static implicit operator ApsDatasetNumberType(short? value) { return new ApsDatasetNumberType(value); }
        public static implicit operator ApsDatasetNumberType(DBNull value) { return new ApsDatasetNumberType(null); }
        private ApsDatasetNumberType(int? value) : base(value) { }
        public static implicit operator ApsDatasetNumberType(int? value) { return new ApsDatasetNumberType(value); }
    }
    public class ApsDayOrdinalType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsDayOrdinalType(short? value) : base(value) { }
        public static implicit operator ApsDayOrdinalType(short? value) { return new ApsDayOrdinalType(value); }
        public static implicit operator ApsDayOrdinalType(DBNull value) { return new ApsDayOrdinalType(null); }
        private ApsDayOrdinalType(int? value) : base(value) { }
        public static implicit operator ApsDayOrdinalType(int? value) { return new ApsDayOrdinalType(value); }
    }
    public class ApsDbMaxType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsDbMaxType(byte? value) : base(value) { }
        public static implicit operator ApsDbMaxType(byte? value) { return new ApsDbMaxType(value); }
        public static implicit operator ApsDbMaxType(DBNull value) { return new ApsDbMaxType(null); }
        private ApsDbMaxType(int? value) : base(value) { }
        public static implicit operator ApsDbMaxType(int? value) { return new ApsDbMaxType(value); }
    }
    public class ApsDbNameType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsDbNameType(string value) : base(value) { }
        public static implicit operator ApsDbNameType(string value) { return new ApsDbNameType(value); }
        public static implicit operator ApsDbNameType(DBNull value) { return new ApsDbNameType(null); }
    }
    public class ApsDescriptType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsDescriptType(string value) : base(value) { }
        public static implicit operator ApsDescriptType(string value) { return new ApsDescriptType(value); }
        public static implicit operator ApsDescriptType(DBNull value) { return new ApsDescriptType(null); }
    }
    public class ApsDiskSpaceType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsDiskSpaceType(int? value) : base(value) { }
        public static implicit operator ApsDiskSpaceType(int? value) { return new ApsDiskSpaceType(value); }
        public static implicit operator ApsDiskSpaceType(DBNull value) { return new ApsDiskSpaceType(null); }
        private ApsDiskSpaceType(long? value) : base(value) { }
        public static implicit operator ApsDiskSpaceType(long? value) { return new ApsDiskSpaceType(value); }
    }
    public class ApsDurationType : FloatType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 53; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsDurationType(double? value) : base(value) { }
        public static implicit operator ApsDurationType(double? value) { return new ApsDurationType(value); }
        public static implicit operator ApsDurationType(DBNull value) { return new ApsDurationType((double?)null); }
        private ApsDurationType(decimal? value) : base(value) { }
        public static implicit operator ApsDurationType(decimal? value) { return new ApsDurationType(value); }
    }
    public class ApsEffDateTypeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsEffDateTypeType(short? value) : base(value) { }
        public static implicit operator ApsEffDateTypeType(short? value) { return new ApsEffDateTypeType(value); }
        public static implicit operator ApsEffDateTypeType(DBNull value) { return new ApsEffDateTypeType(null); }
        private ApsEffDateTypeType(int? value) : base(value) { }
        public static implicit operator ApsEffDateTypeType(int? value) { return new ApsEffDateTypeType(value); }
    }
    public class ApsEffectType : StringType
    {
        public override int Length { get => 78; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsEffectType(string value) : base(value) { }
        public static implicit operator ApsEffectType(string value) { return new ApsEffectType(value); }
        public static implicit operator ApsEffectType(DBNull value) { return new ApsEffectType(null); }
    }
    public class ApsEffvalType : StringType
    {
        public override int Length { get => 126; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsEffvalType(string value) : base(value) { }
        public static implicit operator ApsEffvalType(string value) { return new ApsEffvalType(value); }
        public static implicit operator ApsEffvalType(DBNull value) { return new ApsEffvalType(null); }
    }
    public class ApsEmailType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsEmailType(string value) : base(value) { }
        public static implicit operator ApsEmailType(string value) { return new ApsEmailType(value); }
        public static implicit operator ApsEmailType(DBNull value) { return new ApsEmailType(null); }
    }
    public class ApsErrFuncType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsErrFuncType(string value) : base(value) { }
        public static implicit operator ApsErrFuncType(string value) { return new ApsErrFuncType(value); }
        public static implicit operator ApsErrFuncType(DBNull value) { return new ApsErrFuncType(null); }
    }
    public class ApsErrMsgType : StringType
    {
        public override int Length { get => 1024; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsErrMsgType(string value) : base(value) { }
        public static implicit operator ApsErrMsgType(string value) { return new ApsErrMsgType(value); }
        public static implicit operator ApsErrMsgType(DBNull value) { return new ApsErrMsgType(null); }
    }
    public class ApsErrProcType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsErrProcType(string value) : base(value) { }
        public static implicit operator ApsErrProcType(string value) { return new ApsErrProcType(value); }
        public static implicit operator ApsErrProcType(DBNull value) { return new ApsErrProcType(null); }
    }
    public class ApsExprType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsExprType(string value) : base(value) { }
        public static implicit operator ApsExprType(string value) { return new ApsExprType(value); }
        public static implicit operator ApsExprType(DBNull value) { return new ApsExprType(null); }
    }
    public class ApsFieldType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsFieldType(string value) : base(value) { }
        public static implicit operator ApsFieldType(string value) { return new ApsFieldType(value); }
        public static implicit operator ApsFieldType(DBNull value) { return new ApsFieldType(null); }
    }
    public class ApsFilePrefixType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsFilePrefixType(string value) : base(value) { }
        public static implicit operator ApsFilePrefixType(string value) { return new ApsFilePrefixType(value); }
        public static implicit operator ApsFilePrefixType(DBNull value) { return new ApsFilePrefixType(null); }
    }
    public class ApsFlagType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsFlagType(string value) : base(value) { }
        public static implicit operator ApsFlagType(string value) { return new ApsFlagType(value); }
        public static implicit operator ApsFlagType(DBNull value) { return new ApsFlagType(null); }
    }
    public class ApsFleetType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsFleetType(string value) : base(value) { }
        public static implicit operator ApsFleetType(string value) { return new ApsFleetType(value); }
        public static implicit operator ApsFleetType(DBNull value) { return new ApsFleetType(null); }
    }
    public class ApsFloatType : FloatType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 53; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsFloatType(double? value) : base(value) { }
        public static implicit operator ApsFloatType(double? value) { return new ApsFloatType(value); }
        public static implicit operator ApsFloatType(DBNull value) { return new ApsFloatType((double?)null); }
        private ApsFloatType(decimal? value) : base(value) { }
        public static implicit operator ApsFloatType(decimal? value) { return new ApsFloatType(value); }
    }
    public class ApsGanttThemeIDType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsGanttThemeIDType(string value) : base(value) { }
        public static implicit operator ApsGanttThemeIDType(string value) { return new ApsGanttThemeIDType(value); }
        public static implicit operator ApsGanttThemeIDType(DBNull value) { return new ApsGanttThemeIDType(null); }
    }
    public class ApsGatewayIntervalType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsGatewayIntervalType(short? value) : base(value) { }
        public static implicit operator ApsGatewayIntervalType(short? value) { return new ApsGatewayIntervalType(value); }
        public static implicit operator ApsGatewayIntervalType(DBNull value) { return new ApsGatewayIntervalType(null); }
        private ApsGatewayIntervalType(int? value) : base(value) { }
        public static implicit operator ApsGatewayIntervalType(int? value) { return new ApsGatewayIntervalType(value); }
    }
    public class ApsGlbSeqRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsGlbSeqRlType(short? value) : base(value) { }
        public static implicit operator ApsGlbSeqRlType(short? value) { return new ApsGlbSeqRlType(value); }
        public static implicit operator ApsGlbSeqRlType(DBNull value) { return new ApsGlbSeqRlType(null); }
        private ApsGlbSeqRlType(int? value) : base(value) { }
        public static implicit operator ApsGlbSeqRlType(int? value) { return new ApsGlbSeqRlType(value); }
    }
    public class ApsGntHighlightType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsGntHighlightType(string value) : base(value) { }
        public static implicit operator ApsGntHighlightType(string value) { return new ApsGntHighlightType(value); }
        public static implicit operator ApsGntHighlightType(DBNull value) { return new ApsGntHighlightType(null); }
    }
    public class ApsGntSelectionType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsGntSelectionType(string value) : base(value) { }
        public static implicit operator ApsGntSelectionType(string value) { return new ApsGntSelectionType(value); }
        public static implicit operator ApsGntSelectionType(DBNull value) { return new ApsGntSelectionType(null); }
    }
    public class ApsHostnameType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsHostnameType(string value) : base(value) { }
        public static implicit operator ApsHostnameType(string value) { return new ApsHostnameType(value); }
        public static implicit operator ApsHostnameType(DBNull value) { return new ApsHostnameType(null); }
    }
    public class ApsHoursType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsHoursType(int? value) : base(value) { }
        public static implicit operator ApsHoursType(int? value) { return new ApsHoursType(value); }
        public static implicit operator ApsHoursType(DBNull value) { return new ApsHoursType(null); }
        private ApsHoursType(long? value) : base(value) { }
        public static implicit operator ApsHoursType(long? value) { return new ApsHoursType(value); }
    }
    public class ApsIconType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsIconType(string value) : base(value) { }
        public static implicit operator ApsIconType(string value) { return new ApsIconType(value); }
        public static implicit operator ApsIconType(DBNull value) { return new ApsIconType(null); }
    }
    public class ApsIntType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsIntType(int? value) : base(value) { }
        public static implicit operator ApsIntType(int? value) { return new ApsIntType(value); }
        public static implicit operator ApsIntType(DBNull value) { return new ApsIntType(null); }
        private ApsIntType(long? value) : base(value) { }
        public static implicit operator ApsIntType(long? value) { return new ApsIntType(value); }
    }
    public class ApsItemTagType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsItemTagType(int? value) : base(value) { }
        public static implicit operator ApsItemTagType(int? value) { return new ApsItemTagType(value); }
        public static implicit operator ApsItemTagType(DBNull value) { return new ApsItemTagType(null); }
        private ApsItemTagType(long? value) : base(value) { }
        public static implicit operator ApsItemTagType(long? value) { return new ApsItemTagType(value); }
    }
    public class ApsIterationsType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsIterationsType(short? value) : base(value) { }
        public static implicit operator ApsIterationsType(short? value) { return new ApsIterationsType(value); }
        public static implicit operator ApsIterationsType(DBNull value) { return new ApsIterationsType(null); }
        private ApsIterationsType(int? value) : base(value) { }
        public static implicit operator ApsIterationsType(int? value) { return new ApsIterationsType(value); }
    }
    public class ApsJobstepType : StringType
    {
        public override int Length { get => 76; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsJobstepType(string value) : base(value) { }
        public static implicit operator ApsJobstepType(string value) { return new ApsJobstepType(value); }
        public static implicit operator ApsJobstepType(DBNull value) { return new ApsJobstepType(null); }
    }
    public class ApsJs19CrsBrkRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsJs19CrsBrkRlType(short? value) : base(value) { }
        public static implicit operator ApsJs19CrsBrkRlType(short? value) { return new ApsJs19CrsBrkRlType(value); }
        public static implicit operator ApsJs19CrsBrkRlType(DBNull value) { return new ApsJs19CrsBrkRlType(null); }
        private ApsJs19CrsBrkRlType(int? value) : base(value) { }
        public static implicit operator ApsJs19CrsBrkRlType(int? value) { return new ApsJs19CrsBrkRlType(value); }
    }
    public class ApsJs19OlTypeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsJs19OlTypeType(short? value) : base(value) { }
        public static implicit operator ApsJs19OlTypeType(short? value) { return new ApsJs19OlTypeType(value); }
        public static implicit operator ApsJs19OlTypeType(DBNull value) { return new ApsJs19OlTypeType(null); }
        private ApsJs19OlTypeType(int? value) : base(value) { }
        public static implicit operator ApsJs19OlTypeType(int? value) { return new ApsJs19OlTypeType(value); }
    }
    public class ApsJs19WhenRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsJs19WhenRlType(short? value) : base(value) { }
        public static implicit operator ApsJs19WhenRlType(short? value) { return new ApsJs19WhenRlType(value); }
        public static implicit operator ApsJs19WhenRlType(DBNull value) { return new ApsJs19WhenRlType(null); }
        private ApsJs19WhenRlType(int? value) : base(value) { }
        public static implicit operator ApsJs19WhenRlType(int? value) { return new ApsJs19WhenRlType(value); }
    }
    public class ApsJsAllocRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsJsAllocRlType(short? value) : base(value) { }
        public static implicit operator ApsJsAllocRlType(short? value) { return new ApsJsAllocRlType(value); }
        public static implicit operator ApsJsAllocRlType(DBNull value) { return new ApsJsAllocRlType(null); }
        private ApsJsAllocRlType(int? value) : base(value) { }
        public static implicit operator ApsJsAllocRlType(int? value) { return new ApsJsAllocRlType(value); }
    }
    public class ApsJsBasedCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsJsBasedCodeType(string value) : base(value) { }
        public static implicit operator ApsJsBasedCodeType(string value) { return new ApsJsBasedCodeType(value); }
        public static implicit operator ApsJsBasedCodeType(DBNull value) { return new ApsJsBasedCodeType(null); }
    }
    public class ApsJsResActnCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsJsResActnCodeType(string value) : base(value) { }
        public static implicit operator ApsJsResActnCodeType(string value) { return new ApsJsResActnCodeType(value); }
        public static implicit operator ApsJsResActnCodeType(DBNull value) { return new ApsJsResActnCodeType(null); }
    }
    public class ApsJsSelRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsJsSelRlType(short? value) : base(value) { }
        public static implicit operator ApsJsSelRlType(short? value) { return new ApsJsSelRlType(value); }
        public static implicit operator ApsJsSelRlType(DBNull value) { return new ApsJsSelRlType(null); }
        private ApsJsSelRlType(int? value) : base(value) { }
        public static implicit operator ApsJsSelRlType(int? value) { return new ApsJsSelRlType(value); }
    }
    public class ApsJsStepexpRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsJsStepexpRlType(short? value) : base(value) { }
        public static implicit operator ApsJsStepexpRlType(short? value) { return new ApsJsStepexpRlType(value); }
        public static implicit operator ApsJsStepexpRlType(DBNull value) { return new ApsJsStepexpRlType(null); }
        private ApsJsStepexpRlType(int? value) : base(value) { }
        public static implicit operator ApsJsStepexpRlType(int? value) { return new ApsJsStepexpRlType(value); }
    }
    public class ApsJsSteptmRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsJsSteptmRlType(short? value) : base(value) { }
        public static implicit operator ApsJsSteptmRlType(short? value) { return new ApsJsSteptmRlType(value); }
        public static implicit operator ApsJsSteptmRlType(DBNull value) { return new ApsJsSteptmRlType(null); }
        private ApsJsSteptmRlType(int? value) : base(value) { }
        public static implicit operator ApsJsSteptmRlType(int? value) { return new ApsJsSteptmRlType(value); }
    }
    public class ApsJstypeType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsJstypeType(string value) : base(value) { }
        public static implicit operator ApsJstypeType(string value) { return new ApsJstypeType(value); }
        public static implicit operator ApsJstypeType(DBNull value) { return new ApsJstypeType(null); }
    }
    public class ApsLoadCompletionCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsLoadCompletionCodeType(string value) : base(value) { }
        public static implicit operator ApsLoadCompletionCodeType(string value) { return new ApsLoadCompletionCodeType(value); }
        public static implicit operator ApsLoadCompletionCodeType(DBNull value) { return new ApsLoadCompletionCodeType(null); }
    }
    public class ApsLoadIDType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsLoadIDType(short? value) : base(value) { }
        public static implicit operator ApsLoadIDType(short? value) { return new ApsLoadIDType(value); }
        public static implicit operator ApsLoadIDType(DBNull value) { return new ApsLoadIDType(null); }
        private ApsLoadIDType(int? value) : base(value) { }
        public static implicit operator ApsLoadIDType(int? value) { return new ApsLoadIDType(value); }
    }
    public class ApsLoadSizeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsLoadSizeType(int? value) : base(value) { }
        public static implicit operator ApsLoadSizeType(int? value) { return new ApsLoadSizeType(value); }
        public static implicit operator ApsLoadSizeType(DBNull value) { return new ApsLoadSizeType(null); }
        private ApsLoadSizeType(long? value) : base(value) { }
        public static implicit operator ApsLoadSizeType(long? value) { return new ApsLoadSizeType(value); }
    }
    public class ApsLocationType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsLocationType(string value) : base(value) { }
        public static implicit operator ApsLocationType(string value) { return new ApsLocationType(value); }
        public static implicit operator ApsLocationType(DBNull value) { return new ApsLocationType(null); }
    }
    public class ApsLStatusCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsLStatusCodeType(string value) : base(value) { }
        public static implicit operator ApsLStatusCodeType(string value) { return new ApsLStatusCodeType(value); }
        public static implicit operator ApsLStatusCodeType(DBNull value) { return new ApsLStatusCodeType(null); }
    }
    public class ApsLtableType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsLtableType(string value) : base(value) { }
        public static implicit operator ApsLtableType(string value) { return new ApsLtableType(value); }
        public static implicit operator ApsLtableType(DBNull value) { return new ApsLtableType(null); }
    }
    public class ApsLtabvalType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsLtabvalType(string value) : base(value) { }
        public static implicit operator ApsLtabvalType(string value) { return new ApsLtabvalType(value); }
        public static implicit operator ApsLtabvalType(DBNull value) { return new ApsLtabvalType(null); }
    }
    public class ApsLtypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsLtypeType(string value) : base(value) { }
        public static implicit operator ApsLtypeType(string value) { return new ApsLtypeType(value); }
        public static implicit operator ApsLtypeType(DBNull value) { return new ApsLtypeType(null); }
    }
    public class ApsMaintType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsMaintType(string value) : base(value) { }
        public static implicit operator ApsMaintType(string value) { return new ApsMaintType(value); }
        public static implicit operator ApsMaintType(DBNull value) { return new ApsMaintType(null); }
    }
    public class ApsMaterialType : StringType
    {
        public override int Length { get => 62; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsMaterialType(string value) : base(value) { }
        public static implicit operator ApsMaterialType(string value) { return new ApsMaterialType(value); }
        public static implicit operator ApsMaterialType(DBNull value) { return new ApsMaterialType(null); }
    }
    public class ApsMatlDelvRuleType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsMatlDelvRuleType(short? value) : base(value) { }
        public static implicit operator ApsMatlDelvRuleType(short? value) { return new ApsMatlDelvRuleType(value); }
        public static implicit operator ApsMatlDelvRuleType(DBNull value) { return new ApsMatlDelvRuleType(null); }
        private ApsMatlDelvRuleType(int? value) : base(value) { }
        public static implicit operator ApsMatlDelvRuleType(int? value) { return new ApsMatlDelvRuleType(value); }
    }
    public class ApsMatlgrpType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsMatlgrpType(string value) : base(value) { }
        public static implicit operator ApsMatlgrpType(string value) { return new ApsMatlgrpType(value); }
        public static implicit operator ApsMatlgrpType(DBNull value) { return new ApsMatlgrpType(null); }
    }
    public class ApsMatljsType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsMatljsType(string value) : base(value) { }
        public static implicit operator ApsMatljsType(string value) { return new ApsMatljsType(value); }
        public static implicit operator ApsMatljsType(DBNull value) { return new ApsMatljsType(null); }
    }
    public class ApsMatlSelRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsMatlSelRlType(short? value) : base(value) { }
        public static implicit operator ApsMatlSelRlType(short? value) { return new ApsMatlSelRlType(value); }
        public static implicit operator ApsMatlSelRlType(DBNull value) { return new ApsMatlSelRlType(null); }
        private ApsMatlSelRlType(int? value) : base(value) { }
        public static implicit operator ApsMatlSelRlType(int? value) { return new ApsMatlSelRlType(value); }
    }
    public class ApsMatlShipRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsMatlShipRlType(short? value) : base(value) { }
        public static implicit operator ApsMatlShipRlType(short? value) { return new ApsMatlShipRlType(value); }
        public static implicit operator ApsMatlShipRlType(DBNull value) { return new ApsMatlShipRlType(null); }
        private ApsMatlShipRlType(int? value) : base(value) { }
        public static implicit operator ApsMatlShipRlType(int? value) { return new ApsMatlShipRlType(value); }
    }
    public class ApsMaxIDType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsMaxIDType(string value) : base(value) { }
        public static implicit operator ApsMaxIDType(string value) { return new ApsMaxIDType(value); }
        public static implicit operator ApsMaxIDType(DBNull value) { return new ApsMaxIDType(null); }
    }
    public class ApsMemoryType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsMemoryType(int? value) : base(value) { }
        public static implicit operator ApsMemoryType(int? value) { return new ApsMemoryType(value); }
        public static implicit operator ApsMemoryType(DBNull value) { return new ApsMemoryType(null); }
        private ApsMemoryType(long? value) : base(value) { }
        public static implicit operator ApsMemoryType(long? value) { return new ApsMemoryType(value); }
    }
    public class ApsMessageLifetimeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsMessageLifetimeType(int? value) : base(value) { }
        public static implicit operator ApsMessageLifetimeType(int? value) { return new ApsMessageLifetimeType(value); }
        public static implicit operator ApsMessageLifetimeType(DBNull value) { return new ApsMessageLifetimeType(null); }
        private ApsMessageLifetimeType(long? value) : base(value) { }
        public static implicit operator ApsMessageLifetimeType(long? value) { return new ApsMessageLifetimeType(value); }
    }
    public class ApsMhflsgType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsMhflsgType(string value) : base(value) { }
        public static implicit operator ApsMhflsgType(string value) { return new ApsMhflsgType(value); }
        public static implicit operator ApsMhflsgType(DBNull value) { return new ApsMhflsgType(null); }
    }
    public class ApsModeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsModeType(string value) : base(value) { }
        public static implicit operator ApsModeType(string value) { return new ApsModeType(value); }
        public static implicit operator ApsModeType(DBNull value) { return new ApsModeType(null); }
    }
    public class ApsMsgParmType : StringType
    {
        public override int Length { get => 400; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsMsgParmType(string value) : base(value) { }
        public static implicit operator ApsMsgParmType(string value) { return new ApsMsgParmType(value); }
        public static implicit operator ApsMsgParmType(DBNull value) { return new ApsMsgParmType(null); }
    }
    public class ApsMultiplierType : FloatType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 53; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsMultiplierType(double? value) : base(value) { }
        public static implicit operator ApsMultiplierType(double? value) { return new ApsMultiplierType(value); }
        public static implicit operator ApsMultiplierType(DBNull value) { return new ApsMultiplierType((double?)null); }
        private ApsMultiplierType(decimal? value) : base(value) { }
        public static implicit operator ApsMultiplierType(decimal? value) { return new ApsMultiplierType(value); }
    }
    public class ApsOperationEndCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsOperationEndCodeType(string value) : base(value) { }
        public static implicit operator ApsOperationEndCodeType(string value) { return new ApsOperationEndCodeType(value); }
        public static implicit operator ApsOperationEndCodeType(DBNull value) { return new ApsOperationEndCodeType(null); }
    }
    public class ApsOperationStartCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsOperationStartCodeType(string value) : base(value) { }
        public static implicit operator ApsOperationStartCodeType(string value) { return new ApsOperationStartCodeType(value); }
        public static implicit operator ApsOperationStartCodeType(DBNull value) { return new ApsOperationStartCodeType(null); }
    }
    public class ApsOperationStatusCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsOperationStatusCodeType(string value) : base(value) { }
        public static implicit operator ApsOperationStatusCodeType(string value) { return new ApsOperationStatusCodeType(value); }
        public static implicit operator ApsOperationStatusCodeType(DBNull value) { return new ApsOperationStatusCodeType(null); }
    }
    public class ApsOperationTagType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsOperationTagType(int? value) : base(value) { }
        public static implicit operator ApsOperationTagType(int? value) { return new ApsOperationTagType(value); }
        public static implicit operator ApsOperationTagType(DBNull value) { return new ApsOperationTagType(null); }
        private ApsOperationTagType(long? value) : base(value) { }
        public static implicit operator ApsOperationTagType(long? value) { return new ApsOperationTagType(value); }
    }
    public class ApsOrderCodeType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsOrderCodeType(byte? value) : base(value) { }
        public static implicit operator ApsOrderCodeType(byte? value) { return new ApsOrderCodeType(value); }
        public static implicit operator ApsOrderCodeType(DBNull value) { return new ApsOrderCodeType(null); }
        private ApsOrderCodeType(int? value) : base(value) { }
        public static implicit operator ApsOrderCodeType(int? value) { return new ApsOrderCodeType(value); }
    }
    public class ApsOrderCompletionCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsOrderCompletionCodeType(string value) : base(value) { }
        public static implicit operator ApsOrderCompletionCodeType(string value) { return new ApsOrderCompletionCodeType(value); }
        public static implicit operator ApsOrderCompletionCodeType(DBNull value) { return new ApsOrderCompletionCodeType(null); }
    }
    public class ApsOrderCostBasisType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsOrderCostBasisType(string value) : base(value) { }
        public static implicit operator ApsOrderCostBasisType(string value) { return new ApsOrderCostBasisType(value); }
        public static implicit operator ApsOrderCostBasisType(DBNull value) { return new ApsOrderCostBasisType(null); }
    }
    public class ApsOrderExcessCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsOrderExcessCodeType(string value) : base(value) { }
        public static implicit operator ApsOrderExcessCodeType(string value) { return new ApsOrderExcessCodeType(value); }
        public static implicit operator ApsOrderExcessCodeType(DBNull value) { return new ApsOrderExcessCodeType(null); }
    }
    public class ApsOrderRelRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsOrderRelRlType(short? value) : base(value) { }
        public static implicit operator ApsOrderRelRlType(short? value) { return new ApsOrderRelRlType(value); }
        public static implicit operator ApsOrderRelRlType(DBNull value) { return new ApsOrderRelRlType(null); }
        private ApsOrderRelRlType(int? value) : base(value) { }
        public static implicit operator ApsOrderRelRlType(int? value) { return new ApsOrderRelRlType(value); }
    }
    public class ApsOrderStartCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsOrderStartCodeType(string value) : base(value) { }
        public static implicit operator ApsOrderStartCodeType(string value) { return new ApsOrderStartCodeType(value); }
        public static implicit operator ApsOrderStartCodeType(DBNull value) { return new ApsOrderStartCodeType(null); }
    }
    public class ApsOrderStatusCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsOrderStatusCodeType(string value) : base(value) { }
        public static implicit operator ApsOrderStatusCodeType(string value) { return new ApsOrderStatusCodeType(value); }
        public static implicit operator ApsOrderStatusCodeType(DBNull value) { return new ApsOrderStatusCodeType(null); }
    }
    public class ApsOrderTagType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsOrderTagType(int? value) : base(value) { }
        public static implicit operator ApsOrderTagType(int? value) { return new ApsOrderTagType(value); }
        public static implicit operator ApsOrderTagType(DBNull value) { return new ApsOrderTagType(null); }
        private ApsOrderTagType(long? value) : base(value) { }
        public static implicit operator ApsOrderTagType(long? value) { return new ApsOrderTagType(value); }
    }
    public class ApsOrderType : StringType
    {
        public override int Length { get => 126; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsOrderType(string value) : base(value) { }
        public static implicit operator ApsOrderType(string value) { return new ApsOrderType(value); }
        public static implicit operator ApsOrderType(DBNull value) { return new ApsOrderType(null); }
    }
    public class ApsOrderTypeCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsOrderTypeCodeType(string value) : base(value) { }
        public static implicit operator ApsOrderTypeCodeType(string value) { return new ApsOrderTypeCodeType(value); }
        public static implicit operator ApsOrderTypeCodeType(DBNull value) { return new ApsOrderTypeCodeType(null); }
    }
    public class ApsOrderTypeType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsOrderTypeType(string value) : base(value) { }
        public static implicit operator ApsOrderTypeType(string value) { return new ApsOrderTypeType(value); }
        public static implicit operator ApsOrderTypeType(DBNull value) { return new ApsOrderTypeType(null); }
    }
    public class ApsOrdgrpType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsOrdgrpType(string value) : base(value) { }
        public static implicit operator ApsOrdgrpType(string value) { return new ApsOrdgrpType(value); }
        public static implicit operator ApsOrdgrpType(DBNull value) { return new ApsOrdgrpType(null); }
    }
    public class ApsOrdTypeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsOrdTypeType(int? value) : base(value) { }
        public static implicit operator ApsOrdTypeType(int? value) { return new ApsOrdTypeType(value); }
        public static implicit operator ApsOrdTypeType(DBNull value) { return new ApsOrdTypeType(null); }
        private ApsOrdTypeType(long? value) : base(value) { }
        public static implicit operator ApsOrdTypeType(long? value) { return new ApsOrdTypeType(value); }
    }
    public class ApsOvAllocRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsOvAllocRlType(short? value) : base(value) { }
        public static implicit operator ApsOvAllocRlType(short? value) { return new ApsOvAllocRlType(value); }
        public static implicit operator ApsOvAllocRlType(DBNull value) { return new ApsOvAllocRlType(null); }
        private ApsOvAllocRlType(int? value) : base(value) { }
        public static implicit operator ApsOvAllocRlType(int? value) { return new ApsOvAllocRlType(value); }
    }
    public class ApsPartType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsPartType(string value) : base(value) { }
        public static implicit operator ApsPartType(string value) { return new ApsPartType(value); }
        public static implicit operator ApsPartType(DBNull value) { return new ApsPartType(null); }
    }
    public class ApsPathType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsPathType(string value) : base(value) { }
        public static implicit operator ApsPathType(string value) { return new ApsPathType(value); }
        public static implicit operator ApsPathType(DBNull value) { return new ApsPathType(null); }
    }
    public class ApsPbomType : StringType
    {
        public override int Length { get => 72; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsPbomType(string value) : base(value) { }
        public static implicit operator ApsPbomType(string value) { return new ApsPbomType(value); }
        public static implicit operator ApsPbomType(DBNull value) { return new ApsPbomType(null); }
    }
    public class ApsPDBDepthType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsPDBDepthType(int? value) : base(value) { }
        public static implicit operator ApsPDBDepthType(int? value) { return new ApsPDBDepthType(value); }
        public static implicit operator ApsPDBDepthType(DBNull value) { return new ApsPDBDepthType(null); }
        private ApsPDBDepthType(long? value) : base(value) { }
        public static implicit operator ApsPDBDepthType(long? value) { return new ApsPDBDepthType(value); }
    }
    public class ApsPDBFieldType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsPDBFieldType(string value) : base(value) { }
        public static implicit operator ApsPDBFieldType(string value) { return new ApsPDBFieldType(value); }
        public static implicit operator ApsPDBFieldType(DBNull value) { return new ApsPDBFieldType(null); }
    }
    public class ApsPercentageType : FloatType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 53; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsPercentageType(double? value) : base(value) { }
        public static implicit operator ApsPercentageType(double? value) { return new ApsPercentageType(value); }
        public static implicit operator ApsPercentageType(DBNull value) { return new ApsPercentageType((double?)null); }
        private ApsPercentageType(decimal? value) : base(value) { }
        public static implicit operator ApsPercentageType(decimal? value) { return new ApsPercentageType(value); }
    }
    public class ApsPlanDebugLevelType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsPlanDebugLevelType(int? value) : base(value) { }
        public static implicit operator ApsPlanDebugLevelType(int? value) { return new ApsPlanDebugLevelType(value); }
        public static implicit operator ApsPlanDebugLevelType(DBNull value) { return new ApsPlanDebugLevelType(null); }
        private ApsPlanDebugLevelType(long? value) : base(value) { }
        public static implicit operator ApsPlanDebugLevelType(long? value) { return new ApsPlanDebugLevelType(value); }
    }
    public class ApsPlannerDBNameType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsPlannerDBNameType(string value) : base(value) { }
        public static implicit operator ApsPlannerDBNameType(string value) { return new ApsPlannerDBNameType(value); }
        public static implicit operator ApsPlannerDBNameType(DBNull value) { return new ApsPlannerDBNameType(null); }
    }
    public class ApsPlannerDownCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsPlannerDownCodeType(string value) : base(value) { }
        public static implicit operator ApsPlannerDownCodeType(string value) { return new ApsPlannerDownCodeType(value); }
        public static implicit operator ApsPlannerDownCodeType(DBNull value) { return new ApsPlannerDownCodeType(null); }
    }
    public class ApsPlannerLoadIDType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsPlannerLoadIDType(int? value) : base(value) { }
        public static implicit operator ApsPlannerLoadIDType(int? value) { return new ApsPlannerLoadIDType(value); }
        public static implicit operator ApsPlannerLoadIDType(DBNull value) { return new ApsPlannerLoadIDType(null); }
        private ApsPlannerLoadIDType(long? value) : base(value) { }
        public static implicit operator ApsPlannerLoadIDType(long? value) { return new ApsPlannerLoadIDType(value); }
    }
    public class ApsPlnConsType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsPlnConsType(string value) : base(value) { }
        public static implicit operator ApsPlnConsType(string value) { return new ApsPlnConsType(value); }
        public static implicit operator ApsPlnConsType(DBNull value) { return new ApsPlnConsType(null); }
    }
    public class ApsPoolSelRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsPoolSelRlType(short? value) : base(value) { }
        public static implicit operator ApsPoolSelRlType(short? value) { return new ApsPoolSelRlType(value); }
        public static implicit operator ApsPoolSelRlType(DBNull value) { return new ApsPoolSelRlType(null); }
        private ApsPoolSelRlType(int? value) : base(value) { }
        public static implicit operator ApsPoolSelRlType(int? value) { return new ApsPoolSelRlType(value); }
    }
    public class ApsPoolSeqRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsPoolSeqRlType(short? value) : base(value) { }
        public static implicit operator ApsPoolSeqRlType(short? value) { return new ApsPoolSeqRlType(value); }
        public static implicit operator ApsPoolSeqRlType(DBNull value) { return new ApsPoolSeqRlType(null); }
        private ApsPoolSeqRlType(int? value) : base(value) { }
        public static implicit operator ApsPoolSeqRlType(int? value) { return new ApsPoolSeqRlType(value); }
    }
    public class ApsPoolType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsPoolType(string value) : base(value) { }
        public static implicit operator ApsPoolType(string value) { return new ApsPoolType(value); }
        public static implicit operator ApsPoolType(DBNull value) { return new ApsPoolType(null); }
    }
    public class ApsPooltypType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsPooltypType(string value) : base(value) { }
        public static implicit operator ApsPooltypType(string value) { return new ApsPooltypType(value); }
        public static implicit operator ApsPooltypType(DBNull value) { return new ApsPooltypType(null); }
    }
    public class ApsPortType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsPortType(int? value) : base(value) { }
        public static implicit operator ApsPortType(int? value) { return new ApsPortType(value); }
        public static implicit operator ApsPortType(DBNull value) { return new ApsPortType(null); }
        private ApsPortType(long? value) : base(value) { }
        public static implicit operator ApsPortType(long? value) { return new ApsPortType(value); }
    }
    public class ApsProcplanType : StringType
    {
        public override int Length { get => 72; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsProcplanType(string value) : base(value) { }
        public static implicit operator ApsProcplanType(string value) { return new ApsProcplanType(value); }
        public static implicit operator ApsProcplanType(DBNull value) { return new ApsProcplanType(null); }
    }
    public class ApsQueueType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsQueueType(string value) : base(value) { }
        public static implicit operator ApsQueueType(string value) { return new ApsQueueType(value); }
        public static implicit operator ApsQueueType(DBNull value) { return new ApsQueueType(null); }
    }
    public class ApsRefType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsRefType(string value) : base(value) { }
        public static implicit operator ApsRefType(string value) { return new ApsRefType(value); }
        public static implicit operator ApsRefType(DBNull value) { return new ApsRefType(null); }
    }
    public class ApsReplicateNumberType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsReplicateNumberType(short? value) : base(value) { }
        public static implicit operator ApsReplicateNumberType(short? value) { return new ApsReplicateNumberType(value); }
        public static implicit operator ApsReplicateNumberType(DBNull value) { return new ApsReplicateNumberType(null); }
        private ApsReplicateNumberType(int? value) : base(value) { }
        public static implicit operator ApsReplicateNumberType(int? value) { return new ApsReplicateNumberType(value); }
    }
    public class ApsResgroupAliasType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsResgroupAliasType(string value) : base(value) { }
        public static implicit operator ApsResgroupAliasType(string value) { return new ApsResgroupAliasType(value); }
        public static implicit operator ApsResgroupAliasType(DBNull value) { return new ApsResgroupAliasType(null); }
    }
    public class ApsResgroupType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsResgroupType(string value) : base(value) { }
        public static implicit operator ApsResgroupType(string value) { return new ApsResgroupType(value); }
        public static implicit operator ApsResgroupType(DBNull value) { return new ApsResgroupType(null); }
    }
    public class ApsResmhType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsResmhType(string value) : base(value) { }
        public static implicit operator ApsResmhType(string value) { return new ApsResmhType(value); }
        public static implicit operator ApsResmhType(DBNull value) { return new ApsResmhType(null); }
    }
    public class ApsResourceAliasType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsResourceAliasType(string value) : base(value) { }
        public static implicit operator ApsResourceAliasType(string value) { return new ApsResourceAliasType(value); }
        public static implicit operator ApsResourceAliasType(DBNull value) { return new ApsResourceAliasType(null); }
    }
    public class ApsResourceEndCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsResourceEndCodeType(string value) : base(value) { }
        public static implicit operator ApsResourceEndCodeType(string value) { return new ApsResourceEndCodeType(value); }
        public static implicit operator ApsResourceEndCodeType(DBNull value) { return new ApsResourceEndCodeType(null); }
    }
    public class ApsResourceStartCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsResourceStartCodeType(string value) : base(value) { }
        public static implicit operator ApsResourceStartCodeType(string value) { return new ApsResourceStartCodeType(value); }
        public static implicit operator ApsResourceStartCodeType(DBNull value) { return new ApsResourceStartCodeType(null); }
    }
    public class ApsResourceStatusCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsResourceStatusCodeType(string value) : base(value) { }
        public static implicit operator ApsResourceStatusCodeType(string value) { return new ApsResourceStatusCodeType(value); }
        public static implicit operator ApsResourceStatusCodeType(DBNull value) { return new ApsResourceStatusCodeType(null); }
    }
    public class ApsResourceType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsResourceType(string value) : base(value) { }
        public static implicit operator ApsResourceType(string value) { return new ApsResourceType(value); }
        public static implicit operator ApsResourceType(DBNull value) { return new ApsResourceType(null); }
    }
    public class ApsResrcAllocCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsResrcAllocCodeType(string value) : base(value) { }
        public static implicit operator ApsResrcAllocCodeType(string value) { return new ApsResrcAllocCodeType(value); }
        public static implicit operator ApsResrcAllocCodeType(DBNull value) { return new ApsResrcAllocCodeType(null); }
    }
    public class ApsResrcSelRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsResrcSelRlType(short? value) : base(value) { }
        public static implicit operator ApsResrcSelRlType(short? value) { return new ApsResrcSelRlType(value); }
        public static implicit operator ApsResrcSelRlType(DBNull value) { return new ApsResrcSelRlType(null); }
        private ApsResrcSelRlType(int? value) : base(value) { }
        public static implicit operator ApsResrcSelRlType(int? value) { return new ApsResrcSelRlType(value); }
    }
    public class ApsResrcSeqRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsResrcSeqRlType(short? value) : base(value) { }
        public static implicit operator ApsResrcSeqRlType(short? value) { return new ApsResrcSeqRlType(value); }
        public static implicit operator ApsResrcSeqRlType(DBNull value) { return new ApsResrcSeqRlType(null); }
        private ApsResrcSeqRlType(int? value) : base(value) { }
        public static implicit operator ApsResrcSeqRlType(int? value) { return new ApsResrcSeqRlType(value); }
    }
    public class ApsResrefType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsResrefType(string value) : base(value) { }
        public static implicit operator ApsResrefType(string value) { return new ApsResrefType(value); }
        public static implicit operator ApsResrefType(DBNull value) { return new ApsResrefType(null); }
    }
    public class ApsRestypeType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsRestypeType(string value) : base(value) { }
        public static implicit operator ApsRestypeType(string value) { return new ApsRestypeType(value); }
        public static implicit operator ApsRestypeType(DBNull value) { return new ApsRestypeType(null); }
    }
    public class ApsRgrpAllocRlType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsRgrpAllocRlType(short? value) : base(value) { }
        public static implicit operator ApsRgrpAllocRlType(short? value) { return new ApsRgrpAllocRlType(value); }
        public static implicit operator ApsRgrpAllocRlType(DBNull value) { return new ApsRgrpAllocRlType(null); }
        private ApsRgrpAllocRlType(int? value) : base(value) { }
        public static implicit operator ApsRgrpAllocRlType(int? value) { return new ApsRgrpAllocRlType(value); }
    }
    public class ApsRgrpSLTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsRgrpSLTypeType(string value) : base(value) { }
        public static implicit operator ApsRgrpSLTypeType(string value) { return new ApsRgrpSLTypeType(value); }
        public static implicit operator ApsRgrpSLTypeType(DBNull value) { return new ApsRgrpSLTypeType(null); }
    }
    public class ApsRulevalType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsRulevalType(string value) : base(value) { }
        public static implicit operator ApsRulevalType(string value) { return new ApsRulevalType(value); }
        public static implicit operator ApsRulevalType(DBNull value) { return new ApsRulevalType(null); }
    }
    public class ApsSchedulerDownCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsSchedulerDownCodeType(string value) : base(value) { }
        public static implicit operator ApsSchedulerDownCodeType(string value) { return new ApsSchedulerDownCodeType(value); }
        public static implicit operator ApsSchedulerDownCodeType(DBNull value) { return new ApsSchedulerDownCodeType(null); }
    }
    public class ApsSchedulerLoadIDType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsSchedulerLoadIDType(short? value) : base(value) { }
        public static implicit operator ApsSchedulerLoadIDType(short? value) { return new ApsSchedulerLoadIDType(value); }
        public static implicit operator ApsSchedulerLoadIDType(DBNull value) { return new ApsSchedulerLoadIDType(null); }
        private ApsSchedulerLoadIDType(int? value) : base(value) { }
        public static implicit operator ApsSchedulerLoadIDType(int? value) { return new ApsSchedulerLoadIDType(value); }
    }
    public class ApsSelvalueType : FloatType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 53; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsSelvalueType(double? value) : base(value) { }
        public static implicit operator ApsSelvalueType(double? value) { return new ApsSelvalueType(value); }
        public static implicit operator ApsSelvalueType(DBNull value) { return new ApsSelvalueType((double?)null); }
        private ApsSelvalueType(decimal? value) : base(value) { }
        public static implicit operator ApsSelvalueType(decimal? value) { return new ApsSelvalueType(value); }
    }
    public class ApsSetupdelType : FloatType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 53; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsSetupdelType(double? value) : base(value) { }
        public static implicit operator ApsSetupdelType(double? value) { return new ApsSetupdelType(value); }
        public static implicit operator ApsSetupdelType(DBNull value) { return new ApsSetupdelType((double?)null); }
        private ApsSetupdelType(decimal? value) : base(value) { }
        public static implicit operator ApsSetupdelType(decimal? value) { return new ApsSetupdelType(value); }
    }
    public class ApsSetupRuleType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsSetupRuleType(short? value) : base(value) { }
        public static implicit operator ApsSetupRuleType(short? value) { return new ApsSetupRuleType(value); }
        public static implicit operator ApsSetupRuleType(DBNull value) { return new ApsSetupRuleType(null); }
        private ApsSetupRuleType(int? value) : base(value) { }
        public static implicit operator ApsSetupRuleType(int? value) { return new ApsSetupRuleType(value); }
    }
    public class ApsShiftexType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsShiftexType(string value) : base(value) { }
        public static implicit operator ApsShiftexType(string value) { return new ApsShiftexType(value); }
        public static implicit operator ApsShiftexType(DBNull value) { return new ApsShiftexType(null); }
    }
    public class ApsShiftexTypeCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsShiftexTypeCodeType(string value) : base(value) { }
        public static implicit operator ApsShiftexTypeCodeType(string value) { return new ApsShiftexTypeCodeType(value); }
        public static implicit operator ApsShiftexTypeCodeType(DBNull value) { return new ApsShiftexTypeCodeType(null); }
    }
    public class ApsShiftType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsShiftType(string value) : base(value) { }
        public static implicit operator ApsShiftType(string value) { return new ApsShiftType(value); }
        public static implicit operator ApsShiftType(DBNull value) { return new ApsShiftType(null); }
    }
    public class ApsSiteType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsSiteType(string value) : base(value) { }
        public static implicit operator ApsSiteType(string value) { return new ApsSiteType(value); }
        public static implicit operator ApsSiteType(DBNull value) { return new ApsSiteType(null); }
    }
    public class ApsSmallIntType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsSmallIntType(short? value) : base(value) { }
        public static implicit operator ApsSmallIntType(short? value) { return new ApsSmallIntType(value); }
        public static implicit operator ApsSmallIntType(DBNull value) { return new ApsSmallIntType(null); }
        private ApsSmallIntType(int? value) : base(value) { }
        public static implicit operator ApsSmallIntType(int? value) { return new ApsSmallIntType(value); }
    }
    public class ApsSplitRuleType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsSplitRuleType(short? value) : base(value) { }
        public static implicit operator ApsSplitRuleType(short? value) { return new ApsSplitRuleType(value); }
        public static implicit operator ApsSplitRuleType(DBNull value) { return new ApsSplitRuleType(null); }
        private ApsSplitRuleType(int? value) : base(value) { }
        public static implicit operator ApsSplitRuleType(int? value) { return new ApsSplitRuleType(value); }
    }
    public class ApsSplitsizeType : FloatType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 53; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsSplitsizeType(double? value) : base(value) { }
        public static implicit operator ApsSplitsizeType(double? value) { return new ApsSplitsizeType(value); }
        public static implicit operator ApsSplitsizeType(DBNull value) { return new ApsSplitsizeType((double?)null); }
        private ApsSplitsizeType(decimal? value) : base(value) { }
        public static implicit operator ApsSplitsizeType(decimal? value) { return new ApsSplitsizeType(value); }
    }
    public class ApsStatusCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsStatusCodeType(string value) : base(value) { }
        public static implicit operator ApsStatusCodeType(string value) { return new ApsStatusCodeType(value); }
        public static implicit operator ApsStatusCodeType(DBNull value) { return new ApsStatusCodeType(null); }
    }
    public class ApsStrConstNameType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsStrConstNameType(string value) : base(value) { }
        public static implicit operator ApsStrConstNameType(string value) { return new ApsStrConstNameType(value); }
        public static implicit operator ApsStrConstNameType(DBNull value) { return new ApsStrConstNameType(null); }
    }
    public class ApsStrDescriptionType : StringType
    {
        public override int Length { get => 4096; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsStrDescriptionType(string value) : base(value) { }
        public static implicit operator ApsStrDescriptionType(string value) { return new ApsStrDescriptionType(value); }
        public static implicit operator ApsStrDescriptionType(DBNull value) { return new ApsStrDescriptionType(null); }
    }
    public class ApsStrHelpFileNameType : StringType
    {
        public override int Length { get => 128; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsStrHelpFileNameType(string value) : base(value) { }
        public static implicit operator ApsStrHelpFileNameType(string value) { return new ApsStrHelpFileNameType(value); }
        public static implicit operator ApsStrHelpFileNameType(DBNull value) { return new ApsStrHelpFileNameType(null); }
    }
    public class ApsStrLanguageType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsStrLanguageType(string value) : base(value) { }
        public static implicit operator ApsStrLanguageType(string value) { return new ApsStrLanguageType(value); }
        public static implicit operator ApsStrLanguageType(DBNull value) { return new ApsStrLanguageType(null); }
    }
    public class ApsStrLocalStringType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsStrLocalStringType(string value) : base(value) { }
        public static implicit operator ApsStrLocalStringType(string value) { return new ApsStrLocalStringType(value); }
        public static implicit operator ApsStrLocalStringType(DBNull value) { return new ApsStrLocalStringType(null); }
    }
    public class ApsStrSublanguageType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsStrSublanguageType(string value) : base(value) { }
        public static implicit operator ApsStrSublanguageType(string value) { return new ApsStrSublanguageType(value); }
        public static implicit operator ApsStrSublanguageType(DBNull value) { return new ApsStrSublanguageType(null); }
    }
    public class ApsTableType : StringType
    {
        public override int Length { get => 26; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsTableType(string value) : base(value) { }
        public static implicit operator ApsTableType(string value) { return new ApsTableType(value); }
        public static implicit operator ApsTableType(DBNull value) { return new ApsTableType(null); }
    }
    public class ApsTimeOutType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsTimeOutType(byte? value) : base(value) { }
        public static implicit operator ApsTimeOutType(byte? value) { return new ApsTimeOutType(value); }
        public static implicit operator ApsTimeOutType(DBNull value) { return new ApsTimeOutType(null); }
        private ApsTimeOutType(int? value) : base(value) { }
        public static implicit operator ApsTimeOutType(int? value) { return new ApsTimeOutType(value); }
    }
    public class ApsTimeStrType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsTimeStrType(string value) : base(value) { }
        public static implicit operator ApsTimeStrType(string value) { return new ApsTimeStrType(value); }
        public static implicit operator ApsTimeStrType(DBNull value) { return new ApsTimeStrType(null); }
    }
    public class ApsTimeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ApsTimeType(int? value) : base(value) { }
        public static implicit operator ApsTimeType(int? value) { return new ApsTimeType(value); }
        public static implicit operator ApsTimeType(DBNull value) { return new ApsTimeType(null); }
        private ApsTimeType(long? value) : base(value) { }
        public static implicit operator ApsTimeType(long? value) { return new ApsTimeType(value); }
    }
    public class ApsTimezoneType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsTimezoneType(string value) : base(value) { }
        public static implicit operator ApsTimezoneType(string value) { return new ApsTimezoneType(value); }
        public static implicit operator ApsTimezoneType(DBNull value) { return new ApsTimezoneType(null); }
    }
    public class ApsTraceMessageType : StringType
    {
        public override int Length { get => 1024; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsTraceMessageType(string value) : base(value) { }
        public static implicit operator ApsTraceMessageType(string value) { return new ApsTraceMessageType(value); }
        public static implicit operator ApsTraceMessageType(DBNull value) { return new ApsTraceMessageType(null); }
    }
    public class ApsTraceMessageTypeCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsTraceMessageTypeCodeType(string value) : base(value) { }
        public static implicit operator ApsTraceMessageTypeCodeType(string value) { return new ApsTraceMessageTypeCodeType(value); }
        public static implicit operator ApsTraceMessageTypeCodeType(DBNull value) { return new ApsTraceMessageTypeCodeType(null); }
    }
    public class ApsTrnfleetType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsTrnfleetType(string value) : base(value) { }
        public static implicit operator ApsTrnfleetType(string value) { return new ApsTrnfleetType(value); }
        public static implicit operator ApsTrnfleetType(DBNull value) { return new ApsTrnfleetType(null); }
    }
    public class ApsTrnsysType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsTrnsysType(string value) : base(value) { }
        public static implicit operator ApsTrnsysType(string value) { return new ApsTrnsysType(value); }
        public static implicit operator ApsTrnsysType(DBNull value) { return new ApsTrnsysType(null); }
    }
    public class ApsVarattidType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsVarattidType(string value) : base(value) { }
        public static implicit operator ApsVarattidType(string value) { return new ApsVarattidType(value); }
        public static implicit operator ApsVarattidType(DBNull value) { return new ApsVarattidType(null); }
    }
    public class ApsWaitingTypeCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsWaitingTypeCodeType(string value) : base(value) { }
        public static implicit operator ApsWaitingTypeCodeType(string value) { return new ApsWaitingTypeCodeType(value); }
        public static implicit operator ApsWaitingTypeCodeType(DBNull value) { return new ApsWaitingTypeCodeType(null); }
    }
    public class ApsWhenRuleType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsWhenRuleType(short? value) : base(value) { }
        public static implicit operator ApsWhenRuleType(short? value) { return new ApsWhenRuleType(value); }
        public static implicit operator ApsWhenRuleType(DBNull value) { return new ApsWhenRuleType(null); }
        private ApsWhenRuleType(int? value) : base(value) { }
        public static implicit operator ApsWhenRuleType(int? value) { return new ApsWhenRuleType(value); }
    }
    public class ApsWhseType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsWhseType(string value) : base(value) { }
        public static implicit operator ApsWhseType(string value) { return new ApsWhseType(value); }
        public static implicit operator ApsWhseType(DBNull value) { return new ApsWhseType(null); }
    }
    public class ApsWorkCenterType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ApsWorkCenterType(string value) : base(value) { }
        public static implicit operator ApsWorkCenterType(string value) { return new ApsWorkCenterType(value); }
        public static implicit operator ApsWorkCenterType(DBNull value) { return new ApsWorkCenterType(null); }
    }
    public class AptrxpTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AptrxpTypeType(string value) : base(value) { }
        public static implicit operator AptrxpTypeType(string value) { return new AptrxpTypeType(value); }
        public static implicit operator AptrxpTypeType(DBNull value) { return new AptrxpTypeType(null); }
    }
    public class AptrxrTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AptrxrTypeType(string value) : base(value) { }
        public static implicit operator AptrxrTypeType(string value) { return new AptrxrTypeType(value); }
        public static implicit operator AptrxrTypeType(DBNull value) { return new AptrxrTypeType(null); }
    }
    public class AptrxtSeqType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AptrxtSeqType(byte? value) : base(value) { }
        public static implicit operator AptrxtSeqType(byte? value) { return new AptrxtSeqType(value); }
        public static implicit operator AptrxtSeqType(DBNull value) { return new AptrxtSeqType(null); }
        private AptrxtSeqType(int? value) : base(value) { }
        public static implicit operator AptrxtSeqType(int? value) { return new AptrxtSeqType(value); }
    }
    public class AptrxTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AptrxTypeType(string value) : base(value) { }
        public static implicit operator AptrxTypeType(string value) { return new AptrxTypeType(value); }
        public static implicit operator AptrxTypeType(DBNull value) { return new AptrxTypeType(null); }
    }
    public class ArAgeByType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ArAgeByType(string value) : base(value) { }
        public static implicit operator ArAgeByType(string value) { return new ArAgeByType(value); }
        public static implicit operator ArAgeByType(DBNull value) { return new ArAgeByType(null); }
    }
    public class ArCheckNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ArCheckNumType(int? value) : base(value) { }
        public static implicit operator ArCheckNumType(int? value) { return new ArCheckNumType(value); }
        public static implicit operator ArCheckNumType(DBNull value) { return new ArCheckNumType(null); }
        private ArCheckNumType(long? value) : base(value) { }
        public static implicit operator ArCheckNumType(long? value) { return new ArCheckNumType(value); }
    }
    public class ArDistSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ArDistSeqType(int? value) : base(value) { }
        public static implicit operator ArDistSeqType(int? value) { return new ArDistSeqType(value); }
        public static implicit operator ArDistSeqType(DBNull value) { return new ArDistSeqType(null); }
        private ArDistSeqType(long? value) : base(value) { }
        public static implicit operator ArDistSeqType(long? value) { return new ArDistSeqType(value); }
    }
    public class ArFinRateType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private ArFinRateType(decimal? value) : base(value) { }
        public static implicit operator ArFinRateType(decimal? value) { return new ArFinRateType(value); }
        public static implicit operator ArFinRateType(DBNull value) { return new ArFinRateType(null); }
    }
    public class ARImportBatchIdType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ARImportBatchIdType(decimal? value) : base(value) { }
        public static implicit operator ARImportBatchIdType(decimal? value) { return new ARImportBatchIdType(value); }
        public static implicit operator ARImportBatchIdType(DBNull value) { return new ARImportBatchIdType(null); }
    }
    public class ARImportFieldDateFmtType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ARImportFieldDateFmtType(int? value) : base(value) { }
        public static implicit operator ARImportFieldDateFmtType(int? value) { return new ARImportFieldDateFmtType(value); }
        public static implicit operator ARImportFieldDateFmtType(DBNull value) { return new ARImportFieldDateFmtType(null); }
        private ARImportFieldDateFmtType(long? value) : base(value) { }
        public static implicit operator ARImportFieldDateFmtType(long? value) { return new ARImportFieldDateFmtType(value); }
    }
    public class ARImportHeaderNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ARImportHeaderNumType(int? value) : base(value) { }
        public static implicit operator ARImportHeaderNumType(int? value) { return new ARImportHeaderNumType(value); }
        public static implicit operator ARImportHeaderNumType(DBNull value) { return new ARImportHeaderNumType(null); }
        private ARImportHeaderNumType(long? value) : base(value) { }
        public static implicit operator ARImportHeaderNumType(long? value) { return new ARImportHeaderNumType(value); }
    }
    public class ARImportLineNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ARImportLineNumType(int? value) : base(value) { }
        public static implicit operator ARImportLineNumType(int? value) { return new ARImportLineNumType(value); }
        public static implicit operator ARImportLineNumType(DBNull value) { return new ARImportLineNumType(null); }
        private ARImportLineNumType(long? value) : base(value) { }
        public static implicit operator ARImportLineNumType(long? value) { return new ARImportLineNumType(value); }
    }
    public class ARImportMappingDelimiterType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ARImportMappingDelimiterType(string value) : base(value) { }
        public static implicit operator ARImportMappingDelimiterType(string value) { return new ARImportMappingDelimiterType(value); }
        public static implicit operator ARImportMappingDelimiterType(DBNull value) { return new ARImportMappingDelimiterType(null); }
    }
    public class ARImportMappingFieldNumberType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ARImportMappingFieldNumberType(byte? value) : base(value) { }
        public static implicit operator ARImportMappingFieldNumberType(byte? value) { return new ARImportMappingFieldNumberType(value); }
        public static implicit operator ARImportMappingFieldNumberType(DBNull value) { return new ARImportMappingFieldNumberType(null); }
        private ARImportMappingFieldNumberType(int? value) : base(value) { }
        public static implicit operator ARImportMappingFieldNumberType(int? value) { return new ARImportMappingFieldNumberType(value); }
    }
    public class ARImportMappingFieldPositionType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ARImportMappingFieldPositionType(byte? value) : base(value) { }
        public static implicit operator ARImportMappingFieldPositionType(byte? value) { return new ARImportMappingFieldPositionType(value); }
        public static implicit operator ARImportMappingFieldPositionType(DBNull value) { return new ARImportMappingFieldPositionType(null); }
        private ARImportMappingFieldPositionType(int? value) : base(value) { }
        public static implicit operator ARImportMappingFieldPositionType(int? value) { return new ARImportMappingFieldPositionType(value); }
    }
    public class ARImportMappingIdType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ARImportMappingIdType(string value) : base(value) { }
        public static implicit operator ARImportMappingIdType(string value) { return new ARImportMappingIdType(value); }
        public static implicit operator ARImportMappingIdType(DBNull value) { return new ARImportMappingIdType(null); }
    }
    public class ARImportMappingRecordIdType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ARImportMappingRecordIdType(string value) : base(value) { }
        public static implicit operator ARImportMappingRecordIdType(string value) { return new ARImportMappingRecordIdType(value); }
        public static implicit operator ARImportMappingRecordIdType(DBNull value) { return new ARImportMappingRecordIdType(null); }
    }
    public class ARImportMappingTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ARImportMappingTypeType(string value) : base(value) { }
        public static implicit operator ARImportMappingTypeType(string value) { return new ARImportMappingTypeType(value); }
        public static implicit operator ARImportMappingTypeType(DBNull value) { return new ARImportMappingTypeType(null); }
    }
    public class ARImportNumberOfImpliedDecimalsType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ARImportNumberOfImpliedDecimalsType(byte? value) : base(value) { }
        public static implicit operator ARImportNumberOfImpliedDecimalsType(byte? value) { return new ARImportNumberOfImpliedDecimalsType(value); }
        public static implicit operator ARImportNumberOfImpliedDecimalsType(DBNull value) { return new ARImportNumberOfImpliedDecimalsType(null); }
        private ARImportNumberOfImpliedDecimalsType(int? value) : base(value) { }
        public static implicit operator ARImportNumberOfImpliedDecimalsType(int? value) { return new ARImportNumberOfImpliedDecimalsType(value); }
    }
    public class ARImportNumberOfRecordsToSkipType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ARImportNumberOfRecordsToSkipType(byte? value) : base(value) { }
        public static implicit operator ARImportNumberOfRecordsToSkipType(byte? value) { return new ARImportNumberOfRecordsToSkipType(value); }
        public static implicit operator ARImportNumberOfRecordsToSkipType(DBNull value) { return new ARImportNumberOfRecordsToSkipType(null); }
        private ARImportNumberOfRecordsToSkipType(int? value) : base(value) { }
        public static implicit operator ARImportNumberOfRecordsToSkipType(int? value) { return new ARImportNumberOfRecordsToSkipType(value); }
    }
    public class ARImportPaymentStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ARImportPaymentStatType(string value) : base(value) { }
        public static implicit operator ARImportPaymentStatType(string value) { return new ARImportPaymentStatType(value); }
        public static implicit operator ARImportPaymentStatType(DBNull value) { return new ARImportPaymentStatType(null); }
    }
    public class ARImportStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ARImportStatType(string value) : base(value) { }
        public static implicit operator ARImportStatType(string value) { return new ARImportStatType(value); }
        public static implicit operator ARImportStatType(DBNull value) { return new ARImportStatType(null); }
    }
    public class ARImportValueConvIdType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ARImportValueConvIdType(string value) : base(value) { }
        public static implicit operator ARImportValueConvIdType(string value) { return new ARImportValueConvIdType(value); }
        public static implicit operator ARImportValueConvIdType(DBNull value) { return new ARImportValueConvIdType(null); }
    }
    public class ARImportValueType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ARImportValueType(string value) : base(value) { }
        public static implicit operator ARImportValueType(string value) { return new ARImportValueType(value); }
        public static implicit operator ARImportValueType(DBNull value) { return new ARImportValueType(null); }
    }
    public class ArInvSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ArInvSeqType(int? value) : base(value) { }
        public static implicit operator ArInvSeqType(int? value) { return new ArInvSeqType(value); }
        public static implicit operator ArInvSeqType(DBNull value) { return new ArInvSeqType(null); }
        private ArInvSeqType(long? value) : base(value) { }
        public static implicit operator ArInvSeqType(long? value) { return new ArInvSeqType(value); }
    }
    public class arinvType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private arinvType(string value) : base(value) { }
        public static implicit operator arinvType(string value) { return new arinvType(value); }
        public static implicit operator arinvType(DBNull value) { return new arinvType(null); }
    }
    public class ArinvTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ArinvTypeType(string value) : base(value) { }
        public static implicit operator ArinvTypeType(string value) { return new ArinvTypeType(value); }
        public static implicit operator ArinvTypeType(DBNull value) { return new ArinvTypeType(null); }
    }
    public class ArpmtTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ArpmtTypeType(string value) : base(value) { }
        public static implicit operator ArpmtTypeType(string value) { return new ArpmtTypeType(value); }
        public static implicit operator ArpmtTypeType(DBNull value) { return new ArpmtTypeType(null); }
    }
    public class ArtranTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ArtranTypeType(string value) : base(value) { }
        public static implicit operator ArtranTypeType(string value) { return new ArtranTypeType(value); }
        public static implicit operator ArtranTypeType(DBNull value) { return new ArtranTypeType(null); }
    }
    public class AsnNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AsnNumType(int? value) : base(value) { }
        public static implicit operator AsnNumType(int? value) { return new AsnNumType(value); }
        public static implicit operator AsnNumType(DBNull value) { return new AsnNumType(null); }
        private AsnNumType(long? value) : base(value) { }
        public static implicit operator AsnNumType(long? value) { return new AsnNumType(value); }
    }
    public class AssemblyNameType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AssemblyNameType(string value) : base(value) { }
        public static implicit operator AssemblyNameType(string value) { return new AssemblyNameType(value); }
        public static implicit operator AssemblyNameType(DBNull value) { return new AssemblyNameType(null); }
    }
    public class AssemblySeqType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AssemblySeqType(string value) : base(value) { }
        public static implicit operator AssemblySeqType(string value) { return new AssemblySeqType(value); }
        public static implicit operator AssemblySeqType(DBNull value) { return new AssemblySeqType(null); }
    }
    public class AttributeGroupClassType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AttributeGroupClassType(string value) : base(value) { }
        public static implicit operator AttributeGroupClassType(string value) { return new AttributeGroupClassType(value); }
        public static implicit operator AttributeGroupClassType(DBNull value) { return new AttributeGroupClassType(null); }
    }
    public class AttributeGroupType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AttributeGroupType(string value) : base(value) { }
        public static implicit operator AttributeGroupType(string value) { return new AttributeGroupType(value); }
        public static implicit operator AttributeGroupType(DBNull value) { return new AttributeGroupType(null); }
    }
    public class AttributeLabelType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AttributeLabelType(string value) : base(value) { }
        public static implicit operator AttributeLabelType(string value) { return new AttributeLabelType(value); }
        public static implicit operator AttributeLabelType(DBNull value) { return new AttributeLabelType(null); }
    }
    public class AU_AuthorizationType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_AuthorizationType(string value) : base(value) { }
        public static implicit operator AU_AuthorizationType(string value) { return new AU_AuthorizationType(value); }
        public static implicit operator AU_AuthorizationType(DBNull value) { return new AU_AuthorizationType(null); }
    }
    public class AU_CheckDigitType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_CheckDigitType(byte? value) : base(value) { }
        public static implicit operator AU_CheckDigitType(byte? value) { return new AU_CheckDigitType(value); }
        public static implicit operator AU_CheckDigitType(DBNull value) { return new AU_CheckDigitType(null); }
        private AU_CheckDigitType(int? value) : base(value) { }
        public static implicit operator AU_CheckDigitType(int? value) { return new AU_CheckDigitType(value); }
    }
    public class AU_ContainerSerialNumberType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_ContainerSerialNumberType(decimal? value) : base(value) { }
        public static implicit operator AU_ContainerSerialNumberType(decimal? value) { return new AU_ContainerSerialNumberType(value); }
        public static implicit operator AU_ContainerSerialNumberType(DBNull value) { return new AU_ContainerSerialNumberType(null); }
    }
    public class AU_ContainerTypeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_ContainerTypeType(string value) : base(value) { }
        public static implicit operator AU_ContainerTypeType(string value) { return new AU_ContainerTypeType(value); }
        public static implicit operator AU_ContainerTypeType(DBNull value) { return new AU_ContainerTypeType(null); }
    }
    public class AU_ContractIDType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_ContractIDType(string value) : base(value) { }
        public static implicit operator AU_ContractIDType(string value) { return new AU_ContractIDType(value); }
        public static implicit operator AU_ContractIDType(DBNull value) { return new AU_ContractIDType(null); }
    }
    public class AU_ContractPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_ContractPrefixType(string value) : base(value) { }
        public static implicit operator AU_ContractPrefixType(string value) { return new AU_ContractPrefixType(value); }
        public static implicit operator AU_ContractPrefixType(DBNull value) { return new AU_ContractPrefixType(null); }
    }
    public class AU_ContractPriceMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_ContractPriceMethodType(string value) : base(value) { }
        public static implicit operator AU_ContractPriceMethodType(string value) { return new AU_ContractPriceMethodType(value); }
        public static implicit operator AU_ContractPriceMethodType(DBNull value) { return new AU_ContractPriceMethodType(null); }
    }
    public class AU_ContractStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_ContractStatusType(string value) : base(value) { }
        public static implicit operator AU_ContractStatusType(string value) { return new AU_ContractStatusType(value); }
        public static implicit operator AU_ContractStatusType(DBNull value) { return new AU_ContractStatusType(null); }
    }
    public class AU_EdiDateOffsetHoursType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_EdiDateOffsetHoursType(short? value) : base(value) { }
        public static implicit operator AU_EdiDateOffsetHoursType(short? value) { return new AU_EdiDateOffsetHoursType(value); }
        public static implicit operator AU_EdiDateOffsetHoursType(DBNull value) { return new AU_EdiDateOffsetHoursType(null); }
        private AU_EdiDateOffsetHoursType(int? value) : base(value) { }
        public static implicit operator AU_EdiDateOffsetHoursType(int? value) { return new AU_EdiDateOffsetHoursType(value); }
    }
    public class AU_EquipmentCategoryIdType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_EquipmentCategoryIdType(string value) : base(value) { }
        public static implicit operator AU_EquipmentCategoryIdType(string value) { return new AU_EquipmentCategoryIdType(value); }
        public static implicit operator AU_EquipmentCategoryIdType(DBNull value) { return new AU_EquipmentCategoryIdType(null); }
    }
    public class AU_FMEAActionTakenType : StringType
    {
        public override int Length { get => 512; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_FMEAActionTakenType(string value) : base(value) { }
        public static implicit operator AU_FMEAActionTakenType(string value) { return new AU_FMEAActionTakenType(value); }
        public static implicit operator AU_FMEAActionTakenType(DBNull value) { return new AU_FMEAActionTakenType(null); }
    }
    public class AU_FMEAClassificationType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_FMEAClassificationType(string value) : base(value) { }
        public static implicit operator AU_FMEAClassificationType(string value) { return new AU_FMEAClassificationType(value); }
        public static implicit operator AU_FMEAClassificationType(DBNull value) { return new AU_FMEAClassificationType(null); }
    }
    public class AU_FMEAFailureModeType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_FMEAFailureModeType(string value) : base(value) { }
        public static implicit operator AU_FMEAFailureModeType(string value) { return new AU_FMEAFailureModeType(value); }
        public static implicit operator AU_FMEAFailureModeType(DBNull value) { return new AU_FMEAFailureModeType(null); }
    }
    public class AU_FMEAIdType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_FMEAIdType(decimal? value) : base(value) { }
        public static implicit operator AU_FMEAIdType(decimal? value) { return new AU_FMEAIdType(value); }
        public static implicit operator AU_FMEAIdType(DBNull value) { return new AU_FMEAIdType(null); }
    }
    public class AU_FMEARatingType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_FMEARatingType(int? value) : base(value) { }
        public static implicit operator AU_FMEARatingType(int? value) { return new AU_FMEARatingType(value); }
        public static implicit operator AU_FMEARatingType(DBNull value) { return new AU_FMEARatingType(null); }
        private AU_FMEARatingType(long? value) : base(value) { }
        public static implicit operator AU_FMEARatingType(long? value) { return new AU_FMEARatingType(value); }
    }
    public class AU_FMEARecommendedActionType : StringType
    {
        public override int Length { get => 512; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_FMEARecommendedActionType(string value) : base(value) { }
        public static implicit operator AU_FMEARecommendedActionType(string value) { return new AU_FMEARecommendedActionType(value); }
        public static implicit operator AU_FMEARecommendedActionType(DBNull value) { return new AU_FMEARecommendedActionType(null); }
    }
    public class AU_ISOContainerGroupCodeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_ISOContainerGroupCodeType(string value) : base(value) { }
        public static implicit operator AU_ISOContainerGroupCodeType(string value) { return new AU_ISOContainerGroupCodeType(value); }
        public static implicit operator AU_ISOContainerGroupCodeType(DBNull value) { return new AU_ISOContainerGroupCodeType(null); }
    }
    public class AU_ISOContainerTypeCodeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_ISOContainerTypeCodeType(string value) : base(value) { }
        public static implicit operator AU_ISOContainerTypeCodeType(string value) { return new AU_ISOContainerTypeCodeType(value); }
        public static implicit operator AU_ISOContainerTypeCodeType(DBNull value) { return new AU_ISOContainerTypeCodeType(null); }
    }
    public class AU_ISOHeightWidthCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_ISOHeightWidthCodeType(string value) : base(value) { }
        public static implicit operator AU_ISOHeightWidthCodeType(string value) { return new AU_ISOHeightWidthCodeType(value); }
        public static implicit operator AU_ISOHeightWidthCodeType(DBNull value) { return new AU_ISOHeightWidthCodeType(null); }
    }
    public class AU_ISOLengthCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_ISOLengthCodeType(string value) : base(value) { }
        public static implicit operator AU_ISOLengthCodeType(string value) { return new AU_ISOLengthCodeType(value); }
        public static implicit operator AU_ISOLengthCodeType(DBNull value) { return new AU_ISOLengthCodeType(null); }
    }
    public class AU_OperatorType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_OperatorType(string value) : base(value) { }
        public static implicit operator AU_OperatorType(string value) { return new AU_OperatorType(value); }
        public static implicit operator AU_OperatorType(DBNull value) { return new AU_OperatorType(null); }
    }
    public class AU_OwnerCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_OwnerCodeType(string value) : base(value) { }
        public static implicit operator AU_OwnerCodeType(string value) { return new AU_OwnerCodeType(value); }
        public static implicit operator AU_OwnerCodeType(DBNull value) { return new AU_OwnerCodeType(null); }
    }
    public class AU_PaymentRefNumType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_PaymentRefNumType(string value) : base(value) { }
        public static implicit operator AU_PaymentRefNumType(string value) { return new AU_PaymentRefNumType(value); }
        public static implicit operator AU_PaymentRefNumType(DBNull value) { return new AU_PaymentRefNumType(null); }
    }
    public class AU_PaymentRefTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_PaymentRefTypeType(string value) : base(value) { }
        public static implicit operator AU_PaymentRefTypeType(string value) { return new AU_PaymentRefTypeType(value); }
        public static implicit operator AU_PaymentRefTypeType(DBNull value) { return new AU_PaymentRefTypeType(null); }
    }
    public class AU_QAProcessDurationType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_QAProcessDurationType(int? value) : base(value) { }
        public static implicit operator AU_QAProcessDurationType(int? value) { return new AU_QAProcessDurationType(value); }
        public static implicit operator AU_QAProcessDurationType(DBNull value) { return new AU_QAProcessDurationType(null); }
        private AU_QAProcessDurationType(long? value) : base(value) { }
        public static implicit operator AU_QAProcessDurationType(long? value) { return new AU_QAProcessDurationType(value); }
    }
    public class AU_QAProcessIDType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_QAProcessIDType(string value) : base(value) { }
        public static implicit operator AU_QAProcessIDType(string value) { return new AU_QAProcessIDType(value); }
        public static implicit operator AU_QAProcessIDType(DBNull value) { return new AU_QAProcessIDType(null); }
    }
    public class AU_QAProcessStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_QAProcessStatusType(string value) : base(value) { }
        public static implicit operator AU_QAProcessStatusType(string value) { return new AU_QAProcessStatusType(value); }
        public static implicit operator AU_QAProcessStatusType(DBNull value) { return new AU_QAProcessStatusType(null); }
    }
    public class AU_QAProcessType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_QAProcessType(string value) : base(value) { }
        public static implicit operator AU_QAProcessType(string value) { return new AU_QAProcessType(value); }
        public static implicit operator AU_QAProcessType(DBNull value) { return new AU_QAProcessType(null); }
    }
    public class AU_RefNumIdTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_RefNumIdTypeType(string value) : base(value) { }
        public static implicit operator AU_RefNumIdTypeType(string value) { return new AU_RefNumIdTypeType(value); }
        public static implicit operator AU_RefNumIdTypeType(DBNull value) { return new AU_RefNumIdTypeType(null); }
    }
    public class AU_StackHeightType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AU_StackHeightType(short? value) : base(value) { }
        public static implicit operator AU_StackHeightType(short? value) { return new AU_StackHeightType(value); }
        public static implicit operator AU_StackHeightType(DBNull value) { return new AU_StackHeightType(null); }
        private AU_StackHeightType(int? value) : base(value) { }
        public static implicit operator AU_StackHeightType(int? value) { return new AU_StackHeightType(value); }
    }
    public class AuditActionType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AuditActionType(string value) : base(value) { }
        public static implicit operator AuditActionType(string value) { return new AuditActionType(value); }
        public static implicit operator AuditActionType(DBNull value) { return new AuditActionType(null); }
    }
    public class AuditCategoryType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AuditCategoryType(string value) : base(value) { }
        public static implicit operator AuditCategoryType(string value) { return new AuditCategoryType(value); }
        public static implicit operator AuditCategoryType(DBNull value) { return new AuditCategoryType(null); }
    }
    public class AuditDaysType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AuditDaysType(int? value) : base(value) { }
        public static implicit operator AuditDaysType(int? value) { return new AuditDaysType(value); }
        public static implicit operator AuditDaysType(DBNull value) { return new AuditDaysType(null); }
        private AuditDaysType(long? value) : base(value) { }
        public static implicit operator AuditDaysType(long? value) { return new AuditDaysType(value); }
    }
    public class AuditSeqType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AuditSeqType(decimal? value) : base(value) { }
        public static implicit operator AuditSeqType(decimal? value) { return new AuditSeqType(value); }
        public static implicit operator AuditSeqType(DBNull value) { return new AuditSeqType(null); }
    }
    public class AuthenticationModeType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AuthenticationModeType(byte? value) : base(value) { }
        public static implicit operator AuthenticationModeType(byte? value) { return new AuthenticationModeType(value); }
        public static implicit operator AuthenticationModeType(DBNull value) { return new AuthenticationModeType(null); }
        private AuthenticationModeType(int? value) : base(value) { }
        public static implicit operator AuthenticationModeType(int? value) { return new AuthenticationModeType(value); }
    }
    public class AuthorizationObjectNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AuthorizationObjectNameType(string value) : base(value) { }
        public static implicit operator AuthorizationObjectNameType(string value) { return new AuthorizationObjectNameType(value); }
        public static implicit operator AuthorizationObjectNameType(DBNull value) { return new AuthorizationObjectNameType(null); }
    }
    public class AuthorizationObjectTypeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AuthorizationObjectTypeType(short? value) : base(value) { }
        public static implicit operator AuthorizationObjectTypeType(short? value) { return new AuthorizationObjectTypeType(value); }
        public static implicit operator AuthorizationObjectTypeType(DBNull value) { return new AuthorizationObjectTypeType(null); }
        private AuthorizationObjectTypeType(int? value) : base(value) { }
        public static implicit operator AuthorizationObjectTypeType(int? value) { return new AuthorizationObjectTypeType(value); }
    }
    public class AuthStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AuthStatusType(string value) : base(value) { }
        public static implicit operator AuthStatusType(string value) { return new AuthStatusType(value); }
        public static implicit operator AuthStatusType(DBNull value) { return new AuthStatusType(null); }
    }
    public class AutoVoucherMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AutoVoucherMethodType(string value) : base(value) { }
        public static implicit operator AutoVoucherMethodType(string value) { return new AutoVoucherMethodType(value); }
        public static implicit operator AutoVoucherMethodType(DBNull value) { return new AutoVoucherMethodType(null); }
    }
    public class AwardAmountType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 8; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private AwardAmountType(decimal? value) : base(value) { }
        public static implicit operator AwardAmountType(decimal? value) { return new AwardAmountType(value); }
        public static implicit operator AwardAmountType(DBNull value) { return new AwardAmountType(null); }
    }
    public class AwardNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AwardNumType(int? value) : base(value) { }
        public static implicit operator AwardNumType(int? value) { return new AwardNumType(value); }
        public static implicit operator AwardNumType(DBNull value) { return new AwardNumType(null); }
        private AwardNumType(long? value) : base(value) { }
        public static implicit operator AwardNumType(long? value) { return new AwardNumType(value); }
    }
    public class AwardTitleType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private AwardTitleType(string value) : base(value) { }
        public static implicit operator AwardTitleType(string value) { return new AwardTitleType(value); }
        public static implicit operator AwardTitleType(DBNull value) { return new AwardTitleType(null); }
    }
    public class BalMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BalMethodType(string value) : base(value) { }
        public static implicit operator BalMethodType(string value) { return new BalMethodType(value); }
        public static implicit operator BalMethodType(DBNull value) { return new BalMethodType(null); }
    }
    public class BankAccountType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BankAccountType(string value) : base(value) { }
        public static implicit operator BankAccountType(string value) { return new BankAccountType(value); }
        public static implicit operator BankAccountType(DBNull value) { return new BankAccountType(null); }
    }
    public class BankAuthorityPartyIDType : StringType
    {
        public override int Length { get => 70; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BankAuthorityPartyIDType(string value) : base(value) { }
        public static implicit operator BankAuthorityPartyIDType(string value) { return new BankAuthorityPartyIDType(value); }
        public static implicit operator BankAuthorityPartyIDType(DBNull value) { return new BankAuthorityPartyIDType(null); }
    }
    public class BankCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BankCodeType(string value) : base(value) { }
        public static implicit operator BankCodeType(string value) { return new BankCodeType(value); }
        public static implicit operator BankCodeType(DBNull value) { return new BankCodeType(null); }
    }
    public class BankDraftNumberType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BankDraftNumberType(string value) : base(value) { }
        public static implicit operator BankDraftNumberType(string value) { return new BankDraftNumberType(value); }
        public static implicit operator BankDraftNumberType(DBNull value) { return new BankDraftNumberType(null); }
    }
    public class BankNameType : StringType
    {
        public override int Length { get => 70; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BankNameType(string value) : base(value) { }
        public static implicit operator BankNameType(string value) { return new BankNameType(value); }
        public static implicit operator BankNameType(DBNull value) { return new BankNameType(null); }
    }
    public class BankNumberType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BankNumberType(string value) : base(value) { }
        public static implicit operator BankNumberType(string value) { return new BankNumberType(value); }
        public static implicit operator BankNumberType(DBNull value) { return new BankNumberType(null); }
    }
    public class BankNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BankNumType(int? value) : base(value) { }
        public static implicit operator BankNumType(int? value) { return new BankNumType(value); }
        public static implicit operator BankNumType(DBNull value) { return new BankNumType(null); }
        private BankNumType(long? value) : base(value) { }
        public static implicit operator BankNumType(long? value) { return new BankNumType(value); }
    }
    public class BankTransitNumMaskType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BankTransitNumMaskType(string value) : base(value) { }
        public static implicit operator BankTransitNumMaskType(string value) { return new BankTransitNumMaskType(value); }
        public static implicit operator BankTransitNumMaskType(DBNull value) { return new BankTransitNumMaskType(null); }
    }
    public class BankTransitNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BankTransitNumType(string value) : base(value) { }
        public static implicit operator BankTransitNumType(string value) { return new BankTransitNumType(value); }
        public static implicit operator BankTransitNumType(DBNull value) { return new BankTransitNumType(null); }
    }
    public class BatchID2Type : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BatchID2Type(int? value) : base(value) { }
        public static implicit operator BatchID2Type(int? value) { return new BatchID2Type(value); }
        public static implicit operator BatchID2Type(DBNull value) { return new BatchID2Type(null); }
        private BatchID2Type(long? value) : base(value) { }
        public static implicit operator BatchID2Type(long? value) { return new BatchID2Type(value); }
    }
    public class BatchIdType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BatchIdType(int? value) : base(value) { }
        public static implicit operator BatchIdType(int? value) { return new BatchIdType(value); }
        public static implicit operator BatchIdType(DBNull value) { return new BatchIdType(null); }
        private BatchIdType(long? value) : base(value) { }
        public static implicit operator BatchIdType(long? value) { return new BatchIdType(value); }
    }
    public class BatchmsgIdType : GuidType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BatchmsgIdType(Guid? value) : base(value) { }
        public static implicit operator BatchmsgIdType(Guid? value) { return new BatchmsgIdType(value); }
        public static implicit operator BatchmsgIdType(DBNull value) { return new BatchmsgIdType((Guid?)null); }
        private BatchmsgIdType(string value) : base(value) { }
        public static implicit operator BatchmsgIdType(string value) { return new BatchmsgIdType(value); }
    }
    public class BatchNumType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 24; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BatchNumType(decimal? value) : base(value) { }
        public static implicit operator BatchNumType(decimal? value) { return new BatchNumType(value); }
        public static implicit operator BatchNumType(DBNull value) { return new BatchNumType(null); }
    }
    public class BatchrptFreqType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BatchrptFreqType(string value) : base(value) { }
        public static implicit operator BatchrptFreqType(string value) { return new BatchrptFreqType(value); }
        public static implicit operator BatchrptFreqType(DBNull value) { return new BatchrptFreqType(null); }
    }
    public class BatchrptStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BatchrptStatusType(string value) : base(value) { }
        public static implicit operator BatchrptStatusType(string value) { return new BatchrptStatusType(value); }
        public static implicit operator BatchrptStatusType(DBNull value) { return new BatchrptStatusType(null); }
    }
    public class BcoCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BcoCodeType(string value) : base(value) { }
        public static implicit operator BcoCodeType(string value) { return new BcoCodeType(value); }
        public static implicit operator BcoCodeType(DBNull value) { return new BcoCodeType(null); }
    }
    public class BflushTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BflushTypeType(string value) : base(value) { }
        public static implicit operator BflushTypeType(string value) { return new BflushTypeType(value); }
        public static implicit operator BflushTypeType(DBNull value) { return new BflushTypeType(null); }
    }
    public class BGPostingStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BGPostingStatType(string value) : base(value) { }
        public static implicit operator BGPostingStatType(string value) { return new BGPostingStatType(value); }
        public static implicit operator BGPostingStatType(DBNull value) { return new BGPostingStatType(null); }
    }
    public class BgQueueType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BgQueueType(string value) : base(value) { }
        public static implicit operator BgQueueType(string value) { return new BgQueueType(value); }
        public static implicit operator BgQueueType(DBNull value) { return new BgQueueType(null); }
    }
    public class BgRankType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BgRankType(short? value) : base(value) { }
        public static implicit operator BgRankType(short? value) { return new BgRankType(value); }
        public static implicit operator BgRankType(DBNull value) { return new BgRankType(null); }
        private BgRankType(int? value) : base(value) { }
        public static implicit operator BgRankType(int? value) { return new BgRankType(value); }
    }
    public class BGTaskExecutableType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BGTaskExecutableType(string value) : base(value) { }
        public static implicit operator BGTaskExecutableType(string value) { return new BGTaskExecutableType(value); }
        public static implicit operator BGTaskExecutableType(DBNull value) { return new BGTaskExecutableType(null); }
    }
    public class BGTaskNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BGTaskNameType(string value) : base(value) { }
        public static implicit operator BGTaskNameType(string value) { return new BGTaskNameType(value); }
        public static implicit operator BGTaskNameType(DBNull value) { return new BGTaskNameType(null); }
    }
    public class BGTaskParmsHugeType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BGTaskParmsHugeType(string value) : base(value) { }
        public static implicit operator BGTaskParmsHugeType(string value) { return new BGTaskParmsHugeType(value); }
        public static implicit operator BGTaskParmsHugeType(DBNull value) { return new BGTaskParmsHugeType(null); }
    }
    public class BGTaskParmsType : StringType
    {
        public override int Length { get => 2200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BGTaskParmsType(string value) : base(value) { }
        public static implicit operator BGTaskParmsType(string value) { return new BGTaskParmsType(value); }
        public static implicit operator BGTaskParmsType(DBNull value) { return new BGTaskParmsType(null); }
    }
    public class BGTaskReportTypeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BGTaskReportTypeType(string value) : base(value) { }
        public static implicit operator BGTaskReportTypeType(string value) { return new BGTaskReportTypeType(value); }
        public static implicit operator BGTaskReportTypeType(DBNull value) { return new BGTaskReportTypeType(null); }
    }
    public class BICountType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BICountType(int? value) : base(value) { }
        public static implicit operator BICountType(int? value) { return new BICountType(value); }
        public static implicit operator BICountType(DBNull value) { return new BICountType(null); }
        private BICountType(long? value) : base(value) { }
        public static implicit operator BICountType(long? value) { return new BICountType(value); }
    }
    public class BILargeDecimalType : DecimalType
    {
        public override int Length { get => 17; }
        public override byte Precision { get => 38; }
        public override byte Scale { get => 16; }
        public override bool Nullable { get => true; }
        private BILargeDecimalType(decimal? value) : base(value) { }
        public static implicit operator BILargeDecimalType(decimal? value) { return new BILargeDecimalType(value); }
        public static implicit operator BILargeDecimalType(DBNull value) { return new BILargeDecimalType(null); }
    }
    public class BILargeTextType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BILargeTextType(string value) : base(value) { }
        public static implicit operator BILargeTextType(string value) { return new BILargeTextType(value); }
        public static implicit operator BILargeTextType(DBNull value) { return new BILargeTextType(null); }
    }
    public class BillingTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BillingTypeType(string value) : base(value) { }
        public static implicit operator BillingTypeType(string value) { return new BillingTypeType(value); }
        public static implicit operator BillingTypeType(DBNull value) { return new BillingTypeType(null); }
    }
    public class BILongRowPointerType : StringType
    {
        public override int Length { get => 72; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BILongRowPointerType(string value) : base(value) { }
        public static implicit operator BILongRowPointerType(string value) { return new BILongRowPointerType(value); }
        public static implicit operator BILongRowPointerType(DBNull value) { return new BILongRowPointerType(null); }
    }
    public class BIMidRowPointerType : StringType
    {
        public override int Length { get => 42; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BIMidRowPointerType(string value) : base(value) { }
        public static implicit operator BIMidRowPointerType(string value) { return new BIMidRowPointerType(value); }
        public static implicit operator BIMidRowPointerType(DBNull value) { return new BIMidRowPointerType(null); }
    }
    public class BIObjectValueType : StringType
    {
        public override int Length { get => 400; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BIObjectValueType(string value) : base(value) { }
        public static implicit operator BIObjectValueType(string value) { return new BIObjectValueType(value); }
        public static implicit operator BIObjectValueType(DBNull value) { return new BIObjectValueType(null); }
    }
    public class BODActionCodeMappingType : StringType
    {
        public override int Length { get => 512; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BODActionCodeMappingType(string value) : base(value) { }
        public static implicit operator BODActionCodeMappingType(string value) { return new BODActionCodeMappingType(value); }
        public static implicit operator BODActionCodeMappingType(DBNull value) { return new BODActionCodeMappingType(null); }
    }
    public class BODTemplateSchemaType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BODTemplateSchemaType(string value) : base(value) { }
        public static implicit operator BODTemplateSchemaType(string value) { return new BODTemplateSchemaType(value); }
        public static implicit operator BODTemplateSchemaType(DBNull value) { return new BODTemplateSchemaType(null); }
    }
    public class BODTemplateStatusType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BODTemplateStatusType(string value) : base(value) { }
        public static implicit operator BODTemplateStatusType(string value) { return new BODTemplateStatusType(value); }
        public static implicit operator BODTemplateStatusType(DBNull value) { return new BODTemplateStatusType(null); }
    }
    public class BODTemplateType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BODTemplateType(string value) : base(value) { }
        public static implicit operator BODTemplateType(string value) { return new BODTemplateType(value); }
        public static implicit operator BODTemplateType(DBNull value) { return new BODTemplateType(null); }
    }
    public class BODTemplateVersionType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BODTemplateVersionType(string value) : base(value) { }
        public static implicit operator BODTemplateVersionType(string value) { return new BODTemplateVersionType(value); }
        public static implicit operator BODTemplateVersionType(DBNull value) { return new BODTemplateVersionType(null); }
    }
    public class BolNumType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BolNumType(string value) : base(value) { }
        public static implicit operator BolNumType(string value) { return new BolNumType(value); }
        public static implicit operator BolNumType(DBNull value) { return new BolNumType(null); }
    }
    public class BolPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BolPrefixType(string value) : base(value) { }
        public static implicit operator BolPrefixType(string value) { return new BolPrefixType(value); }
        public static implicit operator BolPrefixType(DBNull value) { return new BolPrefixType(null); }
    }
    public class BolStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BolStatusType(string value) : base(value) { }
        public static implicit operator BolStatusType(string value) { return new BolStatusType(value); }
        public static implicit operator BolStatusType(DBNull value) { return new BolStatusType(null); }
    }
    public class BolUnitsType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BolUnitsType(string value) : base(value) { }
        public static implicit operator BolUnitsType(string value) { return new BolUnitsType(value); }
        public static implicit operator BolUnitsType(DBNull value) { return new BolUnitsType(null); }
    }
    public class BOMImportElementTagNameType : StringType
    {
        public override int Length { get => 8000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BOMImportElementTagNameType(string value) : base(value) { }
        public static implicit operator BOMImportElementTagNameType(string value) { return new BOMImportElementTagNameType(value); }
        public static implicit operator BOMImportElementTagNameType(DBNull value) { return new BOMImportElementTagNameType(null); }
    }
    public class BOMImportValueConvIdType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BOMImportValueConvIdType(string value) : base(value) { }
        public static implicit operator BOMImportValueConvIdType(string value) { return new BOMImportValueConvIdType(value); }
        public static implicit operator BOMImportValueConvIdType(DBNull value) { return new BOMImportValueConvIdType(null); }
    }
    public class BOMImportValueType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BOMImportValueType(string value) : base(value) { }
        public static implicit operator BOMImportValueType(string value) { return new BOMImportValueType(value); }
        public static implicit operator BOMImportValueType(DBNull value) { return new BOMImportValueType(null); }
    }
    public class BonusCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BonusCodeType(string value) : base(value) { }
        public static implicit operator BonusCodeType(string value) { return new BonusCodeType(value); }
        public static implicit operator BonusCodeType(DBNull value) { return new BonusCodeType(null); }
    }
    public class BookmarkType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BookmarkType(string value) : base(value) { }
        public static implicit operator BookmarkType(string value) { return new BookmarkType(value); }
        public static implicit operator BookmarkType(DBNull value) { return new BookmarkType(null); }
    }
    public class BoxType : StringType
    {
        public override int Length { get => 36; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BoxType(string value) : base(value) { }
        public static implicit operator BoxType(string value) { return new BoxType(value); }
        public static implicit operator BoxType(DBNull value) { return new BoxType(null); }
    }
    public class BPProductType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BPProductType(string value) : base(value) { }
        public static implicit operator BPProductType(string value) { return new BPProductType(value); }
        public static implicit operator BPProductType(DBNull value) { return new BPProductType(null); }
    }
    public class BpType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BpType(string value) : base(value) { }
        public static implicit operator BpType(string value) { return new BpType(value); }
        public static implicit operator BpType(DBNull value) { return new BpType(null); }
    }
    public class BPVersionType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BPVersionType(string value) : base(value) { }
        public static implicit operator BPVersionType(string value) { return new BPVersionType(value); }
        public static implicit operator BPVersionType(DBNull value) { return new BPVersionType(null); }
    }
    public class BranchCodeType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BranchCodeType(string value) : base(value) { }
        public static implicit operator BranchCodeType(string value) { return new BranchCodeType(value); }
        public static implicit operator BranchCodeType(DBNull value) { return new BranchCodeType(null); }
    }
    public class BranchIdType : StringType
    {
        public override int Length { get => 10; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BranchIdType(string value) : base(value) { }
        public static implicit operator BranchIdType(string value) { return new BranchIdType(value); }
        public static implicit operator BranchIdType(DBNull value) { return new BranchIdType(null); }
    }
    public class BrandRecognitionLevelType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BrandRecognitionLevelType(string value) : base(value) { }
        public static implicit operator BrandRecognitionLevelType(string value) { return new BrandRecognitionLevelType(value); }
        public static implicit operator BrandRecognitionLevelType(DBNull value) { return new BrandRecognitionLevelType(null); }
    }
    public class BubbleType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BubbleType(string value) : base(value) { }
        public static implicit operator BubbleType(string value) { return new BubbleType(value); }
        public static implicit operator BubbleType(DBNull value) { return new BubbleType(null); }
    }
    public class BucketsType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BucketsType(short? value) : base(value) { }
        public static implicit operator BucketsType(short? value) { return new BucketsType(value); }
        public static implicit operator BucketsType(DBNull value) { return new BucketsType(null); }
        private BucketsType(int? value) : base(value) { }
        public static implicit operator BucketsType(int? value) { return new BucketsType(value); }
    }
    public class BufferHoursType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 7; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private BufferHoursType(decimal? value) : base(value) { }
        public static implicit operator BufferHoursType(decimal? value) { return new BufferHoursType(value); }
        public static implicit operator BufferHoursType(DBNull value) { return new BufferHoursType(null); }
    }
    public class BuilderInvNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BuilderInvNumType(string value) : base(value) { }
        public static implicit operator BuilderInvNumType(string value) { return new BuilderInvNumType(value); }
        public static implicit operator BuilderInvNumType(DBNull value) { return new BuilderInvNumType(null); }
    }
    public class BuilderInvoicePrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BuilderInvoicePrefixType(string value) : base(value) { }
        public static implicit operator BuilderInvoicePrefixType(string value) { return new BuilderInvoicePrefixType(value); }
        public static implicit operator BuilderInvoicePrefixType(DBNull value) { return new BuilderInvoicePrefixType(null); }
    }
    public class BuilderPoNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BuilderPoNumType(string value) : base(value) { }
        public static implicit operator BuilderPoNumType(string value) { return new BuilderPoNumType(value); }
        public static implicit operator BuilderPoNumType(DBNull value) { return new BuilderPoNumType(null); }
    }
    public class BuilderPoPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BuilderPoPrefixType(string value) : base(value) { }
        public static implicit operator BuilderPoPrefixType(string value) { return new BuilderPoPrefixType(value); }
        public static implicit operator BuilderPoPrefixType(DBNull value) { return new BuilderPoPrefixType(null); }
    }
    public class BuilderVoucherPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BuilderVoucherPrefixType(string value) : base(value) { }
        public static implicit operator BuilderVoucherPrefixType(string value) { return new BuilderVoucherPrefixType(value); }
        public static implicit operator BuilderVoucherPrefixType(DBNull value) { return new BuilderVoucherPrefixType(null); }
    }
    public class BuilderVoucherType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BuilderVoucherType(string value) : base(value) { }
        public static implicit operator BuilderVoucherType(string value) { return new BuilderVoucherType(value); }
        public static implicit operator BuilderVoucherType(DBNull value) { return new BuilderVoucherType(null); }
    }
    public class BuildNumberType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private BuildNumberType(int? value) : base(value) { }
        public static implicit operator BuildNumberType(int? value) { return new BuildNumberType(value); }
        public static implicit operator BuildNumberType(DBNull value) { return new BuildNumberType(null); }
        private BuildNumberType(long? value) : base(value) { }
        public static implicit operator BuildNumberType(long? value) { return new BuildNumberType(value); }
    }
    public class BusExportCounterType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 24; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BusExportCounterType(decimal? value) : base(value) { }
        public static implicit operator BusExportCounterType(decimal? value) { return new BusExportCounterType(value); }
        public static implicit operator BusExportCounterType(DBNull value) { return new BusExportCounterType(null); }
    }
    public class BusinessIdentificationNumType : StringType
    {
        public override int Length { get => 28; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BusinessIdentificationNumType(string value) : base(value) { }
        public static implicit operator BusinessIdentificationNumType(string value) { return new BusinessIdentificationNumType(value); }
        public static implicit operator BusinessIdentificationNumType(DBNull value) { return new BusinessIdentificationNumType(null); }
    }
    public class BusinessIdentifierCodeType : StringType
    {
        public override int Length { get => 22; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BusinessIdentifierCodeType(string value) : base(value) { }
        public static implicit operator BusinessIdentifierCodeType(string value) { return new BusinessIdentifierCodeType(value); }
        public static implicit operator BusinessIdentifierCodeType(DBNull value) { return new BusinessIdentifierCodeType(null); }
    }
    public class BusinessRoleType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private BusinessRoleType(string value) : base(value) { }
        public static implicit operator BusinessRoleType(string value) { return new BusinessRoleType(value); }
        public static implicit operator BusinessRoleType(DBNull value) { return new BusinessRoleType(null); }
    }
    public class CacheWindowsType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CacheWindowsType(short? value) : base(value) { }
        public static implicit operator CacheWindowsType(short? value) { return new CacheWindowsType(value); }
        public static implicit operator CacheWindowsType(DBNull value) { return new CacheWindowsType(null); }
        private CacheWindowsType(int? value) : base(value) { }
        public static implicit operator CacheWindowsType(int? value) { return new CacheWindowsType(value); }
    }
    public class CalendarRefType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CalendarRefType(string value) : base(value) { }
        public static implicit operator CalendarRefType(string value) { return new CalendarRefType(value); }
        public static implicit operator CalendarRefType(DBNull value) { return new CalendarRefType(null); }
    }
    public class CalendarType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CalendarType(string value) : base(value) { }
        public static implicit operator CalendarType(string value) { return new CalendarType(value); }
        public static implicit operator CalendarType(DBNull value) { return new CalendarType(null); }
    }
    public class CampaignIDType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CampaignIDType(string value) : base(value) { }
        public static implicit operator CampaignIDType(string value) { return new CampaignIDType(value); }
        public static implicit operator CampaignIDType(DBNull value) { return new CampaignIDType(null); }
    }
    public class CampaignStatusType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CampaignStatusType(string value) : base(value) { }
        public static implicit operator CampaignStatusType(string value) { return new CampaignStatusType(value); }
        public static implicit operator CampaignStatusType(DBNull value) { return new CampaignStatusType(null); }
    }
    public class CampaignTypeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CampaignTypeType(string value) : base(value) { }
        public static implicit operator CampaignTypeType(string value) { return new CampaignTypeType(value); }
        public static implicit operator CampaignTypeType(DBNull value) { return new CampaignTypeType(null); }
    }
    public class CapacityType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 7; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private CapacityType(decimal? value) : base(value) { }
        public static implicit operator CapacityType(decimal? value) { return new CapacityType(value); }
        public static implicit operator CapacityType(DBNull value) { return new CapacityType(null); }
    }
    public class CapFactorType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private CapFactorType(decimal? value) : base(value) { }
        public static implicit operator CapFactorType(decimal? value) { return new CapFactorType(value); }
        public static implicit operator CapFactorType(DBNull value) { return new CapFactorType(null); }
    }
    public class CarrierAccountType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CarrierAccountType(string value) : base(value) { }
        public static implicit operator CarrierAccountType(string value) { return new CarrierAccountType(value); }
        public static implicit operator CarrierAccountType(DBNull value) { return new CarrierAccountType(null); }
    }
    public class CarrierBillToTransportationType : StringType
    {
        public override int Length { get => 10; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CarrierBillToTransportationType(string value) : base(value) { }
        public static implicit operator CarrierBillToTransportationType(string value) { return new CarrierBillToTransportationType(value); }
        public static implicit operator CarrierBillToTransportationType(DBNull value) { return new CarrierBillToTransportationType(null); }
    }
    public class CarrierCodeType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CarrierCodeType(string value) : base(value) { }
        public static implicit operator CarrierCodeType(string value) { return new CarrierCodeType(value); }
        public static implicit operator CarrierCodeType(DBNull value) { return new CarrierCodeType(null); }
    }
    public class CarrierNumberOfOptionsType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CarrierNumberOfOptionsType(int? value) : base(value) { }
        public static implicit operator CarrierNumberOfOptionsType(int? value) { return new CarrierNumberOfOptionsType(value); }
        public static implicit operator CarrierNumberOfOptionsType(DBNull value) { return new CarrierNumberOfOptionsType(null); }
        private CarrierNumberOfOptionsType(long? value) : base(value) { }
        public static implicit operator CarrierNumberOfOptionsType(long? value) { return new CarrierNumberOfOptionsType(value); }
    }
    public class CarrierNumType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CarrierNumType(string value) : base(value) { }
        public static implicit operator CarrierNumType(string value) { return new CarrierNumType(value); }
        public static implicit operator CarrierNumType(DBNull value) { return new CarrierNumType(null); }
    }
    public class CarrierOptionFieldDataTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CarrierOptionFieldDataTypeType(string value) : base(value) { }
        public static implicit operator CarrierOptionFieldDataTypeType(string value) { return new CarrierOptionFieldDataTypeType(value); }
        public static implicit operator CarrierOptionFieldDataTypeType(DBNull value) { return new CarrierOptionFieldDataTypeType(null); }
    }
    public class CarrierOptionFieldLengthDecimalType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CarrierOptionFieldLengthDecimalType(int? value) : base(value) { }
        public static implicit operator CarrierOptionFieldLengthDecimalType(int? value) { return new CarrierOptionFieldLengthDecimalType(value); }
        public static implicit operator CarrierOptionFieldLengthDecimalType(DBNull value) { return new CarrierOptionFieldLengthDecimalType(null); }
        private CarrierOptionFieldLengthDecimalType(long? value) : base(value) { }
        public static implicit operator CarrierOptionFieldLengthDecimalType(long? value) { return new CarrierOptionFieldLengthDecimalType(value); }
    }
    public class CarrierOptionFieldLengthType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CarrierOptionFieldLengthType(int? value) : base(value) { }
        public static implicit operator CarrierOptionFieldLengthType(int? value) { return new CarrierOptionFieldLengthType(value); }
        public static implicit operator CarrierOptionFieldLengthType(DBNull value) { return new CarrierOptionFieldLengthType(null); }
        private CarrierOptionFieldLengthType(long? value) : base(value) { }
        public static implicit operator CarrierOptionFieldLengthType(long? value) { return new CarrierOptionFieldLengthType(value); }
    }
    public class CarrierOptionFieldNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CarrierOptionFieldNameType(string value) : base(value) { }
        public static implicit operator CarrierOptionFieldNameType(string value) { return new CarrierOptionFieldNameType(value); }
        public static implicit operator CarrierOptionFieldNameType(DBNull value) { return new CarrierOptionFieldNameType(null); }
    }
    public class CarrierOptionFieldValueType : StringType
    {
        public override int Length { get => 2000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CarrierOptionFieldValueType(string value) : base(value) { }
        public static implicit operator CarrierOptionFieldValueType(string value) { return new CarrierOptionFieldValueType(value); }
        public static implicit operator CarrierOptionFieldValueType(DBNull value) { return new CarrierOptionFieldValueType(null); }
    }
    public class CarrierOptionIdType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CarrierOptionIdType(int? value) : base(value) { }
        public static implicit operator CarrierOptionIdType(int? value) { return new CarrierOptionIdType(value); }
        public static implicit operator CarrierOptionIdType(DBNull value) { return new CarrierOptionIdType(null); }
        private CarrierOptionIdType(long? value) : base(value) { }
        public static implicit operator CarrierOptionIdType(long? value) { return new CarrierOptionIdType(value); }
    }
    public class CarrierReferenceType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CarrierReferenceType(string value) : base(value) { }
        public static implicit operator CarrierReferenceType(string value) { return new CarrierReferenceType(value); }
        public static implicit operator CarrierReferenceType(DBNull value) { return new CarrierReferenceType(null); }
    }
    public class CarrierServiceType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CarrierServiceType(string value) : base(value) { }
        public static implicit operator CarrierServiceType(string value) { return new CarrierServiceType(value); }
        public static implicit operator CarrierServiceType(DBNull value) { return new CarrierServiceType(null); }
    }
    public class CarrierType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CarrierType(string value) : base(value) { }
        public static implicit operator CarrierType(string value) { return new CarrierType(value); }
        public static implicit operator CarrierType(DBNull value) { return new CarrierType(null); }
    }
    public class CarrierUpchargePercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 4; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private CarrierUpchargePercentType(decimal? value) : base(value) { }
        public static implicit operator CarrierUpchargePercentType(decimal? value) { return new CarrierUpchargePercentType(value); }
        public static implicit operator CarrierUpchargePercentType(DBNull value) { return new CarrierUpchargePercentType(null); }
    }
    public class CashRoundingFactorType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private CashRoundingFactorType(decimal? value) : base(value) { }
        public static implicit operator CashRoundingFactorType(decimal? value) { return new CashRoundingFactorType(value); }
        public static implicit operator CashRoundingFactorType(DBNull value) { return new CashRoundingFactorType(null); }
    }
    public class CategoryType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CategoryType(string value) : base(value) { }
        public static implicit operator CategoryType(string value) { return new CategoryType(value); }
        public static implicit operator CategoryType(DBNull value) { return new CategoryType(null); }
    }
    public class CCIAuthCodeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CCIAuthCodeType(int? value) : base(value) { }
        public static implicit operator CCIAuthCodeType(int? value) { return new CCIAuthCodeType(value); }
        public static implicit operator CCIAuthCodeType(DBNull value) { return new CCIAuthCodeType(null); }
        private CCIAuthCodeType(long? value) : base(value) { }
        public static implicit operator CCIAuthCodeType(long? value) { return new CCIAuthCodeType(value); }
    }
    public class CCICardLast4DigitsType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CCICardLast4DigitsType(string value) : base(value) { }
        public static implicit operator CCICardLast4DigitsType(string value) { return new CCICardLast4DigitsType(value); }
        public static implicit operator CCICardLast4DigitsType(DBNull value) { return new CCICardLast4DigitsType(null); }
    }
    public class CCICardNumType : StringType
    {
        public override int Length { get => 32; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CCICardNumType(string value) : base(value) { }
        public static implicit operator CCICardNumType(string value) { return new CCICardNumType(value); }
        public static implicit operator CCICardNumType(DBNull value) { return new CCICardNumType(null); }
    }
    public class CCICardSystemIDType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CCICardSystemIDType(string value) : base(value) { }
        public static implicit operator CCICardSystemIDType(string value) { return new CCICardSystemIDType(value); }
        public static implicit operator CCICardSystemIDType(DBNull value) { return new CCICardSystemIDType(null); }
    }
    public class CCICardSystemType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CCICardSystemType(string value) : base(value) { }
        public static implicit operator CCICardSystemType(string value) { return new CCICardSystemType(value); }
        public static implicit operator CCICardSystemType(DBNull value) { return new CCICardSystemType(null); }
    }
    public class CCICardTypeType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CCICardTypeType(string value) : base(value) { }
        public static implicit operator CCICardTypeType(string value) { return new CCICardTypeType(value); }
        public static implicit operator CCICardTypeType(DBNull value) { return new CCICardTypeType(null); }
    }
    public class CCICharAuthCodeType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CCICharAuthCodeType(string value) : base(value) { }
        public static implicit operator CCICharAuthCodeType(string value) { return new CCICharAuthCodeType(value); }
        public static implicit operator CCICharAuthCodeType(DBNull value) { return new CCICharAuthCodeType(null); }
    }
    public class CCICVNumType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CCICVNumType(string value) : base(value) { }
        public static implicit operator CCICVNumType(string value) { return new CCICVNumType(value); }
        public static implicit operator CCICVNumType(DBNull value) { return new CCICVNumType(null); }
    }
    public class CCIExpDateType : StringType
    {
        public override int Length { get => 10; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CCIExpDateType(string value) : base(value) { }
        public static implicit operator CCIExpDateType(string value) { return new CCIExpDateType(value); }
        public static implicit operator CCIExpDateType(DBNull value) { return new CCIExpDateType(null); }
    }
    public class CCIGatewayLongTransNumType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 24; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CCIGatewayLongTransNumType(decimal? value) : base(value) { }
        public static implicit operator CCIGatewayLongTransNumType(decimal? value) { return new CCIGatewayLongTransNumType(value); }
        public static implicit operator CCIGatewayLongTransNumType(DBNull value) { return new CCIGatewayLongTransNumType(null); }
    }
    public class CCIGatewayTransNumType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 24; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CCIGatewayTransNumType(decimal? value) : base(value) { }
        public static implicit operator CCIGatewayTransNumType(decimal? value) { return new CCIGatewayTransNumType(value); }
        public static implicit operator CCIGatewayTransNumType(DBNull value) { return new CCIGatewayTransNumType(null); }
    }
    public class CCIGatewayVendIdType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CCIGatewayVendIdType(string value) : base(value) { }
        public static implicit operator CCIGatewayVendIdType(string value) { return new CCIGatewayVendIdType(value); }
        public static implicit operator CCIGatewayVendIdType(DBNull value) { return new CCIGatewayVendIdType(null); }
    }
    public class CCITransRefTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CCITransRefTypeType(string value) : base(value) { }
        public static implicit operator CCITransRefTypeType(string value) { return new CCITransRefTypeType(value); }
        public static implicit operator CCITransRefTypeType(DBNull value) { return new CCITransRefTypeType(null); }
    }
    public class CCITransTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CCITransTypeType(string value) : base(value) { }
        public static implicit operator CCITransTypeType(string value) { return new CCITransTypeType(value); }
        public static implicit operator CCITransTypeType(DBNull value) { return new CCITransTypeType(null); }
    }
    public class CellType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CellType(string value) : base(value) { }
        public static implicit operator CellType(string value) { return new CellType(value); }
        public static implicit operator CellType(DBNull value) { return new CellType(null); }
    }
    public class CertificateOfConformanceTextType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CertificateOfConformanceTextType(string value) : base(value) { }
        public static implicit operator CertificateOfConformanceTextType(string value) { return new CertificateOfConformanceTextType(value); }
        public static implicit operator CertificateOfConformanceTextType(DBNull value) { return new CertificateOfConformanceTextType(null); }
    }
    public class CertNumType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CertNumType(string value) : base(value) { }
        public static implicit operator CertNumType(string value) { return new CertNumType(value); }
        public static implicit operator CertNumType(DBNull value) { return new CertNumType(null); }
    }
    public class CfpTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CfpTypeType(string value) : base(value) { }
        public static implicit operator CfpTypeType(string value) { return new CfpTypeType(value); }
        public static implicit operator CfpTypeType(DBNull value) { return new CfpTypeType(null); }
    }
    public class ChargebackSequenceType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ChargebackSequenceType(int? value) : base(value) { }
        public static implicit operator ChargebackSequenceType(int? value) { return new ChargebackSequenceType(value); }
        public static implicit operator ChargebackSequenceType(DBNull value) { return new ChargebackSequenceType(null); }
        private ChargebackSequenceType(long? value) : base(value) { }
        public static implicit operator ChargebackSequenceType(long? value) { return new ChargebackSequenceType(value); }
    }
    public class ChargebackStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ChargebackStatusType(string value) : base(value) { }
        public static implicit operator ChargebackStatusType(string value) { return new ChargebackStatusType(value); }
        public static implicit operator ChargebackStatusType(DBNull value) { return new ChargebackStatusType(null); }
    }
    public class ChargebackTypeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ChargebackTypeType(string value) : base(value) { }
        public static implicit operator ChargebackTypeType(string value) { return new ChargebackTypeType(value); }
        public static implicit operator ChargebackTypeType(DBNull value) { return new ChargebackTypeType(null); }
    }
    public class ChargeTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ChargeTypeType(string value) : base(value) { }
        public static implicit operator ChargeTypeType(string value) { return new ChargeTypeType(value); }
        public static implicit operator ChargeTypeType(DBNull value) { return new ChargeTypeType(null); }
    }
    public class CharLongDescType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CharLongDescType(string value) : base(value) { }
        public static implicit operator CharLongDescType(string value) { return new CharLongDescType(value); }
        public static implicit operator CharLongDescType(DBNull value) { return new CharLongDescType(null); }
    }
    public class CharMediumDescType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CharMediumDescType(string value) : base(value) { }
        public static implicit operator CharMediumDescType(string value) { return new CharMediumDescType(value); }
        public static implicit operator CharMediumDescType(DBNull value) { return new CharMediumDescType(null); }
    }
    public class CharShortDescType : StringType
    {
        public override int Length { get => 70; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CharShortDescType(string value) : base(value) { }
        public static implicit operator CharShortDescType(string value) { return new CharShortDescType(value); }
        public static implicit operator CharShortDescType(DBNull value) { return new CharShortDescType(null); }
    }
    public class ChartDPercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private ChartDPercentType(decimal? value) : base(value) { }
        public static implicit operator ChartDPercentType(decimal? value) { return new ChartDPercentType(value); }
        public static implicit operator ChartDPercentType(DBNull value) { return new ChartDPercentType(null); }
    }
    public class ChartDSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ChartDSeqType(short? value) : base(value) { }
        public static implicit operator ChartDSeqType(short? value) { return new ChartDSeqType(value); }
        public static implicit operator ChartDSeqType(DBNull value) { return new ChartDSeqType(null); }
        private ChartDSeqType(int? value) : base(value) { }
        public static implicit operator ChartDSeqType(int? value) { return new ChartDSeqType(value); }
    }
    public class ChartTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ChartTypeType(string value) : base(value) { }
        public static implicit operator ChartTypeType(string value) { return new ChartTypeType(value); }
        public static implicit operator ChartTypeType(DBNull value) { return new ChartTypeType(null); }
    }
    public class ChgNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ChgNumType(int? value) : base(value) { }
        public static implicit operator ChgNumType(int? value) { return new ChgNumType(value); }
        public static implicit operator ChgNumType(DBNull value) { return new ChgNumType(null); }
        private ChgNumType(long? value) : base(value) { }
        public static implicit operator ChgNumType(long? value) { return new ChgNumType(value); }
    }
    public class ChildrenType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ChildrenType(byte? value) : base(value) { }
        public static implicit operator ChildrenType(byte? value) { return new ChildrenType(value); }
        public static implicit operator ChildrenType(DBNull value) { return new ChildrenType(null); }
        private ChildrenType(int? value) : base(value) { }
        public static implicit operator ChildrenType(int? value) { return new ChildrenType(value); }
    }
    public class CityType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CityType(string value) : base(value) { }
        public static implicit operator CityType(string value) { return new CityType(value); }
        public static implicit operator CityType(DBNull value) { return new CityType(null); }
    }
    public class ClassNameType : StringType
    {
        public override int Length { get => 64; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ClassNameType(string value) : base(value) { }
        public static implicit operator ClassNameType(string value) { return new ClassNameType(value); }
        public static implicit operator ClassNameType(DBNull value) { return new ClassNameType(null); }
    }
    public class ClientCalendarChangeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ClientCalendarChangeType(string value) : base(value) { }
        public static implicit operator ClientCalendarChangeType(string value) { return new ClientCalendarChangeType(value); }
        public static implicit operator ClientCalendarChangeType(DBNull value) { return new ClientCalendarChangeType(null); }
    }
    public class ClientCalendarType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ClientCalendarType(string value) : base(value) { }
        public static implicit operator ClientCalendarType(string value) { return new ClientCalendarType(value); }
        public static implicit operator ClientCalendarType(DBNull value) { return new ClientCalendarType(null); }
    }
    public class ClientMessageFormatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ClientMessageFormatType(string value) : base(value) { }
        public static implicit operator ClientMessageFormatType(string value) { return new ClientMessageFormatType(value); }
        public static implicit operator ClientMessageFormatType(DBNull value) { return new ClientMessageFormatType(null); }
    }
    public class ClientObjectSyncHashKeyType : BinaryType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ClientObjectSyncHashKeyType(Byte[] value) : base(value) { }
        public static implicit operator ClientObjectSyncHashKeyType(Byte[] value) { return new ClientObjectSyncHashKeyType(value); }
        public static implicit operator ClientObjectSyncHashKeyType(DBNull value) { return new ClientObjectSyncHashKeyType(null); }
    }
    public class CN_NotesType : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CN_NotesType(string value) : base(value) { }
        public static implicit operator CN_NotesType(string value) { return new CN_NotesType(value); }
        public static implicit operator CN_NotesType(DBNull value) { return new CN_NotesType(null); }
    }
    public class CNCommentType : StringType
    {
        public override int Length { get => 320; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CNCommentType(string value) : base(value) { }
        public static implicit operator CNCommentType(string value) { return new CNCommentType(value); }
        public static implicit operator CNCommentType(DBNull value) { return new CNCommentType(null); }
    }
    public class CNItemTaxCategoryType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CNItemTaxCategoryType(string value) : base(value) { }
        public static implicit operator CNItemTaxCategoryType(string value) { return new CNItemTaxCategoryType(value); }
        public static implicit operator CNItemTaxCategoryType(DBNull value) { return new CNItemTaxCategoryType(null); }
    }
    public class CNLongBankAccountType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CNLongBankAccountType(string value) : base(value) { }
        public static implicit operator CNLongBankAccountType(string value) { return new CNLongBankAccountType(value); }
        public static implicit operator CNLongBankAccountType(DBNull value) { return new CNLongBankAccountType(null); }
    }
    public class CNVATStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CNVATStatusType(string value) : base(value) { }
        public static implicit operator CNVATStatusType(string value) { return new CNVATStatusType(value); }
        public static implicit operator CNVATStatusType(DBNull value) { return new CNVATStatusType(null); }
    }
    public class CoBlnStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoBlnStatusType(string value) : base(value) { }
        public static implicit operator CoBlnStatusType(string value) { return new CoBlnStatusType(value); }
        public static implicit operator CoBlnStatusType(DBNull value) { return new CoBlnStatusType(null); }
    }
    public class CoConvertToType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoConvertToType(string value) : base(value) { }
        public static implicit operator CoConvertToType(string value) { return new CoConvertToType(value); }
        public static implicit operator CoConvertToType(DBNull value) { return new CoConvertToType(null); }
    }
    public class CoCustPoProjRmaTrnVendNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoCustPoProjRmaTrnVendNumType(string value) : base(value) { }
        public static implicit operator CoCustPoProjRmaTrnVendNumType(string value) { return new CoCustPoProjRmaTrnVendNumType(value); }
        public static implicit operator CoCustPoProjRmaTrnVendNumType(DBNull value) { return new CoCustPoProjRmaTrnVendNumType(null); }
    }
    public class CoitemStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoitemStatusType(string value) : base(value) { }
        public static implicit operator CoitemStatusType(string value) { return new CoitemStatusType(value); }
        public static implicit operator CoitemStatusType(DBNull value) { return new CoitemStatusType(null); }
    }
    public class CoJobPrjType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoJobPrjType(string value) : base(value) { }
        public static implicit operator CoJobPrjType(string value) { return new CoJobPrjType(value); }
        public static implicit operator CoJobPrjType(DBNull value) { return new CoJobPrjType(null); }
    }
    public class CoJobProjTrnNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoJobProjTrnNumType(string value) : base(value) { }
        public static implicit operator CoJobProjTrnNumType(string value) { return new CoJobProjTrnNumType(value); }
        public static implicit operator CoJobProjTrnNumType(DBNull value) { return new CoJobProjTrnNumType(null); }
    }
    public class CoLineProjTaskPoRmaTrnLineInvNumVoucherType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoLineProjTaskPoRmaTrnLineInvNumVoucherType(string value) : base(value) { }
        public static implicit operator CoLineProjTaskPoRmaTrnLineInvNumVoucherType(string value) { return new CoLineProjTaskPoRmaTrnLineInvNumVoucherType(value); }
        public static implicit operator CoLineProjTaskPoRmaTrnLineInvNumVoucherType(DBNull value) { return new CoLineProjTaskPoRmaTrnLineInvNumVoucherType(null); }
    }
    public class CoLineProjTaskTrnLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoLineProjTaskTrnLineType(short? value) : base(value) { }
        public static implicit operator CoLineProjTaskTrnLineType(short? value) { return new CoLineProjTaskTrnLineType(value); }
        public static implicit operator CoLineProjTaskTrnLineType(DBNull value) { return new CoLineProjTaskTrnLineType(null); }
        private CoLineProjTaskTrnLineType(int? value) : base(value) { }
        public static implicit operator CoLineProjTaskTrnLineType(int? value) { return new CoLineProjTaskTrnLineType(value); }
    }
    public class CoLineSuffixPoLineProjTaskRmaTrnLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoLineSuffixPoLineProjTaskRmaTrnLineType(short? value) : base(value) { }
        public static implicit operator CoLineSuffixPoLineProjTaskRmaTrnLineType(short? value) { return new CoLineSuffixPoLineProjTaskRmaTrnLineType(value); }
        public static implicit operator CoLineSuffixPoLineProjTaskRmaTrnLineType(DBNull value) { return new CoLineSuffixPoLineProjTaskRmaTrnLineType(null); }
        private CoLineSuffixPoLineProjTaskRmaTrnLineType(int? value) : base(value) { }
        public static implicit operator CoLineSuffixPoLineProjTaskRmaTrnLineType(int? value) { return new CoLineSuffixPoLineProjTaskRmaTrnLineType(value); }
    }
    public class CoLineSuffixProjTaskTrnLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoLineSuffixProjTaskTrnLineType(short? value) : base(value) { }
        public static implicit operator CoLineSuffixProjTaskTrnLineType(short? value) { return new CoLineSuffixProjTaskTrnLineType(value); }
        public static implicit operator CoLineSuffixProjTaskTrnLineType(DBNull value) { return new CoLineSuffixProjTaskTrnLineType(null); }
        private CoLineSuffixProjTaskTrnLineType(int? value) : base(value) { }
        public static implicit operator CoLineSuffixProjTaskTrnLineType(int? value) { return new CoLineSuffixProjTaskTrnLineType(value); }
    }
    public class CoLineSuffixProjTaskType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoLineSuffixProjTaskType(short? value) : base(value) { }
        public static implicit operator CoLineSuffixProjTaskType(short? value) { return new CoLineSuffixProjTaskType(value); }
        public static implicit operator CoLineSuffixProjTaskType(DBNull value) { return new CoLineSuffixProjTaskType(null); }
        private CoLineSuffixProjTaskType(int? value) : base(value) { }
        public static implicit operator CoLineSuffixProjTaskType(int? value) { return new CoLineSuffixProjTaskType(value); }
    }
    public class CoLineSuffixType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoLineSuffixType(short? value) : base(value) { }
        public static implicit operator CoLineSuffixType(short? value) { return new CoLineSuffixType(value); }
        public static implicit operator CoLineSuffixType(DBNull value) { return new CoLineSuffixType(null); }
        private CoLineSuffixType(int? value) : base(value) { }
        public static implicit operator CoLineSuffixType(int? value) { return new CoLineSuffixType(value); }
    }
    public class CoLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoLineType(short? value) : base(value) { }
        public static implicit operator CoLineType(short? value) { return new CoLineType(value); }
        public static implicit operator CoLineType(DBNull value) { return new CoLineType(null); }
        private CoLineType(int? value) : base(value) { }
        public static implicit operator CoLineType(int? value) { return new CoLineType(value); }
    }
    public class CollectionActionType : StringType
    {
        public override int Length { get => 32; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CollectionActionType(string value) : base(value) { }
        public static implicit operator CollectionActionType(string value) { return new CollectionActionType(value); }
        public static implicit operator CollectionActionType(DBNull value) { return new CollectionActionType(null); }
    }
    public class CollectionFilterType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CollectionFilterType(string value) : base(value) { }
        public static implicit operator CollectionFilterType(string value) { return new CollectionFilterType(value); }
        public static implicit operator CollectionFilterType(DBNull value) { return new CollectionFilterType(null); }
    }
    public class CollectionNameType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CollectionNameType(string value) : base(value) { }
        public static implicit operator CollectionNameType(string value) { return new CollectionNameType(value); }
        public static implicit operator CollectionNameType(DBNull value) { return new CollectionNameType(null); }
    }
    public class CollectionPropertyDataTypeType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CollectionPropertyDataTypeType(string value) : base(value) { }
        public static implicit operator CollectionPropertyDataTypeType(string value) { return new CollectionPropertyDataTypeType(value); }
        public static implicit operator CollectionPropertyDataTypeType(DBNull value) { return new CollectionPropertyDataTypeType(null); }
    }
    public class CollectionPropertyNameType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CollectionPropertyNameType(string value) : base(value) { }
        public static implicit operator CollectionPropertyNameType(string value) { return new CollectionPropertyNameType(value); }
        public static implicit operator CollectionPropertyNameType(DBNull value) { return new CollectionPropertyNameType(null); }
    }
    public class CollectionPropertyPathType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CollectionPropertyPathType(string value) : base(value) { }
        public static implicit operator CollectionPropertyPathType(string value) { return new CollectionPropertyPathType(value); }
        public static implicit operator CollectionPropertyPathType(DBNull value) { return new CollectionPropertyPathType(null); }
    }
    public class CollectionSortType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CollectionSortType(string value) : base(value) { }
        public static implicit operator CollectionSortType(string value) { return new CollectionSortType(value); }
        public static implicit operator CollectionSortType(DBNull value) { return new CollectionSortType(null); }
    }
    public class ColumnNameType : StringType
    {
        public override int Length { get => 256; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ColumnNameType(string value) : base(value) { }
        public static implicit operator ColumnNameType(string value) { return new ColumnNameType(value); }
        public static implicit operator ColumnNameType(DBNull value) { return new ColumnNameType(null); }
    }
    public class ColumnPrecisionType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ColumnPrecisionType(short? value) : base(value) { }
        public static implicit operator ColumnPrecisionType(short? value) { return new ColumnPrecisionType(value); }
        public static implicit operator ColumnPrecisionType(DBNull value) { return new ColumnPrecisionType(null); }
        private ColumnPrecisionType(int? value) : base(value) { }
        public static implicit operator ColumnPrecisionType(int? value) { return new ColumnPrecisionType(value); }
    }
    public class ColumnScaleType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ColumnScaleType(byte? value) : base(value) { }
        public static implicit operator ColumnScaleType(byte? value) { return new ColumnScaleType(value); }
        public static implicit operator ColumnScaleType(DBNull value) { return new ColumnScaleType(null); }
        private ColumnScaleType(int? value) : base(value) { }
        public static implicit operator ColumnScaleType(int? value) { return new ColumnScaleType(value); }
    }
    public class ColumnType : StringType
    {
        public override int Length { get => 64; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ColumnType(string value) : base(value) { }
        public static implicit operator ColumnType(string value) { return new ColumnType(value); }
        public static implicit operator ColumnType(DBNull value) { return new ColumnType(null); }
    }
    public class ComboClassType : StringType
    {
        public override int Length { get => 70; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ComboClassType(string value) : base(value) { }
        public static implicit operator ComboClassType(string value) { return new ComboClassType(value); }
        public static implicit operator ComboClassType(DBNull value) { return new ComboClassType(null); }
    }
    public class ComboLabelType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ComboLabelType(string value) : base(value) { }
        public static implicit operator ComboLabelType(string value) { return new ComboLabelType(value); }
        public static implicit operator ComboLabelType(DBNull value) { return new ComboLabelType(null); }
    }
    public class ComboValueType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ComboValueType(string value) : base(value) { }
        public static implicit operator ComboValueType(string value) { return new ComboValueType(value); }
        public static implicit operator ComboValueType(DBNull value) { return new ComboValueType(null); }
    }
    public class ComboWidthType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ComboWidthType(byte? value) : base(value) { }
        public static implicit operator ComboWidthType(byte? value) { return new ComboWidthType(value); }
        public static implicit operator ComboWidthType(DBNull value) { return new ComboWidthType(null); }
        private ComboWidthType(int? value) : base(value) { }
        public static implicit operator ComboWidthType(int? value) { return new ComboWidthType(value); }
    }
    public class CommdueSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CommdueSeqType(int? value) : base(value) { }
        public static implicit operator CommdueSeqType(int? value) { return new CommdueSeqType(value); }
        public static implicit operator CommdueSeqType(DBNull value) { return new CommdueSeqType(null); }
        private CommdueSeqType(long? value) : base(value) { }
        public static implicit operator CommdueSeqType(long? value) { return new CommdueSeqType(value); }
    }
    public class CommdueStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CommdueStatusType(string value) : base(value) { }
        public static implicit operator CommdueStatusType(string value) { return new CommdueStatusType(value); }
        public static implicit operator CommdueStatusType(DBNull value) { return new CommdueStatusType(null); }
    }
    public class CommLogNotesType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CommLogNotesType(string value) : base(value) { }
        public static implicit operator CommLogNotesType(string value) { return new CommLogNotesType(value); }
        public static implicit operator CommLogNotesType(DBNull value) { return new CommLogNotesType(null); }
    }
    public class CommLogStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CommLogStatusType(string value) : base(value) { }
        public static implicit operator CommLogStatusType(string value) { return new CommLogStatusType(value); }
        public static implicit operator CommLogStatusType(DBNull value) { return new CommLogStatusType(null); }
    }
    public class CommLogTopicType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CommLogTopicType(string value) : base(value) { }
        public static implicit operator CommLogTopicType(string value) { return new CommLogTopicType(value); }
        public static implicit operator CommLogTopicType(DBNull value) { return new CommLogTopicType(null); }
    }
    public class CommLogTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CommLogTypeType(string value) : base(value) { }
        public static implicit operator CommLogTypeType(string value) { return new CommLogTypeType(value); }
        public static implicit operator CommLogTypeType(DBNull value) { return new CommLogTypeType(null); }
    }
    public class CommodityCodeType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CommodityCodeType(string value) : base(value) { }
        public static implicit operator CommodityCodeType(string value) { return new CommodityCodeType(value); }
        public static implicit operator CommodityCodeType(DBNull value) { return new CommodityCodeType(null); }
    }
    public class CommodityJurisdictionType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CommodityJurisdictionType(string value) : base(value) { }
        public static implicit operator CommodityJurisdictionType(string value) { return new CommodityJurisdictionType(value); }
        public static implicit operator CommodityJurisdictionType(DBNull value) { return new CommodityJurisdictionType(null); }
    }
    public class CommPercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 7; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private CommPercentType(decimal? value) : base(value) { }
        public static implicit operator CommPercentType(decimal? value) { return new CommPercentType(value); }
        public static implicit operator CommPercentType(DBNull value) { return new CommPercentType(null); }
    }
    public class CommtabField1Type : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CommtabField1Type(string value) : base(value) { }
        public static implicit operator CommtabField1Type(string value) { return new CommtabField1Type(value); }
        public static implicit operator CommtabField1Type(DBNull value) { return new CommtabField1Type(null); }
    }
    public class CommtabField2Type : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CommtabField2Type(string value) : base(value) { }
        public static implicit operator CommtabField2Type(string value) { return new CommtabField2Type(value); }
        public static implicit operator CommtabField2Type(DBNull value) { return new CommtabField2Type(null); }
    }
    public class CommtabValueType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 7; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private CommtabValueType(decimal? value) : base(value) { }
        public static implicit operator CommtabValueType(decimal? value) { return new CommtabValueType(value); }
        public static implicit operator CommtabValueType(DBNull value) { return new CommtabValueType(null); }
    }
    public class CompanyAddrBlockType : StringType
    {
        public override int Length { get => 676; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CompanyAddrBlockType(string value) : base(value) { }
        public static implicit operator CompanyAddrBlockType(string value) { return new CompanyAddrBlockType(value); }
        public static implicit operator CompanyAddrBlockType(DBNull value) { return new CompanyAddrBlockType(null); }
    }
    public class CompetitorIdType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CompetitorIdType(string value) : base(value) { }
        public static implicit operator CompetitorIdType(string value) { return new CompetitorIdType(value); }
        public static implicit operator CompetitorIdType(DBNull value) { return new CompetitorIdType(null); }
    }
    public class ComplianceProgramIdType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ComplianceProgramIdType(string value) : base(value) { }
        public static implicit operator ComplianceProgramIdType(string value) { return new ComplianceProgramIdType(value); }
        public static implicit operator ComplianceProgramIdType(DBNull value) { return new ComplianceProgramIdType(null); }
    }
    public class CompNumType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CompNumType(string value) : base(value) { }
        public static implicit operator CompNumType(string value) { return new CompNumType(value); }
        public static implicit operator CompNumType(DBNull value) { return new CompNumType(null); }
    }
    public class ConfigAttrNameType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigAttrNameType(string value) : base(value) { }
        public static implicit operator ConfigAttrNameType(string value) { return new ConfigAttrNameType(value); }
        public static implicit operator ConfigAttrNameType(DBNull value) { return new ConfigAttrNameType(null); }
    }
    public class ConfigAttrTypeType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigAttrTypeType(string value) : base(value) { }
        public static implicit operator ConfigAttrTypeType(string value) { return new ConfigAttrTypeType(value); }
        public static implicit operator ConfigAttrTypeType(DBNull value) { return new ConfigAttrTypeType(null); }
    }
    public class ConfigAttrValueType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigAttrValueType(string value) : base(value) { }
        public static implicit operator ConfigAttrValueType(string value) { return new ConfigAttrValueType(value); }
        public static implicit operator ConfigAttrValueType(DBNull value) { return new ConfigAttrValueType(null); }
    }
    public class ConfigAutoCreateItemType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigAutoCreateItemType(string value) : base(value) { }
        public static implicit operator ConfigAutoCreateItemType(string value) { return new ConfigAutoCreateItemType(value); }
        public static implicit operator ConfigAutoCreateItemType(DBNull value) { return new ConfigAutoCreateItemType(null); }
    }
    public class ConfigAutoJobType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigAutoJobType(string value) : base(value) { }
        public static implicit operator ConfigAutoJobType(string value) { return new ConfigAutoJobType(value); }
        public static implicit operator ConfigAutoJobType(DBNull value) { return new ConfigAutoJobType(null); }
    }
    public class ConfigAutoPostType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigAutoPostType(string value) : base(value) { }
        public static implicit operator ConfigAutoPostType(string value) { return new ConfigAutoPostType(value); }
        public static implicit operator ConfigAutoPostType(DBNull value) { return new ConfigAutoPostType(null); }
    }
    public class ConfigCompIdType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigCompIdType(string value) : base(value) { }
        public static implicit operator ConfigCompIdType(string value) { return new ConfigCompIdType(value); }
        public static implicit operator ConfigCompIdType(DBNull value) { return new ConfigCompIdType(null); }
    }
    public class ConfigCompNameType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigCompNameType(string value) : base(value) { }
        public static implicit operator ConfigCompNameType(string value) { return new ConfigCompNameType(value); }
        public static implicit operator ConfigCompNameType(DBNull value) { return new ConfigCompNameType(null); }
    }
    public class ConfigCompNumType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigCompNumType(string value) : base(value) { }
        public static implicit operator ConfigCompNumType(string value) { return new ConfigCompNumType(value); }
        public static implicit operator ConfigCompNumType(DBNull value) { return new ConfigCompNumType(null); }
    }
    public class ConfigCompTypeType : StringType
    {
        public override int Length { get => 10; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigCompTypeType(string value) : base(value) { }
        public static implicit operator ConfigCompTypeType(string value) { return new ConfigCompTypeType(value); }
        public static implicit operator ConfigCompTypeType(DBNull value) { return new ConfigCompTypeType(null); }
    }
    public class ConfigEntryPointType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigEntryPointType(string value) : base(value) { }
        public static implicit operator ConfigEntryPointType(string value) { return new ConfigEntryPointType(value); }
        public static implicit operator ConfigEntryPointType(DBNull value) { return new ConfigEntryPointType(null); }
    }
    public class ConfigFormNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigFormNameType(string value) : base(value) { }
        public static implicit operator ConfigFormNameType(string value) { return new ConfigFormNameType(value); }
        public static implicit operator ConfigFormNameType(DBNull value) { return new ConfigFormNameType(null); }
    }
    public class ConfigGID2Type : StringType
    {
        public override int Length { get => 72; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigGID2Type(string value) : base(value) { }
        public static implicit operator ConfigGID2Type(string value) { return new ConfigGID2Type(value); }
        public static implicit operator ConfigGID2Type(DBNull value) { return new ConfigGID2Type(null); }
    }
    public class ConfigGIDType : StringType
    {
        public override int Length { get => 64; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigGIDType(string value) : base(value) { }
        public static implicit operator ConfigGIDType(string value) { return new ConfigGIDType(value); }
        public static implicit operator ConfigGIDType(DBNull value) { return new ConfigGIDType(null); }
    }
    public class ConfigIdType : StringType
    {
        public override int Length { get => 64; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigIdType(string value) : base(value) { }
        public static implicit operator ConfigIdType(string value) { return new ConfigIdType(value); }
        public static implicit operator ConfigIdType(DBNull value) { return new ConfigIdType(null); }
    }
    public class ConfigModelType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigModelType(string value) : base(value) { }
        public static implicit operator ConfigModelType(string value) { return new ConfigModelType(value); }
        public static implicit operator ConfigModelType(DBNull value) { return new ConfigModelType(null); }
    }
    public class ConfigNameSpaceType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigNameSpaceType(string value) : base(value) { }
        public static implicit operator ConfigNameSpaceType(string value) { return new ConfigNameSpaceType(value); }
        public static implicit operator ConfigNameSpaceType(DBNull value) { return new ConfigNameSpaceType(null); }
    }
    public class ConfigPostConfigType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigPostConfigType(string value) : base(value) { }
        public static implicit operator ConfigPostConfigType(string value) { return new ConfigPostConfigType(value); }
        public static implicit operator ConfigPostConfigType(DBNull value) { return new ConfigPostConfigType(null); }
    }
    public class ConfigPrintFlagType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigPrintFlagType(string value) : base(value) { }
        public static implicit operator ConfigPrintFlagType(string value) { return new ConfigPrintFlagType(value); }
        public static implicit operator ConfigPrintFlagType(DBNull value) { return new ConfigPrintFlagType(null); }
    }
    public class ConfigRefLineSufType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigRefLineSufType(int? value) : base(value) { }
        public static implicit operator ConfigRefLineSufType(int? value) { return new ConfigRefLineSufType(value); }
        public static implicit operator ConfigRefLineSufType(DBNull value) { return new ConfigRefLineSufType(null); }
        private ConfigRefLineSufType(long? value) : base(value) { }
        public static implicit operator ConfigRefLineSufType(long? value) { return new ConfigRefLineSufType(value); }
    }
    public class ConfigRefNumType : StringType
    {
        public override int Length { get => 64; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigRefNumType(string value) : base(value) { }
        public static implicit operator ConfigRefNumType(string value) { return new ConfigRefNumType(value); }
        public static implicit operator ConfigRefNumType(DBNull value) { return new ConfigRefNumType(null); }
    }
    public class ConfigRefTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigRefTypeType(string value) : base(value) { }
        public static implicit operator ConfigRefTypeType(string value) { return new ConfigRefTypeType(value); }
        public static implicit operator ConfigRefTypeType(DBNull value) { return new ConfigRefTypeType(null); }
    }
    public class ConfigRuleSetType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigRuleSetType(string value) : base(value) { }
        public static implicit operator ConfigRuleSetType(string value) { return new ConfigRuleSetType(value); }
        public static implicit operator ConfigRuleSetType(DBNull value) { return new ConfigRuleSetType(null); }
    }
    public class ConfigSlFieldType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigSlFieldType(string value) : base(value) { }
        public static implicit operator ConfigSlFieldType(string value) { return new ConfigSlFieldType(value); }
        public static implicit operator ConfigSlFieldType(DBNull value) { return new ConfigSlFieldType(null); }
    }
    public class ConfigStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigStatusType(string value) : base(value) { }
        public static implicit operator ConfigStatusType(string value) { return new ConfigStatusType(value); }
        public static implicit operator ConfigStatusType(DBNull value) { return new ConfigStatusType(null); }
    }
    public class ConfigTypeType : StringType
    {
        public override int Length { get => 48; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigTypeType(string value) : base(value) { }
        public static implicit operator ConfigTypeType(string value) { return new ConfigTypeType(value); }
        public static implicit operator ConfigTypeType(DBNull value) { return new ConfigTypeType(null); }
    }
    public class ConfigurationNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigurationNameType(string value) : base(value) { }
        public static implicit operator ConfigurationNameType(string value) { return new ConfigurationNameType(value); }
        public static implicit operator ConfigurationNameType(DBNull value) { return new ConfigurationNameType(null); }
    }
    public class ConfiguratorAuthKeyType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfiguratorAuthKeyType(string value) : base(value) { }
        public static implicit operator ConfiguratorAuthKeyType(string value) { return new ConfiguratorAuthKeyType(value); }
        public static implicit operator ConfiguratorAuthKeyType(DBNull value) { return new ConfiguratorAuthKeyType(null); }
    }
    public class ConfiguratorDefaultProfile : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfiguratorDefaultProfile(string value) : base(value) { }
        public static implicit operator ConfiguratorDefaultProfile(string value) { return new ConfiguratorDefaultProfile(value); }
        public static implicit operator ConfiguratorDefaultProfile(DBNull value) { return new ConfiguratorDefaultProfile(null); }
    }
    public class ConfiguratorServerIdType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfiguratorServerIdType(string value) : base(value) { }
        public static implicit operator ConfiguratorServerIdType(string value) { return new ConfiguratorServerIdType(value); }
        public static implicit operator ConfiguratorServerIdType(DBNull value) { return new ConfiguratorServerIdType(null); }
    }
    public class ConfiguratorType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfiguratorType(string value) : base(value) { }
        public static implicit operator ConfiguratorType(string value) { return new ConfiguratorType(value); }
        public static implicit operator ConfiguratorType(DBNull value) { return new ConfiguratorType(null); }
    }
    public class ConfiguratorUserInterfaceType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfiguratorUserInterfaceType(string value) : base(value) { }
        public static implicit operator ConfiguratorUserInterfaceType(string value) { return new ConfiguratorUserInterfaceType(value); }
        public static implicit operator ConfiguratorUserInterfaceType(DBNull value) { return new ConfiguratorUserInterfaceType(null); }
    }
    public class ConfigUserInterfaceType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConfigUserInterfaceType(string value) : base(value) { }
        public static implicit operator ConfigUserInterfaceType(string value) { return new ConfigUserInterfaceType(value); }
        public static implicit operator ConfigUserInterfaceType(DBNull value) { return new ConfigUserInterfaceType(null); }
    }
    public class ConInvSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConInvSeqType(short? value) : base(value) { }
        public static implicit operator ConInvSeqType(short? value) { return new ConInvSeqType(value); }
        public static implicit operator ConInvSeqType(DBNull value) { return new ConInvSeqType(null); }
        private ConInvSeqType(int? value) : base(value) { }
        public static implicit operator ConInvSeqType(int? value) { return new ConInvSeqType(value); }
    }
    public class ConsignmentsType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConsignmentsType(int? value) : base(value) { }
        public static implicit operator ConsignmentsType(int? value) { return new ConsignmentsType(value); }
        public static implicit operator ConsignmentsType(DBNull value) { return new ConsignmentsType(null); }
        private ConsignmentsType(long? value) : base(value) { }
        public static implicit operator ConsignmentsType(long? value) { return new ConsignmentsType(value); }
    }
    public class ConsignmentTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ConsignmentTypeType(string value) : base(value) { }
        public static implicit operator ConsignmentTypeType(string value) { return new ConsignmentTypeType(value); }
        public static implicit operator ConsignmentTypeType(DBNull value) { return new ConsignmentTypeType(null); }
    }
    public class ContactIDType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ContactIDType(string value) : base(value) { }
        public static implicit operator ContactIDType(string value) { return new ContactIDType(value); }
        public static implicit operator ContactIDType(DBNull value) { return new ContactIDType(null); }
    }
    public class ContactMethodType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ContactMethodType(string value) : base(value) { }
        public static implicit operator ContactMethodType(string value) { return new ContactMethodType(value); }
        public static implicit operator ContactMethodType(DBNull value) { return new ContactMethodType(null); }
    }
    public class ContactType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ContactType(string value) : base(value) { }
        public static implicit operator ContactType(string value) { return new ContactType(value); }
        public static implicit operator ContactType(DBNull value) { return new ContactType(null); }
    }
    public class ContainerNumType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ContainerNumType(string value) : base(value) { }
        public static implicit operator ContainerNumType(string value) { return new ContainerNumType(value); }
        public static implicit operator ContainerNumType(DBNull value) { return new ContainerNumType(null); }
    }
    public class ContainerPrefixType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ContainerPrefixType(string value) : base(value) { }
        public static implicit operator ContainerPrefixType(string value) { return new ContainerPrefixType(value); }
        public static implicit operator ContainerPrefixType(DBNull value) { return new ContainerPrefixType(null); }
    }
    public class ContainerType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ContainerType(string value) : base(value) { }
        public static implicit operator ContainerType(string value) { return new ContainerType(value); }
        public static implicit operator ContainerType(DBNull value) { return new ContainerType(null); }
    }
    public class ContractType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ContractType(string value) : base(value) { }
        public static implicit operator ContractType(string value) { return new ContractType(value); }
        public static implicit operator ContractType(DBNull value) { return new ContractType(null); }
    }
    public class ControlCalendarType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ControlCalendarType(string value) : base(value) { }
        public static implicit operator ControlCalendarType(string value) { return new ControlCalendarType(value); }
        public static implicit operator ControlCalendarType(DBNull value) { return new ControlCalendarType(null); }
    }
    public class CoNumJobType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoNumJobType(string value) : base(value) { }
        public static implicit operator CoNumJobType(string value) { return new CoNumJobType(value); }
        public static implicit operator CoNumJobType(DBNull value) { return new CoNumJobType(null); }
    }
    public class CoNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoNumType(string value) : base(value) { }
        public static implicit operator CoNumType(string value) { return new CoNumType(value); }
        public static implicit operator CoNumType(DBNull value) { return new CoNumType(null); }
    }
    public class CopiesType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CopiesType(byte? value) : base(value) { }
        public static implicit operator CopiesType(byte? value) { return new CopiesType(value); }
        public static implicit operator CopiesType(DBNull value) { return new CopiesType(null); }
        private CopiesType(int? value) : base(value) { }
        public static implicit operator CopiesType(int? value) { return new CopiesType(value); }
    }
    public class CoPoReleaseArInvSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoPoReleaseArInvSeqType(int? value) : base(value) { }
        public static implicit operator CoPoReleaseArInvSeqType(int? value) { return new CoPoReleaseArInvSeqType(value); }
        public static implicit operator CoPoReleaseArInvSeqType(DBNull value) { return new CoPoReleaseArInvSeqType(null); }
        private CoPoReleaseArInvSeqType(long? value) : base(value) { }
        public static implicit operator CoPoReleaseArInvSeqType(long? value) { return new CoPoReleaseArInvSeqType(value); }
    }
    public class CoPoReleaseType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoPoReleaseType(short? value) : base(value) { }
        public static implicit operator CoPoReleaseType(short? value) { return new CoPoReleaseType(value); }
        public static implicit operator CoPoReleaseType(DBNull value) { return new CoPoReleaseType(null); }
        private CoPoReleaseType(int? value) : base(value) { }
        public static implicit operator CoPoReleaseType(int? value) { return new CoPoReleaseType(value); }
    }
    public class CoPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoPrefixType(string value) : base(value) { }
        public static implicit operator CoPrefixType(string value) { return new CoPrefixType(value); }
        public static implicit operator CoPrefixType(DBNull value) { return new CoPrefixType(null); }
    }
    public class CoProductMixType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoProductMixType(byte? value) : base(value) { }
        public static implicit operator CoProductMixType(byte? value) { return new CoProductMixType(value); }
        public static implicit operator CoProductMixType(DBNull value) { return new CoProductMixType(null); }
        private CoProductMixType(int? value) : base(value) { }
        public static implicit operator CoProductMixType(int? value) { return new CoProductMixType(value); }
    }
    public class CoProjTaskTrnLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoProjTaskTrnLineType(short? value) : base(value) { }
        public static implicit operator CoProjTaskTrnLineType(short? value) { return new CoProjTaskTrnLineType(value); }
        public static implicit operator CoProjTaskTrnLineType(DBNull value) { return new CoProjTaskTrnLineType(null); }
        private CoProjTaskTrnLineType(int? value) : base(value) { }
        public static implicit operator CoProjTaskTrnLineType(int? value) { return new CoProjTaskTrnLineType(value); }
    }
    public class CoProjTrnNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoProjTrnNumType(string value) : base(value) { }
        public static implicit operator CoProjTrnNumType(string value) { return new CoProjTrnNumType(value); }
        public static implicit operator CoProjTrnNumType(DBNull value) { return new CoProjTrnNumType(null); }
    }
    public class CoReleaseOperNumPoReleaseType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoReleaseOperNumPoReleaseType(short? value) : base(value) { }
        public static implicit operator CoReleaseOperNumPoReleaseType(short? value) { return new CoReleaseOperNumPoReleaseType(value); }
        public static implicit operator CoReleaseOperNumPoReleaseType(DBNull value) { return new CoReleaseOperNumPoReleaseType(null); }
        private CoReleaseOperNumPoReleaseType(int? value) : base(value) { }
        public static implicit operator CoReleaseOperNumPoReleaseType(int? value) { return new CoReleaseOperNumPoReleaseType(value); }
    }
    public class CoReleaseOperNumType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoReleaseOperNumType(short? value) : base(value) { }
        public static implicit operator CoReleaseOperNumType(short? value) { return new CoReleaseOperNumType(value); }
        public static implicit operator CoReleaseOperNumType(DBNull value) { return new CoReleaseOperNumType(null); }
        private CoReleaseOperNumType(int? value) : base(value) { }
        public static implicit operator CoReleaseOperNumType(int? value) { return new CoReleaseOperNumType(value); }
    }
    public class CoReleaseProjmatlSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoReleaseProjmatlSeqType(short? value) : base(value) { }
        public static implicit operator CoReleaseProjmatlSeqType(short? value) { return new CoReleaseProjmatlSeqType(value); }
        public static implicit operator CoReleaseProjmatlSeqType(DBNull value) { return new CoReleaseProjmatlSeqType(null); }
        private CoReleaseProjmatlSeqType(int? value) : base(value) { }
        public static implicit operator CoReleaseProjmatlSeqType(int? value) { return new CoReleaseProjmatlSeqType(value); }
    }
    public class CoReleaseType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoReleaseType(short? value) : base(value) { }
        public static implicit operator CoReleaseType(short? value) { return new CoReleaseType(value); }
        public static implicit operator CoReleaseType(DBNull value) { return new CoReleaseType(null); }
        private CoReleaseType(int? value) : base(value) { }
        public static implicit operator CoReleaseType(int? value) { return new CoReleaseType(value); }
    }
    public class CoShipApprovalLogSequenceType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoShipApprovalLogSequenceType(int? value) : base(value) { }
        public static implicit operator CoShipApprovalLogSequenceType(int? value) { return new CoShipApprovalLogSequenceType(value); }
        public static implicit operator CoShipApprovalLogSequenceType(DBNull value) { return new CoShipApprovalLogSequenceType(null); }
        private CoShipApprovalLogSequenceType(long? value) : base(value) { }
        public static implicit operator CoShipApprovalLogSequenceType(long? value) { return new CoShipApprovalLogSequenceType(value); }
    }
    public class CoSlsCommSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoSlsCommSeqType(short? value) : base(value) { }
        public static implicit operator CoSlsCommSeqType(short? value) { return new CoSlsCommSeqType(value); }
        public static implicit operator CoSlsCommSeqType(DBNull value) { return new CoSlsCommSeqType(null); }
        private CoSlsCommSeqType(int? value) : base(value) { }
        public static implicit operator CoSlsCommSeqType(int? value) { return new CoSlsCommSeqType(value); }
    }
    public class CoStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoStatusType(string value) : base(value) { }
        public static implicit operator CoStatusType(string value) { return new CoStatusType(value); }
        public static implicit operator CoStatusType(DBNull value) { return new CoStatusType(null); }
    }
    public class CostCodeClassType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CostCodeClassType(string value) : base(value) { }
        public static implicit operator CostCodeClassType(string value) { return new CostCodeClassType(value); }
        public static implicit operator CostCodeClassType(DBNull value) { return new CostCodeClassType(null); }
    }
    public class CostCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CostCodeType(string value) : base(value) { }
        public static implicit operator CostCodeType(string value) { return new CostCodeType(value); }
        public static implicit operator CostCodeType(DBNull value) { return new CostCodeType(null); }
    }
    public class CostCodeTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CostCodeTypeType(string value) : base(value) { }
        public static implicit operator CostCodeTypeType(string value) { return new CostCodeTypeType(value); }
        public static implicit operator CostCodeTypeType(DBNull value) { return new CostCodeTypeType(null); }
    }
    public class CostingAlternativeType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CostingAlternativeType(string value) : base(value) { }
        public static implicit operator CostingAlternativeType(string value) { return new CostingAlternativeType(value); }
        public static implicit operator CostingAlternativeType(DBNull value) { return new CostingAlternativeType(null); }
    }
    public class CostMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CostMethodType(string value) : base(value) { }
        public static implicit operator CostMethodType(string value) { return new CostMethodType(value); }
        public static implicit operator CostMethodType(DBNull value) { return new CostMethodType(null); }
    }
    public class CostPrcNoNegType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private CostPrcNoNegType(decimal? value) : base(value) { }
        public static implicit operator CostPrcNoNegType(decimal? value) { return new CostPrcNoNegType(value); }
        public static implicit operator CostPrcNoNegType(DBNull value) { return new CostPrcNoNegType(null); }
    }
    public class CostPrcType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private CostPrcType(decimal? value) : base(value) { }
        public static implicit operator CostPrcType(decimal? value) { return new CostPrcType(value); }
        public static implicit operator CostPrcType(DBNull value) { return new CostPrcType(null); }
    }
    public class CostTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CostTypeType(string value) : base(value) { }
        public static implicit operator CostTypeType(string value) { return new CostTypeType(value); }
        public static implicit operator CostTypeType(DBNull value) { return new CostTypeType(null); }
    }
    public class CoTrnLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoTrnLineType(short? value) : base(value) { }
        public static implicit operator CoTrnLineType(short? value) { return new CoTrnLineType(value); }
        public static implicit operator CoTrnLineType(DBNull value) { return new CoTrnLineType(null); }
        private CoTrnLineType(int? value) : base(value) { }
        public static implicit operator CoTrnLineType(int? value) { return new CoTrnLineType(value); }
    }
    public class CoTrnNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoTrnNumType(string value) : base(value) { }
        public static implicit operator CoTrnNumType(string value) { return new CoTrnNumType(value); }
        public static implicit operator CoTrnNumType(DBNull value) { return new CoTrnNumType(null); }
    }
    public class CoTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CoTypeType(string value) : base(value) { }
        public static implicit operator CoTypeType(string value) { return new CoTypeType(value); }
        public static implicit operator CoTypeType(DBNull value) { return new CoTypeType(null); }
    }
    public class CountryCodeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CountryCodeType(string value) : base(value) { }
        public static implicit operator CountryCodeType(string value) { return new CountryCodeType(value); }
        public static implicit operator CountryCodeType(DBNull value) { return new CountryCodeType(null); }
    }
    public class CountryPackOptionType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CountryPackOptionType(string value) : base(value) { }
        public static implicit operator CountryPackOptionType(string value) { return new CountryPackOptionType(value); }
        public static implicit operator CountryPackOptionType(DBNull value) { return new CountryPackOptionType(null); }
    }
    public class CountryPackType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CountryPackType(string value) : base(value) { }
        public static implicit operator CountryPackType(string value) { return new CountryPackType(value); }
        public static implicit operator CountryPackType(DBNull value) { return new CountryPackType(null); }
    }
    public class CountrySpecificFieldNameType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CountrySpecificFieldNameType(string value) : base(value) { }
        public static implicit operator CountrySpecificFieldNameType(string value) { return new CountrySpecificFieldNameType(value); }
        public static implicit operator CountrySpecificFieldNameType(DBNull value) { return new CountrySpecificFieldNameType(null); }
    }
    public class CountrySpecificFieldValueType : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CountrySpecificFieldValueType(string value) : base(value) { }
        public static implicit operator CountrySpecificFieldValueType(string value) { return new CountrySpecificFieldValueType(value); }
        public static implicit operator CountrySpecificFieldValueType(DBNull value) { return new CountrySpecificFieldValueType(null); }
    }
    public class CountryType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CountryType(string value) : base(value) { }
        public static implicit operator CountryType(string value) { return new CountryType(value); }
        public static implicit operator CountryType(DBNull value) { return new CountryType(null); }
    }
    public class CountSequenceType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 24; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CountSequenceType(decimal? value) : base(value) { }
        public static implicit operator CountSequenceType(decimal? value) { return new CountSequenceType(value); }
        public static implicit operator CountSequenceType(DBNull value) { return new CountSequenceType(null); }
    }
    public class CountyType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CountyType(string value) : base(value) { }
        public static implicit operator CountyType(string value) { return new CountyType(value); }
        public static implicit operator CountyType(DBNull value) { return new CountyType(null); }
    }
    public class CourseNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CourseNumType(int? value) : base(value) { }
        public static implicit operator CourseNumType(int? value) { return new CourseNumType(value); }
        public static implicit operator CourseNumType(DBNull value) { return new CourseNumType(null); }
        private CourseNumType(long? value) : base(value) { }
        public static implicit operator CourseNumType(long? value) { return new CourseNumType(value); }
    }
    public class CreateFeatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CreateFeatType(string value) : base(value) { }
        public static implicit operator CreateFeatType(string value) { return new CreateFeatType(value); }
        public static implicit operator CreateFeatType(DBNull value) { return new CreateFeatType(null); }
    }
    public class CrewSizeType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private CrewSizeType(decimal? value) : base(value) { }
        public static implicit operator CrewSizeType(decimal? value) { return new CrewSizeType(value); }
        public static implicit operator CrewSizeType(DBNull value) { return new CrewSizeType(null); }
    }
    public class CriterionType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CriterionType(string value) : base(value) { }
        public static implicit operator CriterionType(string value) { return new CriterionType(value); }
        public static implicit operator CriterionType(DBNull value) { return new CriterionType(null); }
    }
    public class CriterionTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CriterionTypeType(string value) : base(value) { }
        public static implicit operator CriterionTypeType(string value) { return new CriterionTypeType(value); }
        public static implicit operator CriterionTypeType(DBNull value) { return new CriterionTypeType(null); }
    }
    public class CtcLogSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CtcLogSeqType(short? value) : base(value) { }
        public static implicit operator CtcLogSeqType(short? value) { return new CtcLogSeqType(value); }
        public static implicit operator CtcLogSeqType(DBNull value) { return new CtcLogSeqType(null); }
        private CtcLogSeqType(int? value) : base(value) { }
        public static implicit operator CtcLogSeqType(int? value) { return new CtcLogSeqType(value); }
    }
    public class CurJobPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CurJobPrefixType(string value) : base(value) { }
        public static implicit operator CurJobPrefixType(string value) { return new CurJobPrefixType(value); }
        public static implicit operator CurJobPrefixType(DBNull value) { return new CurJobPrefixType(null); }
    }
    public class CurrCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CurrCodeType(string value) : base(value) { }
        public static implicit operator CurrCodeType(string value) { return new CurrCodeType(value); }
        public static implicit operator CurrCodeType(DBNull value) { return new CurrCodeType(null); }
    }
    public class CurrencyRateOverrideToleranceAmountType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 12; }
        public override byte Scale { get => 7; }
        public override bool Nullable { get => true; }
        private CurrencyRateOverrideToleranceAmountType(decimal? value) : base(value) { }
        public static implicit operator CurrencyRateOverrideToleranceAmountType(decimal? value) { return new CurrencyRateOverrideToleranceAmountType(value); }
        public static implicit operator CurrencyRateOverrideToleranceAmountType(DBNull value) { return new CurrencyRateOverrideToleranceAmountType(null); }
    }
    public class CurrentDateType : DateTimeType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 23; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private CurrentDateType(DateTime? value) : base(value) { }
        public static implicit operator CurrentDateType(DateTime? value) { return new CurrentDateType(value); }
        public static implicit operator CurrentDateType(DBNull value) { return new CurrentDateType(null); }
    }
    public class CurrSymbolType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CurrSymbolType(string value) : base(value) { }
        public static implicit operator CurrSymbolType(string value) { return new CurrSymbolType(value); }
        public static implicit operator CurrSymbolType(DBNull value) { return new CurrSymbolType(null); }
    }
    public class CurrTransMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CurrTransMethodType(string value) : base(value) { }
        public static implicit operator CurrTransMethodType(string value) { return new CurrTransMethodType(value); }
        public static implicit operator CurrTransMethodType(DBNull value) { return new CurrTransMethodType(null); }
    }
    public class CustDraftEscalationType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustDraftEscalationType(byte? value) : base(value) { }
        public static implicit operator CustDraftEscalationType(byte? value) { return new CustDraftEscalationType(value); }
        public static implicit operator CustDraftEscalationType(DBNull value) { return new CustDraftEscalationType(null); }
        private CustDraftEscalationType(int? value) : base(value) { }
        public static implicit operator CustDraftEscalationType(int? value) { return new CustDraftEscalationType(value); }
    }
    public class CustdrftStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustdrftStatusType(string value) : base(value) { }
        public static implicit operator CustdrftStatusType(string value) { return new CustdrftStatusType(value); }
        public static implicit operator CustdrftStatusType(DBNull value) { return new CustdrftStatusType(null); }
    }
    public class CustEmpVendNumType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustEmpVendNumType(string value) : base(value) { }
        public static implicit operator CustEmpVendNumType(string value) { return new CustEmpVendNumType(value); }
        public static implicit operator CustEmpVendNumType(DBNull value) { return new CustEmpVendNumType(null); }
    }
    public class CustItemRankType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustItemRankType(int? value) : base(value) { }
        public static implicit operator CustItemRankType(int? value) { return new CustItemRankType(value); }
        public static implicit operator CustItemRankType(DBNull value) { return new CustItemRankType(null); }
        private CustItemRankType(long? value) : base(value) { }
        public static implicit operator CustItemRankType(long? value) { return new CustItemRankType(value); }
    }
    public class CustItemSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustItemSeqType(int? value) : base(value) { }
        public static implicit operator CustItemSeqType(int? value) { return new CustItemSeqType(value); }
        public static implicit operator CustItemSeqType(DBNull value) { return new CustItemSeqType(null); }
        private CustItemSeqType(long? value) : base(value) { }
        public static implicit operator CustItemSeqType(long? value) { return new CustItemSeqType(value); }
    }
    public class CustItemType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustItemType(string value) : base(value) { }
        public static implicit operator CustItemType(string value) { return new CustItemType(value); }
        public static implicit operator CustItemType(DBNull value) { return new CustItemType(null); }
    }
    public class CustLogRefNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustLogRefNumType(string value) : base(value) { }
        public static implicit operator CustLogRefNumType(string value) { return new CustLogRefNumType(value); }
        public static implicit operator CustLogRefNumType(DBNull value) { return new CustLogRefNumType(null); }
    }
    public class CustLogRefTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustLogRefTypeType(string value) : base(value) { }
        public static implicit operator CustLogRefTypeType(string value) { return new CustLogRefTypeType(value); }
        public static implicit operator CustLogRefTypeType(DBNull value) { return new CustLogRefTypeType(null); }
    }
    public class CustModeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustModeType(string value) : base(value) { }
        public static implicit operator CustModeType(string value) { return new CustModeType(value); }
        public static implicit operator CustModeType(DBNull value) { return new CustModeType(null); }
    }
    public class CustNumType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustNumType(string value) : base(value) { }
        public static implicit operator CustNumType(string value) { return new CustNumType(value); }
        public static implicit operator CustNumType(DBNull value) { return new CustNumType(null); }
    }
    public class CustomerAddrBlockType : StringType
    {
        public override int Length { get => 748; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustomerAddrBlockType(string value) : base(value) { }
        public static implicit operator CustomerAddrBlockType(string value) { return new CustomerAddrBlockType(value); }
        public static implicit operator CustomerAddrBlockType(DBNull value) { return new CustomerAddrBlockType(null); }
    }
    public class CustomerAddressType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustomerAddressType(string value) : base(value) { }
        public static implicit operator CustomerAddressType(string value) { return new CustomerAddressType(value); }
        public static implicit operator CustomerAddressType(DBNull value) { return new CustomerAddressType(null); }
    }
    public class CustomerStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustomerStatusType(string value) : base(value) { }
        public static implicit operator CustomerStatusType(string value) { return new CustomerStatusType(value); }
        public static implicit operator CustomerStatusType(DBNull value) { return new CustomerStatusType(null); }
    }
    public class CustPayTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustPayTypeType(string value) : base(value) { }
        public static implicit operator CustPayTypeType(string value) { return new CustPayTypeType(value); }
        public static implicit operator CustPayTypeType(DBNull value) { return new CustPayTypeType(null); }
    }
    public class CustPoType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustPoType(string value) : base(value) { }
        public static implicit operator CustPoType(string value) { return new CustPoType(value); }
        public static implicit operator CustPoType(DBNull value) { return new CustPoType(null); }
    }
    public class CustPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustPrefixType(string value) : base(value) { }
        public static implicit operator CustPrefixType(string value) { return new CustPrefixType(value); }
        public static implicit operator CustPrefixType(DBNull value) { return new CustPrefixType(null); }
    }
    public class CustSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustSeqType(int? value) : base(value) { }
        public static implicit operator CustSeqType(int? value) { return new CustSeqType(value); }
        public static implicit operator CustSeqType(DBNull value) { return new CustSeqType(null); }
        private CustSeqType(long? value) : base(value) { }
        public static implicit operator CustSeqType(long? value) { return new CustSeqType(value); }
    }
    public class CustTypeType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustTypeType(string value) : base(value) { }
        public static implicit operator CustTypeType(string value) { return new CustTypeType(value); }
        public static implicit operator CustTypeType(DBNull value) { return new CustTypeType(null); }
    }
    public class CustVendRefNumType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CustVendRefNumType(string value) : base(value) { }
        public static implicit operator CustVendRefNumType(string value) { return new CustVendRefNumType(value); }
        public static implicit operator CustVendRefNumType(DBNull value) { return new CustVendRefNumType(null); }
    }
    public class CutoffDayType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CutoffDayType(byte? value) : base(value) { }
        public static implicit operator CutoffDayType(byte? value) { return new CutoffDayType(value); }
        public static implicit operator CutoffDayType(DBNull value) { return new CutoffDayType(null); }
        private CutoffDayType(int? value) : base(value) { }
        public static implicit operator CutoffDayType(int? value) { return new CutoffDayType(value); }
    }
    public class CycleFreqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CycleFreqType(short? value) : base(value) { }
        public static implicit operator CycleFreqType(short? value) { return new CycleFreqType(value); }
        public static implicit operator CycleFreqType(DBNull value) { return new CycleFreqType(null); }
        private CycleFreqType(int? value) : base(value) { }
        public static implicit operator CycleFreqType(int? value) { return new CycleFreqType(value); }
    }
    public class CycleStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CycleStatusType(string value) : base(value) { }
        public static implicit operator CycleStatusType(string value) { return new CycleStatusType(value); }
        public static implicit operator CycleStatusType(DBNull value) { return new CycleStatusType(null); }
    }
    public class CycleToleranceType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private CycleToleranceType(decimal? value) : base(value) { }
        public static implicit operator CycleToleranceType(decimal? value) { return new CycleToleranceType(value); }
        public static implicit operator CycleToleranceType(DBNull value) { return new CycleToleranceType(null); }
    }
    public class CycleTypeType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private CycleTypeType(string value) : base(value) { }
        public static implicit operator CycleTypeType(string value) { return new CycleTypeType(value); }
        public static implicit operator CycleTypeType(DBNull value) { return new CycleTypeType(null); }
    }
    public class DatabaseTypeType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DatabaseTypeType(byte? value) : base(value) { }
        public static implicit operator DatabaseTypeType(byte? value) { return new DatabaseTypeType(value); }
        public static implicit operator DatabaseTypeType(DBNull value) { return new DatabaseTypeType(null); }
        private DatabaseTypeType(int? value) : base(value) { }
        public static implicit operator DatabaseTypeType(int? value) { return new DatabaseTypeType(value); }
    }
    public class DataCacheCapType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DataCacheCapType(string value) : base(value) { }
        public static implicit operator DataCacheCapType(string value) { return new DataCacheCapType(value); }
        public static implicit operator DataCacheCapType(DBNull value) { return new DataCacheCapType(null); }
    }
    public class Date4Type : DateTimeType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 23; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private Date4Type(DateTime? value) : base(value) { }
        public static implicit operator Date4Type(DateTime? value) { return new Date4Type(value); }
        public static implicit operator Date4Type(DBNull value) { return new Date4Type(null); }
    }
    public class DateFormatType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DateFormatType(string value) : base(value) { }
        public static implicit operator DateFormatType(string value) { return new DateFormatType(value); }
        public static implicit operator DateFormatType(DBNull value) { return new DateFormatType(null); }
    }
    public class DateKeyType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DateKeyType(int? value) : base(value) { }
        public static implicit operator DateKeyType(int? value) { return new DateKeyType(value); }
        public static implicit operator DateKeyType(DBNull value) { return new DateKeyType(null); }
        private DateKeyType(long? value) : base(value) { }
        public static implicit operator DateKeyType(long? value) { return new DateKeyType(value); }
    }
    public class DateOffsetType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private DateOffsetType(short? value) : base(value) { }
        public static implicit operator DateOffsetType(short? value) { return new DateOffsetType(value); }
        public static implicit operator DateOffsetType(DBNull value) { return new DateOffsetType(null); }
        private DateOffsetType(int? value) : base(value) { }
        public static implicit operator DateOffsetType(int? value) { return new DateOffsetType(value); }
    }
    public class DateSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DateSeqType(short? value) : base(value) { }
        public static implicit operator DateSeqType(short? value) { return new DateSeqType(value); }
        public static implicit operator DateSeqType(DBNull value) { return new DateSeqType(null); }
        private DateSeqType(int? value) : base(value) { }
        public static implicit operator DateSeqType(int? value) { return new DateSeqType(value); }
    }
    public class DateTime4Type : DateTimeType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 23; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private DateTime4Type(DateTime? value) : base(value) { }
        public static implicit operator DateTime4Type(DateTime? value) { return new DateTime4Type(value); }
        public static implicit operator DateTime4Type(DBNull value) { return new DateTime4Type(null); }
    }
    public class DateType : DateTimeType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 23; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private DateType(DateTime? value) : base(value) { }
        public static implicit operator DateType(DateTime? value) { return new DateType(value); }
        public static implicit operator DateType(DBNull value) { return new DateType(null); }
    }
    public class DaysCarriedForwardType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private DaysCarriedForwardType(decimal? value) : base(value) { }
        public static implicit operator DaysCarriedForwardType(decimal? value) { return new DaysCarriedForwardType(value); }
        public static implicit operator DaysCarriedForwardType(DBNull value) { return new DaysCarriedForwardType(null); }
    }
    public class DaysLeaveType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DaysLeaveType(short? value) : base(value) { }
        public static implicit operator DaysLeaveType(short? value) { return new DaysLeaveType(value); }
        public static implicit operator DaysLeaveType(DBNull value) { return new DaysLeaveType(null); }
        private DaysLeaveType(int? value) : base(value) { }
        public static implicit operator DaysLeaveType(int? value) { return new DaysLeaveType(value); }
    }
    public class DaysLostType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private DaysLostType(decimal? value) : base(value) { }
        public static implicit operator DaysLostType(decimal? value) { return new DaysLostType(value); }
        public static implicit operator DaysLostType(DBNull value) { return new DaysLostType(null); }
    }
    public class DaysMaxReimbursedType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DaysMaxReimbursedType(byte? value) : base(value) { }
        public static implicit operator DaysMaxReimbursedType(byte? value) { return new DaysMaxReimbursedType(value); }
        public static implicit operator DaysMaxReimbursedType(DBNull value) { return new DaysMaxReimbursedType(null); }
        private DaysMaxReimbursedType(int? value) : base(value) { }
        public static implicit operator DaysMaxReimbursedType(int? value) { return new DaysMaxReimbursedType(value); }
    }
    public class DaysOffMaxType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DaysOffMaxType(short? value) : base(value) { }
        public static implicit operator DaysOffMaxType(short? value) { return new DaysOffMaxType(value); }
        public static implicit operator DaysOffMaxType(DBNull value) { return new DaysOffMaxType(null); }
        private DaysOffMaxType(int? value) : base(value) { }
        public static implicit operator DaysOffMaxType(int? value) { return new DaysOffMaxType(value); }
    }
    public class DaysOffType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private DaysOffType(decimal? value) : base(value) { }
        public static implicit operator DaysOffType(decimal? value) { return new DaysOffType(value); }
        public static implicit operator DaysOffType(DBNull value) { return new DaysOffType(null); }
    }
    public class DaysOSType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DaysOSType(short? value) : base(value) { }
        public static implicit operator DaysOSType(short? value) { return new DaysOSType(value); }
        public static implicit operator DaysOSType(DBNull value) { return new DaysOSType(null); }
        private DaysOSType(int? value) : base(value) { }
        public static implicit operator DaysOSType(int? value) { return new DaysOSType(value); }
    }
    public class DaysOverType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DaysOverType(short? value) : base(value) { }
        public static implicit operator DaysOverType(short? value) { return new DaysOverType(value); }
        public static implicit operator DaysOverType(DBNull value) { return new DaysOverType(null); }
        private DaysOverType(int? value) : base(value) { }
        public static implicit operator DaysOverType(int? value) { return new DaysOverType(value); }
    }
    public class DaysSlackType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 19; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private DaysSlackType(decimal? value) : base(value) { }
        public static implicit operator DaysSlackType(decimal? value) { return new DaysSlackType(value); }
        public static implicit operator DaysSlackType(DBNull value) { return new DaysSlackType(null); }
    }
    public class DaysSupplyType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DaysSupplyType(short? value) : base(value) { }
        public static implicit operator DaysSupplyType(short? value) { return new DaysSupplyType(value); }
        public static implicit operator DaysSupplyType(DBNull value) { return new DaysSupplyType(null); }
        private DaysSupplyType(int? value) : base(value) { }
        public static implicit operator DaysSupplyType(int? value) { return new DaysSupplyType(value); }
    }
    public class DcArchiveDaysType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DcArchiveDaysType(byte? value) : base(value) { }
        public static implicit operator DcArchiveDaysType(byte? value) { return new DcArchiveDaysType(value); }
        public static implicit operator DcArchiveDaysType(DBNull value) { return new DcArchiveDaysType(null); }
        private DcArchiveDaysType(int? value) : base(value) { }
        public static implicit operator DcArchiveDaysType(int? value) { return new DcArchiveDaysType(value); }
    }
    public class DcDatabaseIdType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DcDatabaseIdType(string value) : base(value) { }
        public static implicit operator DcDatabaseIdType(string value) { return new DcDatabaseIdType(value); }
        public static implicit operator DcDatabaseIdType(DBNull value) { return new DcDatabaseIdType(null); }
    }
    public class DcEscFlagType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DcEscFlagType(string value) : base(value) { }
        public static implicit operator DcEscFlagType(string value) { return new DcEscFlagType(value); }
        public static implicit operator DcEscFlagType(DBNull value) { return new DcEscFlagType(null); }
    }
    public class DcHardwareType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DcHardwareType(string value) : base(value) { }
        public static implicit operator DcHardwareType(string value) { return new DcHardwareType(value); }
        public static implicit operator DcHardwareType(DBNull value) { return new DcHardwareType(null); }
    }
    public class DcHostType : StringType
    {
        public override int Length { get => 146; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DcHostType(string value) : base(value) { }
        public static implicit operator DcHostType(string value) { return new DcHostType(value); }
        public static implicit operator DcHostType(DBNull value) { return new DcHostType(null); }
    }
    public class DcPortType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DcPortType(int? value) : base(value) { }
        public static implicit operator DcPortType(int? value) { return new DcPortType(value); }
        public static implicit operator DcPortType(DBNull value) { return new DcPortType(null); }
        private DcPortType(long? value) : base(value) { }
        public static implicit operator DcPortType(long? value) { return new DcPortType(value); }
    }
    public class DcPrinterTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DcPrinterTypeType(string value) : base(value) { }
        public static implicit operator DcPrinterTypeType(string value) { return new DcPrinterTypeType(value); }
        public static implicit operator DcPrinterTypeType(DBNull value) { return new DcPrinterTypeType(null); }
    }
    public class DcsfcTransTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DcsfcTransTypeType(string value) : base(value) { }
        public static implicit operator DcsfcTransTypeType(string value) { return new DcsfcTransTypeType(value); }
        public static implicit operator DcsfcTransTypeType(DBNull value) { return new DcsfcTransTypeType(null); }
    }
    public class DcStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DcStatusType(string value) : base(value) { }
        public static implicit operator DcStatusType(string value) { return new DcStatusType(value); }
        public static implicit operator DcStatusType(DBNull value) { return new DcStatusType(null); }
    }
    public class DcTermIdType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DcTermIdType(string value) : base(value) { }
        public static implicit operator DcTermIdType(string value) { return new DcTermIdType(value); }
        public static implicit operator DcTermIdType(DBNull value) { return new DcTermIdType(null); }
    }
    public class DcTransNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DcTransNumType(int? value) : base(value) { }
        public static implicit operator DcTransNumType(int? value) { return new DcTransNumType(value); }
        public static implicit operator DcTransNumType(DBNull value) { return new DcTransNumType(null); }
        private DcTransNumType(long? value) : base(value) { }
        public static implicit operator DcTransNumType(long? value) { return new DcTransNumType(value); }
    }
    public class DcTransTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DcTransTypeType(string value) : base(value) { }
        public static implicit operator DcTransTypeType(string value) { return new DcTransTypeType(value); }
        public static implicit operator DcTransTypeType(DBNull value) { return new DcTransTypeType(null); }
    }
    public class DecimalPlacesType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DecimalPlacesType(byte? value) : base(value) { }
        public static implicit operator DecimalPlacesType(byte? value) { return new DecimalPlacesType(value); }
        public static implicit operator DecimalPlacesType(DBNull value) { return new DecimalPlacesType(null); }
        private DecimalPlacesType(int? value) : base(value) { }
        public static implicit operator DecimalPlacesType(int? value) { return new DecimalPlacesType(value); }
    }
    public class DeCodeNumType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DeCodeNumType(short? value) : base(value) { }
        public static implicit operator DeCodeNumType(short? value) { return new DeCodeNumType(value); }
        public static implicit operator DeCodeNumType(DBNull value) { return new DeCodeNumType(null); }
        private DeCodeNumType(int? value) : base(value) { }
        public static implicit operator DeCodeNumType(int? value) { return new DeCodeNumType(value); }
    }
    public class DeCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DeCodeType(string value) : base(value) { }
        public static implicit operator DeCodeType(string value) { return new DeCodeType(value); }
        public static implicit operator DeCodeType(DBNull value) { return new DeCodeType(null); }
    }
    public class DefaultCharType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DefaultCharType(string value) : base(value) { }
        public static implicit operator DefaultCharType(string value) { return new DefaultCharType(value); }
        public static implicit operator DefaultCharType(DBNull value) { return new DefaultCharType(null); }
    }
    public class DefaultFormLayoutType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DefaultFormLayoutType(string value) : base(value) { }
        public static implicit operator DefaultFormLayoutType(string value) { return new DefaultFormLayoutType(value); }
        public static implicit operator DefaultFormLayoutType(DBNull value) { return new DefaultFormLayoutType(null); }
    }
    public class DefaultIntType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DefaultIntType(int? value) : base(value) { }
        public static implicit operator DefaultIntType(int? value) { return new DefaultIntType(value); }
        public static implicit operator DefaultIntType(DBNull value) { return new DefaultIntType(null); }
        private DefaultIntType(long? value) : base(value) { }
        public static implicit operator DefaultIntType(long? value) { return new DefaultIntType(value); }
    }
    public class DefaultValueType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DefaultValueType(string value) : base(value) { }
        public static implicit operator DefaultValueType(string value) { return new DefaultValueType(value); }
        public static implicit operator DefaultValueType(DBNull value) { return new DefaultValueType(null); }
    }
    public class DefaultYesNoType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DefaultYesNoType(string value) : base(value) { }
        public static implicit operator DefaultYesNoType(string value) { return new DefaultYesNoType(value); }
        public static implicit operator DefaultYesNoType(DBNull value) { return new DefaultYesNoType(null); }
    }
    public class DegreeType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DegreeType(string value) : base(value) { }
        public static implicit operator DegreeType(string value) { return new DegreeType(value); }
        public static implicit operator DegreeType(DBNull value) { return new DegreeType(null); }
    }
    public class DeliverToType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DeliverToType(string value) : base(value) { }
        public static implicit operator DeliverToType(string value) { return new DeliverToType(value); }
        public static implicit operator DeliverToType(DBNull value) { return new DeliverToType(null); }
    }
    public class DeltermType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DeltermType(string value) : base(value) { }
        public static implicit operator DeltermType(string value) { return new DeltermType(value); }
        public static implicit operator DeltermType(DBNull value) { return new DeltermType(null); }
    }
    public class DensityType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 25; }
        public override byte Scale { get => 13; }
        public override bool Nullable { get => true; }
        private DensityType(decimal? value) : base(value) { }
        public static implicit operator DensityType(decimal? value) { return new DensityType(value); }
        public static implicit operator DensityType(DBNull value) { return new DensityType(null); }
    }
    public class DepDtlCreateSeqType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DepDtlCreateSeqType(byte? value) : base(value) { }
        public static implicit operator DepDtlCreateSeqType(byte? value) { return new DepDtlCreateSeqType(value); }
        public static implicit operator DepDtlCreateSeqType(DBNull value) { return new DepDtlCreateSeqType(null); }
        private DepDtlCreateSeqType(int? value) : base(value) { }
        public static implicit operator DepDtlCreateSeqType(int? value) { return new DepDtlCreateSeqType(value); }
    }
    public class DepDtlTransCodeType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DepDtlTransCodeType(byte? value) : base(value) { }
        public static implicit operator DepDtlTransCodeType(byte? value) { return new DepDtlTransCodeType(value); }
        public static implicit operator DepDtlTransCodeType(DBNull value) { return new DepDtlTransCodeType(null); }
        private DepDtlTransCodeType(int? value) : base(value) { }
        public static implicit operator DepDtlTransCodeType(int? value) { return new DepDtlTransCodeType(value); }
    }
    public class DeprCodeType : StringType
    {
        public override int Length { get => 10; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DeprCodeType(string value) : base(value) { }
        public static implicit operator DeprCodeType(string value) { return new DeprCodeType(value); }
        public static implicit operator DeprCodeType(DBNull value) { return new DeprCodeType(null); }
    }
    public class DeprMethodType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DeprMethodType(string value) : base(value) { }
        public static implicit operator DeprMethodType(string value) { return new DeprMethodType(value); }
        public static implicit operator DeprMethodType(DBNull value) { return new DeprMethodType(null); }
    }
    public class DeptType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DeptType(string value) : base(value) { }
        public static implicit operator DeptType(string value) { return new DeptType(value); }
        public static implicit operator DeptType(DBNull value) { return new DeptType(null); }
    }
    public class DeRateBasisType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DeRateBasisType(string value) : base(value) { }
        public static implicit operator DeRateBasisType(string value) { return new DeRateBasisType(value); }
        public static implicit operator DeRateBasisType(DBNull value) { return new DeRateBasisType(null); }
    }
    public class DescriptionOfGoodsType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DescriptionOfGoodsType(string value) : base(value) { }
        public static implicit operator DescriptionOfGoodsType(string value) { return new DescriptionOfGoodsType(value); }
        public static implicit operator DescriptionOfGoodsType(DBNull value) { return new DescriptionOfGoodsType(null); }
    }
    public class DescriptionType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DescriptionType(string value) : base(value) { }
        public static implicit operator DescriptionType(string value) { return new DescriptionType(value); }
        public static implicit operator DescriptionType(DBNull value) { return new DescriptionType(null); }
    }
    public class DestinationType : StringType
    {
        public override int Length { get => 480; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DestinationType(string value) : base(value) { }
        public static implicit operator DestinationType(string value) { return new DestinationType(value); }
        public static implicit operator DestinationType(DBNull value) { return new DestinationType(null); }
    }
    public class DeTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DeTypeType(string value) : base(value) { }
        public static implicit operator DeTypeType(string value) { return new DeTypeType(value); }
        public static implicit operator DeTypeType(DBNull value) { return new DeTypeType(null); }
    }
    public class DevelopmentModeType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DevelopmentModeType(string value) : base(value) { }
        public static implicit operator DevelopmentModeType(string value) { return new DevelopmentModeType(value); }
        public static implicit operator DevelopmentModeType(DBNull value) { return new DevelopmentModeType(null); }
    }
    public class DeWorkUnitDescType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DeWorkUnitDescType(string value) : base(value) { }
        public static implicit operator DeWorkUnitDescType(string value) { return new DeWorkUnitDescType(value); }
        public static implicit operator DeWorkUnitDescType(DBNull value) { return new DeWorkUnitDescType(null); }
    }
    public class DimensionAttributeType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionAttributeType(string value) : base(value) { }
        public static implicit operator DimensionAttributeType(string value) { return new DimensionAttributeType(value); }
        public static implicit operator DimensionAttributeType(DBNull value) { return new DimensionAttributeType(null); }
    }
    public class DimensionAttributeTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionAttributeTypeType(string value) : base(value) { }
        public static implicit operator DimensionAttributeTypeType(string value) { return new DimensionAttributeTypeType(value); }
        public static implicit operator DimensionAttributeTypeType(DBNull value) { return new DimensionAttributeTypeType(null); }
    }
    public class DimensionDescriptionType : StringType
    {
        public override int Length { get => 300; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionDescriptionType(string value) : base(value) { }
        public static implicit operator DimensionDescriptionType(string value) { return new DimensionDescriptionType(value); }
        public static implicit operator DimensionDescriptionType(DBNull value) { return new DimensionDescriptionType(null); }
    }
    public class DimensionFunctionType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionFunctionType(string value) : base(value) { }
        public static implicit operator DimensionFunctionType(string value) { return new DimensionFunctionType(value); }
        public static implicit operator DimensionFunctionType(DBNull value) { return new DimensionFunctionType(null); }
    }
    public class DimensionFunctionTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionFunctionTypeType(string value) : base(value) { }
        public static implicit operator DimensionFunctionTypeType(string value) { return new DimensionFunctionTypeType(value); }
        public static implicit operator DimensionFunctionTypeType(DBNull value) { return new DimensionFunctionTypeType(null); }
    }
    public class DimensionMaskingType : StringType
    {
        public override int Length { get => 104; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionMaskingType(string value) : base(value) { }
        public static implicit operator DimensionMaskingType(string value) { return new DimensionMaskingType(value); }
        public static implicit operator DimensionMaskingType(DBNull value) { return new DimensionMaskingType(null); }
    }
    public class DimensionNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionNameType(string value) : base(value) { }
        public static implicit operator DimensionNameType(string value) { return new DimensionNameType(value); }
        public static implicit operator DimensionNameType(DBNull value) { return new DimensionNameType(null); }
    }
    public class DimensionObjectNameType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionObjectNameType(string value) : base(value) { }
        public static implicit operator DimensionObjectNameType(string value) { return new DimensionObjectNameType(value); }
        public static implicit operator DimensionObjectNameType(DBNull value) { return new DimensionObjectNameType(null); }
    }
    public class DimensionObjectType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionObjectType(string value) : base(value) { }
        public static implicit operator DimensionObjectType(string value) { return new DimensionObjectType(value); }
        public static implicit operator DimensionObjectType(DBNull value) { return new DimensionObjectType(null); }
    }
    public class DimensionObjectTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionObjectTypeType(string value) : base(value) { }
        public static implicit operator DimensionObjectTypeType(string value) { return new DimensionObjectTypeType(value); }
        public static implicit operator DimensionObjectTypeType(DBNull value) { return new DimensionObjectTypeType(null); }
    }
    public class DimensionPrefixSymbolType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionPrefixSymbolType(string value) : base(value) { }
        public static implicit operator DimensionPrefixSymbolType(string value) { return new DimensionPrefixSymbolType(value); }
        public static implicit operator DimensionPrefixSymbolType(DBNull value) { return new DimensionPrefixSymbolType(null); }
    }
    public class DimensionPrefixType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionPrefixType(string value) : base(value) { }
        public static implicit operator DimensionPrefixType(string value) { return new DimensionPrefixType(value); }
        public static implicit operator DimensionPrefixType(DBNull value) { return new DimensionPrefixType(null); }
    }
    public class DimensionToleranceTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionToleranceTypeType(string value) : base(value) { }
        public static implicit operator DimensionToleranceTypeType(string value) { return new DimensionToleranceTypeType(value); }
        public static implicit operator DimensionToleranceTypeType(DBNull value) { return new DimensionToleranceTypeType(null); }
    }
    public class DimensionTypeType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionTypeType(string value) : base(value) { }
        public static implicit operator DimensionTypeType(string value) { return new DimensionTypeType(value); }
        public static implicit operator DimensionTypeType(DBNull value) { return new DimensionTypeType(null); }
    }
    public class DimensionUnitFactorType : StringType
    {
        public override int Length { get => 300; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionUnitFactorType(string value) : base(value) { }
        public static implicit operator DimensionUnitFactorType(string value) { return new DimensionUnitFactorType(value); }
        public static implicit operator DimensionUnitFactorType(DBNull value) { return new DimensionUnitFactorType(null); }
    }
    public class DimensionUnitType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionUnitType(string value) : base(value) { }
        public static implicit operator DimensionUnitType(string value) { return new DimensionUnitType(value); }
        public static implicit operator DimensionUnitType(DBNull value) { return new DimensionUnitType(null); }
    }
    public class DimensionValueType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DimensionValueType(string value) : base(value) { }
        public static implicit operator DimensionValueType(string value) { return new DimensionValueType(value); }
        public static implicit operator DimensionValueType(DBNull value) { return new DimensionValueType(null); }
    }
    public class DirDepPercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 4; }
        public override byte Scale { get => 1; }
        public override bool Nullable { get => true; }
        private DirDepPercentType(decimal? value) : base(value) { }
        public static implicit operator DirDepPercentType(decimal? value) { return new DirDepPercentType(value); }
        public static implicit operator DirDepPercentType(DBNull value) { return new DirDepPercentType(null); }
    }
    public class DirectDebitNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DirectDebitNumType(int? value) : base(value) { }
        public static implicit operator DirectDebitNumType(int? value) { return new DirectDebitNumType(value); }
        public static implicit operator DirectDebitNumType(DBNull value) { return new DirectDebitNumType(null); }
        private DirectDebitNumType(long? value) : base(value) { }
        public static implicit operator DirectDebitNumType(long? value) { return new DirectDebitNumType(value); }
    }
    public class DirectDebitStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DirectDebitStatType(string value) : base(value) { }
        public static implicit operator DirectDebitStatType(string value) { return new DirectDebitStatType(value); }
        public static implicit operator DirectDebitStatType(DBNull value) { return new DirectDebitStatType(null); }
    }
    public class DiscDaysType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DiscDaysType(int? value) : base(value) { }
        public static implicit operator DiscDaysType(int? value) { return new DiscDaysType(value); }
        public static implicit operator DiscDaysType(DBNull value) { return new DiscDaysType(null); }
        private DiscDaysType(long? value) : base(value) { }
        public static implicit operator DiscDaysType(long? value) { return new DiscDaysType(value); }
    }
    public class DispCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DispCodeType(string value) : base(value) { }
        public static implicit operator DispCodeType(string value) { return new DispCodeType(value); }
        public static implicit operator DispCodeType(DBNull value) { return new DispCodeType(null); }
    }
    public class DivNumType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DivNumType(string value) : base(value) { }
        public static implicit operator DivNumType(string value) { return new DivNumType(value); }
        public static implicit operator DivNumType(DBNull value) { return new DivNumType(null); }
    }
    public class DocCodeType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DocCodeType(string value) : base(value) { }
        public static implicit operator DocCodeType(string value) { return new DocCodeType(value); }
        public static implicit operator DocCodeType(DBNull value) { return new DocCodeType(null); }
    }
    public class DocumentExtensionType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DocumentExtensionType(string value) : base(value) { }
        public static implicit operator DocumentExtensionType(string value) { return new DocumentExtensionType(value); }
        public static implicit operator DocumentExtensionType(DBNull value) { return new DocumentExtensionType(null); }
    }
    public class DocumentNameType : StringType
    {
        public override int Length { get => 240; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DocumentNameType(string value) : base(value) { }
        public static implicit operator DocumentNameType(string value) { return new DocumentNameType(value); }
        public static implicit operator DocumentNameType(DBNull value) { return new DocumentNameType(null); }
    }
    public class DocumentNumType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DocumentNumType(string value) : base(value) { }
        public static implicit operator DocumentNumType(string value) { return new DocumentNumType(value); }
        public static implicit operator DocumentNumType(DBNull value) { return new DocumentNumType(null); }
    }
    public class DocumentObjectType : BinaryType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DocumentObjectType(Byte[] value) : base(value) { }
        public static implicit operator DocumentObjectType(Byte[] value) { return new DocumentObjectType(value); }
        public static implicit operator DocumentObjectType(DBNull value) { return new DocumentObjectType(null); }
    }
    public class DocumentStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DocumentStatusType(string value) : base(value) { }
        public static implicit operator DocumentStatusType(string value) { return new DocumentStatusType(value); }
        public static implicit operator DocumentStatusType(DBNull value) { return new DocumentStatusType(null); }
    }
    public class DocumentTypeType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DocumentTypeType(string value) : base(value) { }
        public static implicit operator DocumentTypeType(string value) { return new DocumentTypeType(value); }
        public static implicit operator DocumentTypeType(DBNull value) { return new DocumentTypeType(null); }
    }
    public class DoInvoiceType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DoInvoiceType(string value) : base(value) { }
        public static implicit operator DoInvoiceType(string value) { return new DoInvoiceType(value); }
        public static implicit operator DoInvoiceType(DBNull value) { return new DoInvoiceType(null); }
    }
    public class DoLengthType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DoLengthType(byte? value) : base(value) { }
        public static implicit operator DoLengthType(byte? value) { return new DoLengthType(value); }
        public static implicit operator DoLengthType(DBNull value) { return new DoLengthType(null); }
        private DoLengthType(int? value) : base(value) { }
        public static implicit operator DoLengthType(int? value) { return new DoLengthType(value); }
    }
    public class DoLineType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DoLineType(int? value) : base(value) { }
        public static implicit operator DoLineType(int? value) { return new DoLineType(value); }
        public static implicit operator DoLineType(DBNull value) { return new DoLineType(null); }
        private DoLineType(long? value) : base(value) { }
        public static implicit operator DoLineType(long? value) { return new DoLineType(value); }
    }
    public class DoMarksType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DoMarksType(string value) : base(value) { }
        public static implicit operator DoMarksType(string value) { return new DoMarksType(value); }
        public static implicit operator DoMarksType(DBNull value) { return new DoMarksType(null); }
    }
    public class DoMotorFreightCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DoMotorFreightCodeType(string value) : base(value) { }
        public static implicit operator DoMotorFreightCodeType(string value) { return new DoMotorFreightCodeType(value); }
        public static implicit operator DoMotorFreightCodeType(DBNull value) { return new DoMotorFreightCodeType(null); }
    }
    public class DoNumType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DoNumType(string value) : base(value) { }
        public static implicit operator DoNumType(string value) { return new DoNumType(value); }
        public static implicit operator DoNumType(DBNull value) { return new DoNumType(null); }
    }
    public class DoPackageTypeType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DoPackageTypeType(string value) : base(value) { }
        public static implicit operator DoPackageTypeType(string value) { return new DoPackageTypeType(value); }
        public static implicit operator DoPackageTypeType(DBNull value) { return new DoPackageTypeType(null); }
    }
    public class DoPrefixType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DoPrefixType(string value) : base(value) { }
        public static implicit operator DoPrefixType(string value) { return new DoPrefixType(value); }
        public static implicit operator DoPrefixType(DBNull value) { return new DoPrefixType(null); }
    }
    public class DoSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DoSeqType(short? value) : base(value) { }
        public static implicit operator DoSeqType(short? value) { return new DoSeqType(value); }
        public static implicit operator DoSeqType(DBNull value) { return new DoSeqType(null); }
        private DoSeqType(int? value) : base(value) { }
        public static implicit operator DoSeqType(int? value) { return new DoSeqType(value); }
    }
    public class DoStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DoStatusType(string value) : base(value) { }
        public static implicit operator DoStatusType(string value) { return new DoStatusType(value); }
        public static implicit operator DoStatusType(DBNull value) { return new DoStatusType(null); }
    }
    public class DraftDescriptionType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DraftDescriptionType(string value) : base(value) { }
        public static implicit operator DraftDescriptionType(string value) { return new DraftDescriptionType(value); }
        public static implicit operator DraftDescriptionType(DBNull value) { return new DraftDescriptionType(null); }
    }
    public class DraftIssuerType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DraftIssuerType(string value) : base(value) { }
        public static implicit operator DraftIssuerType(string value) { return new DraftIssuerType(value); }
        public static implicit operator DraftIssuerType(DBNull value) { return new DraftIssuerType(null); }
    }
    public class DraftNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DraftNumType(int? value) : base(value) { }
        public static implicit operator DraftNumType(int? value) { return new DraftNumType(value); }
        public static implicit operator DraftNumType(DBNull value) { return new DraftNumType(null); }
        private DraftNumType(long? value) : base(value) { }
        public static implicit operator DraftNumType(long? value) { return new DraftNumType(value); }
    }
    public class DraftTypeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DraftTypeType(string value) : base(value) { }
        public static implicit operator DraftTypeType(string value) { return new DraftTypeType(value); }
        public static implicit operator DraftTypeType(DBNull value) { return new DraftTypeType(null); }
    }
    public class DrawingNbrType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DrawingNbrType(string value) : base(value) { }
        public static implicit operator DrawingNbrType(string value) { return new DrawingNbrType(value); }
        public static implicit operator DrawingNbrType(DBNull value) { return new DrawingNbrType(null); }
    }
    public class DRIPullBetaFactor : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => false; }
        private DRIPullBetaFactor(decimal? value) : base(value) { }
        public static implicit operator DRIPullBetaFactor(decimal? value) { return new DRIPullBetaFactor(value); }
        public static implicit operator DRIPullBetaFactor(DBNull value) { return new DRIPullBetaFactor(null); }
    }
    public class DRIPullServiceFactor : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => false; }
        private DRIPullServiceFactor(decimal? value) : base(value) { }
        public static implicit operator DRIPullServiceFactor(decimal? value) { return new DRIPullServiceFactor(value); }
        public static implicit operator DRIPullServiceFactor(DBNull value) { return new DRIPullServiceFactor(null); }
    }
    public class DRIPullServiceLevel : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => false; }
        private DRIPullServiceLevel(decimal? value) : base(value) { }
        public static implicit operator DRIPullServiceLevel(decimal? value) { return new DRIPullServiceLevel(value); }
        public static implicit operator DRIPullServiceLevel(DBNull value) { return new DRIPullServiceLevel(null); }
    }
    public class DRIPullTaktCellType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private DRIPullTaktCellType(string value) : base(value) { }
        public static implicit operator DRIPullTaktCellType(string value) { return new DRIPullTaktCellType(value); }
        public static implicit operator DRIPullTaktCellType(DBNull value) { return new DRIPullTaktCellType(null); }
    }
    public class DRIPullTaktTime : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private DRIPullTaktTime(decimal? value) : base(value) { }
        public static implicit operator DRIPullTaktTime(decimal? value) { return new DRIPullTaktTime(value); }
        public static implicit operator DRIPullTaktTime(DBNull value) { return new DRIPullTaktTime(null); }
    }
    public class DropPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DropPrefixType(string value) : base(value) { }
        public static implicit operator DropPrefixType(string value) { return new DropPrefixType(value); }
        public static implicit operator DropPrefixType(DBNull value) { return new DropPrefixType(null); }
    }
    public class DropSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DropSeqType(int? value) : base(value) { }
        public static implicit operator DropSeqType(int? value) { return new DropSeqType(value); }
        public static implicit operator DropSeqType(DBNull value) { return new DropSeqType(null); }
        private DropSeqType(long? value) : base(value) { }
        public static implicit operator DropSeqType(long? value) { return new DropSeqType(value); }
    }
    public class DropShipNoType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DropShipNoType(string value) : base(value) { }
        public static implicit operator DropShipNoType(string value) { return new DropShipNoType(value); }
        public static implicit operator DropShipNoType(DBNull value) { return new DropShipNoType(null); }
    }
    public class DropShipTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DropShipTypeType(string value) : base(value) { }
        public static implicit operator DropShipTypeType(string value) { return new DropShipTypeType(value); }
        public static implicit operator DropShipTypeType(DBNull value) { return new DropShipTypeType(null); }
    }
    public class DueDaysType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DueDaysType(int? value) : base(value) { }
        public static implicit operator DueDaysType(int? value) { return new DueDaysType(value); }
        public static implicit operator DueDaysType(DBNull value) { return new DueDaysType(null); }
        private DueDaysType(long? value) : base(value) { }
        public static implicit operator DueDaysType(long? value) { return new DueDaysType(value); }
    }
    public class DuePeriodType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DuePeriodType(short? value) : base(value) { }
        public static implicit operator DuePeriodType(short? value) { return new DuePeriodType(value); }
        public static implicit operator DuePeriodType(DBNull value) { return new DuePeriodType(null); }
        private DuePeriodType(int? value) : base(value) { }
        public static implicit operator DuePeriodType(int? value) { return new DuePeriodType(value); }
    }
    public class DunningDateTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DunningDateTypeType(string value) : base(value) { }
        public static implicit operator DunningDateTypeType(string value) { return new DunningDateTypeType(value); }
        public static implicit operator DunningDateTypeType(DBNull value) { return new DunningDateTypeType(null); }
    }
    public class DunningFeeTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DunningFeeTypeType(string value) : base(value) { }
        public static implicit operator DunningFeeTypeType(string value) { return new DunningFeeTypeType(value); }
        public static implicit operator DunningFeeTypeType(DBNull value) { return new DunningFeeTypeType(null); }
    }
    public class DunningGroupType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DunningGroupType(string value) : base(value) { }
        public static implicit operator DunningGroupType(string value) { return new DunningGroupType(value); }
        public static implicit operator DunningGroupType(DBNull value) { return new DunningGroupType(null); }
    }
    public class DunningIncrementDaysType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DunningIncrementDaysType(int? value) : base(value) { }
        public static implicit operator DunningIncrementDaysType(int? value) { return new DunningIncrementDaysType(value); }
        public static implicit operator DunningIncrementDaysType(DBNull value) { return new DunningIncrementDaysType(null); }
        private DunningIncrementDaysType(long? value) : base(value) { }
        public static implicit operator DunningIncrementDaysType(long? value) { return new DunningIncrementDaysType(value); }
    }
    public class DunningMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DunningMethodType(string value) : base(value) { }
        public static implicit operator DunningMethodType(string value) { return new DunningMethodType(value); }
        public static implicit operator DunningMethodType(DBNull value) { return new DunningMethodType(null); }
    }
    public class DunningStageIdType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DunningStageIdType(int? value) : base(value) { }
        public static implicit operator DunningStageIdType(int? value) { return new DunningStageIdType(value); }
        public static implicit operator DunningStageIdType(DBNull value) { return new DunningStageIdType(null); }
        private DunningStageIdType(long? value) : base(value) { }
        public static implicit operator DunningStageIdType(long? value) { return new DunningStageIdType(value); }
    }
    public class DunningStageType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DunningStageType(int? value) : base(value) { }
        public static implicit operator DunningStageType(int? value) { return new DunningStageType(value); }
        public static implicit operator DunningStageType(DBNull value) { return new DunningStageType(null); }
        private DunningStageType(long? value) : base(value) { }
        public static implicit operator DunningStageType(long? value) { return new DunningStageType(value); }
    }
    public class DunsNumType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DunsNumType(string value) : base(value) { }
        public static implicit operator DunsNumType(string value) { return new DunsNumType(value); }
        public static implicit operator DunsNumType(DBNull value) { return new DunsNumType(null); }
    }
    public class DurationDataType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DurationDataType(string value) : base(value) { }
        public static implicit operator DurationDataType(string value) { return new DurationDataType(value); }
        public static implicit operator DurationDataType(DBNull value) { return new DurationDataType(null); }
    }
    public class DynamicTableTypeType : StringType
    {
        public override int Length { get => 32; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private DynamicTableTypeType(string value) : base(value) { }
        public static implicit operator DynamicTableTypeType(string value) { return new DynamicTableTypeType(value); }
        public static implicit operator DynamicTableTypeType(DBNull value) { return new DynamicTableTypeType(null); }
    }
    public class EarnedRebateIdType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EarnedRebateIdType(decimal? value) : base(value) { }
        public static implicit operator EarnedRebateIdType(decimal? value) { return new EarnedRebateIdType(value); }
        public static implicit operator EarnedRebateIdType(DBNull value) { return new EarnedRebateIdType(null); }
    }
    public class EarnedRebateStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EarnedRebateStatusType(string value) : base(value) { }
        public static implicit operator EarnedRebateStatusType(string value) { return new EarnedRebateStatusType(value); }
        public static implicit operator EarnedRebateStatusType(DBNull value) { return new EarnedRebateStatusType(null); }
    }
    public class ECCNUSMLValueType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ECCNUSMLValueType(string value) : base(value) { }
        public static implicit operator ECCNUSMLValueType(string value) { return new ECCNUSMLValueType(value); }
        public static implicit operator ECCNUSMLValueType(DBNull value) { return new ECCNUSMLValueType(null); }
    }
    public class EcCodeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EcCodeType(string value) : base(value) { }
        public static implicit operator EcCodeType(string value) { return new EcCodeType(value); }
        public static implicit operator EcCodeType(DBNull value) { return new EcCodeType(null); }
    }
    public class EcConvFactorType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 6; }
        public override bool Nullable { get => true; }
        private EcConvFactorType(decimal? value) : base(value) { }
        public static implicit operator EcConvFactorType(decimal? value) { return new EcConvFactorType(value); }
        public static implicit operator EcConvFactorType(DBNull value) { return new EcConvFactorType(null); }
    }
    public class EcnBomSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EcnBomSeqType(short? value) : base(value) { }
        public static implicit operator EcnBomSeqType(short? value) { return new EcnBomSeqType(value); }
        public static implicit operator EcnBomSeqType(DBNull value) { return new EcnBomSeqType(null); }
        private EcnBomSeqType(int? value) : base(value) { }
        public static implicit operator EcnBomSeqType(int? value) { return new EcnBomSeqType(value); }
    }
    public class ECNChangeTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ECNChangeTypeType(string value) : base(value) { }
        public static implicit operator ECNChangeTypeType(string value) { return new ECNChangeTypeType(value); }
        public static implicit operator ECNChangeTypeType(DBNull value) { return new ECNChangeTypeType(null); }
    }
    public class EcnDistCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EcnDistCodeType(string value) : base(value) { }
        public static implicit operator EcnDistCodeType(string value) { return new EcnDistCodeType(value); }
        public static implicit operator EcnDistCodeType(DBNull value) { return new EcnDistCodeType(null); }
    }
    public class EcnGroupType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EcnGroupType(string value) : base(value) { }
        public static implicit operator EcnGroupType(string value) { return new EcnGroupType(value); }
        public static implicit operator EcnGroupType(DBNull value) { return new EcnGroupType(null); }
    }
    public class EcnItemStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EcnItemStatusType(string value) : base(value) { }
        public static implicit operator EcnItemStatusType(string value) { return new EcnItemStatusType(value); }
        public static implicit operator EcnItemStatusType(DBNull value) { return new EcnItemStatusType(null); }
    }
    public class EcnitemTypeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EcnitemTypeType(string value) : base(value) { }
        public static implicit operator EcnitemTypeType(string value) { return new EcnitemTypeType(value); }
        public static implicit operator EcnitemTypeType(DBNull value) { return new EcnitemTypeType(null); }
    }
    public class EcnJobTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EcnJobTypeType(string value) : base(value) { }
        public static implicit operator EcnJobTypeType(string value) { return new EcnJobTypeType(value); }
        public static implicit operator EcnJobTypeType(DBNull value) { return new EcnJobTypeType(null); }
    }
    public class EcnLineType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EcnLineType(int? value) : base(value) { }
        public static implicit operator EcnLineType(int? value) { return new EcnLineType(value); }
        public static implicit operator EcnLineType(DBNull value) { return new EcnLineType(null); }
        private EcnLineType(long? value) : base(value) { }
        public static implicit operator EcnLineType(long? value) { return new EcnLineType(value); }
    }
    public class EcnModeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EcnModeType(string value) : base(value) { }
        public static implicit operator EcnModeType(string value) { return new EcnModeType(value); }
        public static implicit operator EcnModeType(DBNull value) { return new EcnModeType(null); }
    }
    public class EcnNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EcnNumType(int? value) : base(value) { }
        public static implicit operator EcnNumType(int? value) { return new EcnNumType(value); }
        public static implicit operator EcnNumType(DBNull value) { return new EcnNumType(null); }
        private EcnNumType(long? value) : base(value) { }
        public static implicit operator EcnNumType(long? value) { return new EcnNumType(value); }
    }
    public class EcnPriorCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EcnPriorCodeType(string value) : base(value) { }
        public static implicit operator EcnPriorCodeType(string value) { return new EcnPriorCodeType(value); }
        public static implicit operator EcnPriorCodeType(DBNull value) { return new EcnPriorCodeType(null); }
    }
    public class EcnStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EcnStatusType(string value) : base(value) { }
        public static implicit operator EcnStatusType(string value) { return new EcnStatusType(value); }
        public static implicit operator EcnStatusType(DBNull value) { return new EcnStatusType(null); }
    }
    public class ECNTypeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ECNTypeType(string value) : base(value) { }
        public static implicit operator ECNTypeType(string value) { return new ECNTypeType(value); }
        public static implicit operator ECNTypeType(DBNull value) { return new ECNTypeType(null); }
    }
    public class EdiAckCodeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiAckCodeType(string value) : base(value) { }
        public static implicit operator EdiAckCodeType(string value) { return new EdiAckCodeType(value); }
        public static implicit operator EdiAckCodeType(DBNull value) { return new EdiAckCodeType(null); }
    }
    public class EdiAckTypeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiAckTypeType(string value) : base(value) { }
        public static implicit operator EdiAckTypeType(string value) { return new EdiAckTypeType(value); }
        public static implicit operator EdiAckTypeType(DBNull value) { return new EdiAckTypeType(null); }
    }
    public class EdiAsnCodeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiAsnCodeType(string value) : base(value) { }
        public static implicit operator EdiAsnCodeType(string value) { return new EdiAsnCodeType(value); }
        public static implicit operator EdiAsnCodeType(DBNull value) { return new EdiAsnCodeType(null); }
    }
    public class EdiAutoPostType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiAutoPostType(string value) : base(value) { }
        public static implicit operator EdiAutoPostType(string value) { return new EdiAutoPostType(value); }
        public static implicit operator EdiAutoPostType(DBNull value) { return new EdiAutoPostType(null); }
    }
    public class EdiBolItemRateType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 18; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private EdiBolItemRateType(decimal? value) : base(value) { }
        public static implicit operator EdiBolItemRateType(decimal? value) { return new EdiBolItemRateType(value); }
        public static implicit operator EdiBolItemRateType(DBNull value) { return new EdiBolItemRateType(null); }
    }
    public class EdiCoitemStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiCoitemStatusType(string value) : base(value) { }
        public static implicit operator EdiCoitemStatusType(string value) { return new EdiCoitemStatusType(value); }
        public static implicit operator EdiCoitemStatusType(DBNull value) { return new EdiCoitemStatusType(null); }
    }
    public class EdiCoStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiCoStatusType(string value) : base(value) { }
        public static implicit operator EdiCoStatusType(string value) { return new EdiCoStatusType(value); }
        public static implicit operator EdiCoStatusType(DBNull value) { return new EdiCoStatusType(null); }
    }
    public class EdiCoTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiCoTypeType(string value) : base(value) { }
        public static implicit operator EdiCoTypeType(string value) { return new EdiCoTypeType(value); }
        public static implicit operator EdiCoTypeType(DBNull value) { return new EdiCoTypeType(null); }
    }
    public class EdiDateOffsetType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiDateOffsetType(short? value) : base(value) { }
        public static implicit operator EdiDateOffsetType(short? value) { return new EdiDateOffsetType(value); }
        public static implicit operator EdiDateOffsetType(DBNull value) { return new EdiDateOffsetType(null); }
        private EdiDateOffsetType(int? value) : base(value) { }
        public static implicit operator EdiDateOffsetType(int? value) { return new EdiDateOffsetType(value); }
    }
    public class EdiErrLineNumType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiErrLineNumType(short? value) : base(value) { }
        public static implicit operator EdiErrLineNumType(short? value) { return new EdiErrLineNumType(value); }
        public static implicit operator EdiErrLineNumType(DBNull value) { return new EdiErrLineNumType(null); }
        private EdiErrLineNumType(int? value) : base(value) { }
        public static implicit operator EdiErrLineNumType(int? value) { return new EdiErrLineNumType(value); }
    }
    public class EdiErrMsgType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiErrMsgType(short? value) : base(value) { }
        public static implicit operator EdiErrMsgType(short? value) { return new EdiErrMsgType(value); }
        public static implicit operator EdiErrMsgType(DBNull value) { return new EdiErrMsgType(null); }
        private EdiErrMsgType(int? value) : base(value) { }
        public static implicit operator EdiErrMsgType(int? value) { return new EdiErrMsgType(value); }
    }
    public class EdiErrNumType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiErrNumType(short? value) : base(value) { }
        public static implicit operator EdiErrNumType(short? value) { return new EdiErrNumType(value); }
        public static implicit operator EdiErrNumType(DBNull value) { return new EdiErrNumType(null); }
        private EdiErrNumType(int? value) : base(value) { }
        public static implicit operator EdiErrNumType(int? value) { return new EdiErrNumType(value); }
    }
    public class EdiErrSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiErrSeqType(short? value) : base(value) { }
        public static implicit operator EdiErrSeqType(short? value) { return new EdiErrSeqType(value); }
        public static implicit operator EdiErrSeqType(DBNull value) { return new EdiErrSeqType(null); }
        private EdiErrSeqType(int? value) : base(value) { }
        public static implicit operator EdiErrSeqType(int? value) { return new EdiErrSeqType(value); }
    }
    public class EdiExtRefType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiExtRefType(string value) : base(value) { }
        public static implicit operator EdiExtRefType(string value) { return new EdiExtRefType(value); }
        public static implicit operator EdiExtRefType(DBNull value) { return new EdiExtRefType(null); }
    }
    public class EdiInvCodeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiInvCodeType(string value) : base(value) { }
        public static implicit operator EdiInvCodeType(string value) { return new EdiInvCodeType(value); }
        public static implicit operator EdiInvCodeType(DBNull value) { return new EdiInvCodeType(null); }
    }
    public class EdiInvtypeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiInvtypeType(string value) : base(value) { }
        public static implicit operator EdiInvtypeType(string value) { return new EdiInvtypeType(value); }
        public static implicit operator EdiInvtypeType(DBNull value) { return new EdiInvtypeType(null); }
    }
    public class EdiNonApplDataType : StringType
    {
        public override int Length { get => 150; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiNonApplDataType(string value) : base(value) { }
        public static implicit operator EdiNonApplDataType(string value) { return new EdiNonApplDataType(value); }
        public static implicit operator EdiNonApplDataType(DBNull value) { return new EdiNonApplDataType(null); }
    }
    public class EdiPoSeqNumType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiPoSeqNumType(short? value) : base(value) { }
        public static implicit operator EdiPoSeqNumType(short? value) { return new EdiPoSeqNumType(value); }
        public static implicit operator EdiPoSeqNumType(DBNull value) { return new EdiPoSeqNumType(null); }
        private EdiPoSeqNumType(int? value) : base(value) { }
        public static implicit operator EdiPoSeqNumType(int? value) { return new EdiPoSeqNumType(value); }
    }
    public class EdiReleaseActionType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiReleaseActionType(string value) : base(value) { }
        public static implicit operator EdiReleaseActionType(string value) { return new EdiReleaseActionType(value); }
        public static implicit operator EdiReleaseActionType(DBNull value) { return new EdiReleaseActionType(null); }
    }
    public class EdiSchedNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiSchedNumType(int? value) : base(value) { }
        public static implicit operator EdiSchedNumType(int? value) { return new EdiSchedNumType(value); }
        public static implicit operator EdiSchedNumType(DBNull value) { return new EdiSchedNumType(null); }
        private EdiSchedNumType(long? value) : base(value) { }
        public static implicit operator EdiSchedNumType(long? value) { return new EdiSchedNumType(value); }
    }
    public class EdiSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiSeqType(short? value) : base(value) { }
        public static implicit operator EdiSeqType(short? value) { return new EdiSeqType(value); }
        public static implicit operator EdiSeqType(DBNull value) { return new EdiSeqType(null); }
        private EdiSeqType(int? value) : base(value) { }
        public static implicit operator EdiSeqType(int? value) { return new EdiSeqType(value); }
    }
    public class EdiTpCodeType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiTpCodeType(string value) : base(value) { }
        public static implicit operator EdiTpCodeType(string value) { return new EdiTpCodeType(value); }
        public static implicit operator EdiTpCodeType(DBNull value) { return new EdiTpCodeType(null); }
    }
    public class EdiTrxCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiTrxCodeType(string value) : base(value) { }
        public static implicit operator EdiTrxCodeType(string value) { return new EdiTrxCodeType(value); }
        public static implicit operator EdiTrxCodeType(DBNull value) { return new EdiTrxCodeType(null); }
    }
    public class EdiTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiTypeType(string value) : base(value) { }
        public static implicit operator EdiTypeType(string value) { return new EdiTypeType(value); }
        public static implicit operator EdiTypeType(DBNull value) { return new EdiTypeType(null); }
    }
    public class EdiUseDateType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiUseDateType(string value) : base(value) { }
        public static implicit operator EdiUseDateType(string value) { return new EdiUseDateType(value); }
        public static implicit operator EdiUseDateType(DBNull value) { return new EdiUseDateType(null); }
    }
    public class EdiUsePriceType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EdiUsePriceType(string value) : base(value) { }
        public static implicit operator EdiUsePriceType(string value) { return new EdiUsePriceType(value); }
        public static implicit operator EdiUsePriceType(DBNull value) { return new EdiUsePriceType(null); }
    }
    public class EducationYearsType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EducationYearsType(byte? value) : base(value) { }
        public static implicit operator EducationYearsType(byte? value) { return new EducationYearsType(value); }
        public static implicit operator EducationYearsType(DBNull value) { return new EducationYearsType(null); }
        private EducationYearsType(int? value) : base(value) { }
        public static implicit operator EducationYearsType(int? value) { return new EducationYearsType(value); }
    }
    public class EEOClsType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EEOClsType(string value) : base(value) { }
        public static implicit operator EEOClsType(string value) { return new EEOClsType(value); }
        public static implicit operator EEOClsType(DBNull value) { return new EEOClsType(null); }
    }
    public class EfficiencyType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 4; }
        public override byte Scale { get => 1; }
        public override bool Nullable { get => true; }
        private EfficiencyType(decimal? value) : base(value) { }
        public static implicit operator EfficiencyType(decimal? value) { return new EfficiencyType(value); }
        public static implicit operator EfficiencyType(DBNull value) { return new EfficiencyType(null); }
    }
    public class EFTAppFieldType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTAppFieldType(string value) : base(value) { }
        public static implicit operator EFTAppFieldType(string value) { return new EFTAppFieldType(value); }
        public static implicit operator EFTAppFieldType(DBNull value) { return new EFTAppFieldType(null); }
    }
    public class EFTAppGroupType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTAppGroupType(string value) : base(value) { }
        public static implicit operator EFTAppGroupType(string value) { return new EFTAppGroupType(value); }
        public static implicit operator EFTAppGroupType(DBNull value) { return new EFTAppGroupType(null); }
    }
    public class EFTBankNumType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTBankNumType(string value) : base(value) { }
        public static implicit operator EFTBankNumType(string value) { return new EFTBankNumType(value); }
        public static implicit operator EFTBankNumType(DBNull value) { return new EFTBankNumType(null); }
    }
    public class EFTBatchGroupType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTBatchGroupType(string value) : base(value) { }
        public static implicit operator EFTBatchGroupType(string value) { return new EFTBatchGroupType(value); }
        public static implicit operator EFTBatchGroupType(DBNull value) { return new EFTBatchGroupType(null); }
    }
    public class EFTBatchIdType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTBatchIdType(decimal? value) : base(value) { }
        public static implicit operator EFTBatchIdType(decimal? value) { return new EFTBatchIdType(value); }
        public static implicit operator EFTBatchIdType(DBNull value) { return new EFTBatchIdType(null); }
    }
    public class EFTCodeValueType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTCodeValueType(string value) : base(value) { }
        public static implicit operator EFTCodeValueType(string value) { return new EFTCodeValueType(value); }
        public static implicit operator EFTCodeValueType(DBNull value) { return new EFTCodeValueType(null); }
    }
    public class EFTCodeValueTypeType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTCodeValueTypeType(string value) : base(value) { }
        public static implicit operator EFTCodeValueTypeType(string value) { return new EFTCodeValueTypeType(value); }
        public static implicit operator EFTCodeValueTypeType(DBNull value) { return new EFTCodeValueTypeType(null); }
    }
    public class EFTDepositAcctTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTDepositAcctTypeType(string value) : base(value) { }
        public static implicit operator EFTDepositAcctTypeType(string value) { return new EFTDepositAcctTypeType(value); }
        public static implicit operator EFTDepositAcctTypeType(DBNull value) { return new EFTDepositAcctTypeType(null); }
    }
    public class EFTEndOfLineType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTEndOfLineType(string value) : base(value) { }
        public static implicit operator EFTEndOfLineType(string value) { return new EFTEndOfLineType(value); }
        public static implicit operator EFTEndOfLineType(DBNull value) { return new EFTEndOfLineType(null); }
    }
    public class EFTFieldDateFmtType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTFieldDateFmtType(int? value) : base(value) { }
        public static implicit operator EFTFieldDateFmtType(int? value) { return new EFTFieldDateFmtType(value); }
        public static implicit operator EFTFieldDateFmtType(DBNull value) { return new EFTFieldDateFmtType(null); }
        private EFTFieldDateFmtType(long? value) : base(value) { }
        public static implicit operator EFTFieldDateFmtType(long? value) { return new EFTFieldDateFmtType(value); }
    }
    public class EFTFieldLabelType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTFieldLabelType(string value) : base(value) { }
        public static implicit operator EFTFieldLabelType(string value) { return new EFTFieldLabelType(value); }
        public static implicit operator EFTFieldLabelType(DBNull value) { return new EFTFieldLabelType(null); }
    }
    public class EFTFieldNameType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTFieldNameType(string value) : base(value) { }
        public static implicit operator EFTFieldNameType(string value) { return new EFTFieldNameType(value); }
        public static implicit operator EFTFieldNameType(DBNull value) { return new EFTFieldNameType(null); }
    }
    public class EFTFileNameType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTFileNameType(string value) : base(value) { }
        public static implicit operator EFTFileNameType(string value) { return new EFTFileNameType(value); }
        public static implicit operator EFTFileNameType(DBNull value) { return new EFTFileNameType(null); }
    }
    public class EFTFileSizeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTFileSizeType(int? value) : base(value) { }
        public static implicit operator EFTFileSizeType(int? value) { return new EFTFileSizeType(value); }
        public static implicit operator EFTFileSizeType(DBNull value) { return new EFTFileSizeType(null); }
        private EFTFileSizeType(long? value) : base(value) { }
        public static implicit operator EFTFileSizeType(long? value) { return new EFTFileSizeType(value); }
    }
    public class EFTFileType : StringType
    {
        public override int Length { get => 34; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTFileType(string value) : base(value) { }
        public static implicit operator EFTFileType(string value) { return new EFTFileType(value); }
        public static implicit operator EFTFileType(DBNull value) { return new EFTFileType(null); }
    }
    public class EFTFormatType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTFormatType(string value) : base(value) { }
        public static implicit operator EFTFormatType(string value) { return new EFTFormatType(value); }
        public static implicit operator EFTFormatType(DBNull value) { return new EFTFormatType(null); }
    }
    public class EFTFormatTypeType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTFormatTypeType(string value) : base(value) { }
        public static implicit operator EFTFormatTypeType(string value) { return new EFTFormatTypeType(value); }
        public static implicit operator EFTFormatTypeType(DBNull value) { return new EFTFormatTypeType(null); }
    }
    public class EFTImportFieldNameType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTImportFieldNameType(string value) : base(value) { }
        public static implicit operator EFTImportFieldNameType(string value) { return new EFTImportFieldNameType(value); }
        public static implicit operator EFTImportFieldNameType(DBNull value) { return new EFTImportFieldNameType(null); }
    }
    public class EFTImportMethodType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTImportMethodType(string value) : base(value) { }
        public static implicit operator EFTImportMethodType(string value) { return new EFTImportMethodType(value); }
        public static implicit operator EFTImportMethodType(DBNull value) { return new EFTImportMethodType(null); }
    }
    public class EFTMappingDelimiterType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTMappingDelimiterType(string value) : base(value) { }
        public static implicit operator EFTMappingDelimiterType(string value) { return new EFTMappingDelimiterType(value); }
        public static implicit operator EFTMappingDelimiterType(DBNull value) { return new EFTMappingDelimiterType(null); }
    }
    public class EFTMappingFieldNumberType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTMappingFieldNumberType(byte? value) : base(value) { }
        public static implicit operator EFTMappingFieldNumberType(byte? value) { return new EFTMappingFieldNumberType(value); }
        public static implicit operator EFTMappingFieldNumberType(DBNull value) { return new EFTMappingFieldNumberType(null); }
        private EFTMappingFieldNumberType(int? value) : base(value) { }
        public static implicit operator EFTMappingFieldNumberType(int? value) { return new EFTMappingFieldNumberType(value); }
    }
    public class EFTMappingFieldPositionType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTMappingFieldPositionType(int? value) : base(value) { }
        public static implicit operator EFTMappingFieldPositionType(int? value) { return new EFTMappingFieldPositionType(value); }
        public static implicit operator EFTMappingFieldPositionType(DBNull value) { return new EFTMappingFieldPositionType(null); }
        private EFTMappingFieldPositionType(long? value) : base(value) { }
        public static implicit operator EFTMappingFieldPositionType(long? value) { return new EFTMappingFieldPositionType(value); }
    }
    public class EFTMappingIdType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTMappingIdType(string value) : base(value) { }
        public static implicit operator EFTMappingIdType(string value) { return new EFTMappingIdType(value); }
        public static implicit operator EFTMappingIdType(DBNull value) { return new EFTMappingIdType(null); }
    }
    public class EFTMappingRecordIdType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTMappingRecordIdType(string value) : base(value) { }
        public static implicit operator EFTMappingRecordIdType(string value) { return new EFTMappingRecordIdType(value); }
        public static implicit operator EFTMappingRecordIdType(DBNull value) { return new EFTMappingRecordIdType(null); }
    }
    public class EFTMappingTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTMappingTypeType(string value) : base(value) { }
        public static implicit operator EFTMappingTypeType(string value) { return new EFTMappingTypeType(value); }
        public static implicit operator EFTMappingTypeType(DBNull value) { return new EFTMappingTypeType(null); }
    }
    public class EFTNumberOfImpliedDecimalsType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTNumberOfImpliedDecimalsType(byte? value) : base(value) { }
        public static implicit operator EFTNumberOfImpliedDecimalsType(byte? value) { return new EFTNumberOfImpliedDecimalsType(value); }
        public static implicit operator EFTNumberOfImpliedDecimalsType(DBNull value) { return new EFTNumberOfImpliedDecimalsType(null); }
        private EFTNumberOfImpliedDecimalsType(int? value) : base(value) { }
        public static implicit operator EFTNumberOfImpliedDecimalsType(int? value) { return new EFTNumberOfImpliedDecimalsType(value); }
    }
    public class EFTParseStringSizeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTParseStringSizeType(int? value) : base(value) { }
        public static implicit operator EFTParseStringSizeType(int? value) { return new EFTParseStringSizeType(value); }
        public static implicit operator EFTParseStringSizeType(DBNull value) { return new EFTParseStringSizeType(null); }
        private EFTParseStringSizeType(long? value) : base(value) { }
        public static implicit operator EFTParseStringSizeType(long? value) { return new EFTParseStringSizeType(value); }
    }
    public class EFTParseStringType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTParseStringType(string value) : base(value) { }
        public static implicit operator EFTParseStringType(string value) { return new EFTParseStringType(value); }
        public static implicit operator EFTParseStringType(DBNull value) { return new EFTParseStringType(null); }
    }
    public class EFTRecordLengthType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTRecordLengthType(int? value) : base(value) { }
        public static implicit operator EFTRecordLengthType(int? value) { return new EFTRecordLengthType(value); }
        public static implicit operator EFTRecordLengthType(DBNull value) { return new EFTRecordLengthType(null); }
        private EFTRecordLengthType(long? value) : base(value) { }
        public static implicit operator EFTRecordLengthType(long? value) { return new EFTRecordLengthType(value); }
    }
    public class EFTRegistrationNumberType : StringType
    {
        public override int Length { get => 28; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTRegistrationNumberType(string value) : base(value) { }
        public static implicit operator EFTRegistrationNumberType(string value) { return new EFTRegistrationNumberType(value); }
        public static implicit operator EFTRegistrationNumberType(DBNull value) { return new EFTRegistrationNumberType(null); }
    }
    public class EFTStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTStatType(string value) : base(value) { }
        public static implicit operator EFTStatType(string value) { return new EFTStatType(value); }
        public static implicit operator EFTStatType(DBNull value) { return new EFTStatType(null); }
    }
    public class EFTTypeType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTTypeType(string value) : base(value) { }
        public static implicit operator EFTTypeType(string value) { return new EFTTypeType(value); }
        public static implicit operator EFTTypeType(DBNull value) { return new EFTTypeType(null); }
    }
    public class EFTUserNameType : StringType
    {
        public override int Length { get => 52; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTUserNameType(string value) : base(value) { }
        public static implicit operator EFTUserNameType(string value) { return new EFTUserNameType(value); }
        public static implicit operator EFTUserNameType(DBNull value) { return new EFTUserNameType(null); }
    }
    public class EFTUserNumberType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTUserNumberType(string value) : base(value) { }
        public static implicit operator EFTUserNumberType(string value) { return new EFTUserNumberType(value); }
        public static implicit operator EFTUserNumberType(DBNull value) { return new EFTUserNumberType(null); }
    }
    public class EFTValueConvIdType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTValueConvIdType(string value) : base(value) { }
        public static implicit operator EFTValueConvIdType(string value) { return new EFTValueConvIdType(value); }
        public static implicit operator EFTValueConvIdType(DBNull value) { return new EFTValueConvIdType(null); }
    }
    public class EFTValueType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EFTValueType(string value) : base(value) { }
        public static implicit operator EFTValueType(string value) { return new EFTValueType(value); }
        public static implicit operator EFTValueType(DBNull value) { return new EFTValueType(null); }
    }
    public class EICCreditsType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EICCreditsType(byte? value) : base(value) { }
        public static implicit operator EICCreditsType(byte? value) { return new EICCreditsType(value); }
        public static implicit operator EICCreditsType(DBNull value) { return new EICCreditsType(null); }
        private EICCreditsType(int? value) : base(value) { }
        public static implicit operator EICCreditsType(int? value) { return new EICCreditsType(value); }
    }
    public class ElectronicSignatureColumnValueType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ElectronicSignatureColumnValueType(string value) : base(value) { }
        public static implicit operator ElectronicSignatureColumnValueType(string value) { return new ElectronicSignatureColumnValueType(value); }
        public static implicit operator ElectronicSignatureColumnValueType(DBNull value) { return new ElectronicSignatureColumnValueType(null); }
    }
    public class ElectronicSignatureTypeType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ElectronicSignatureTypeType(string value) : base(value) { }
        public static implicit operator ElectronicSignatureTypeType(string value) { return new ElectronicSignatureTypeType(value); }
        public static implicit operator ElectronicSignatureTypeType(DBNull value) { return new ElectronicSignatureTypeType(null); }
    }
    public class EmailStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EmailStatusType(string value) : base(value) { }
        public static implicit operator EmailStatusType(string value) { return new EmailStatusType(value); }
        public static implicit operator EmailStatusType(DBNull value) { return new EmailStatusType(null); }
    }
    public class EmailType : StringType
    {
        public override int Length { get => 256; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EmailType(string value) : base(value) { }
        public static implicit operator EmailType(string value) { return new EmailType(value); }
        public static implicit operator EmailType(DBNull value) { return new EmailType(null); }
    }
    public class EmailTypeType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EmailTypeType(string value) : base(value) { }
        public static implicit operator EmailTypeType(string value) { return new EmailTypeType(value); }
        public static implicit operator EmailTypeType(DBNull value) { return new EmailTypeType(null); }
    }
    public class EmpAbsenceStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EmpAbsenceStatType(string value) : base(value) { }
        public static implicit operator EmpAbsenceStatType(string value) { return new EmpAbsenceStatType(value); }
        public static implicit operator EmpAbsenceStatType(DBNull value) { return new EmpAbsenceStatType(null); }
    }
    public class EmpCategoryType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EmpCategoryType(string value) : base(value) { }
        public static implicit operator EmpCategoryType(string value) { return new EmpCategoryType(value); }
        public static implicit operator EmpCategoryType(DBNull value) { return new EmpCategoryType(null); }
    }
    public class EmpContactPriorityType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EmpContactPriorityType(byte? value) : base(value) { }
        public static implicit operator EmpContactPriorityType(byte? value) { return new EmpContactPriorityType(value); }
        public static implicit operator EmpContactPriorityType(DBNull value) { return new EmpContactPriorityType(null); }
        private EmpContactPriorityType(int? value) : base(value) { }
        public static implicit operator EmpContactPriorityType(int? value) { return new EmpContactPriorityType(value); }
    }
    public class EmpDepTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EmpDepTypeType(string value) : base(value) { }
        public static implicit operator EmpDepTypeType(string value) { return new EmpDepTypeType(value); }
        public static implicit operator EmpDepTypeType(DBNull value) { return new EmpDepTypeType(null); }
    }
    public class EmpJobCoPoRmaProjPsTrnNumType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EmpJobCoPoRmaProjPsTrnNumType(string value) : base(value) { }
        public static implicit operator EmpJobCoPoRmaProjPsTrnNumType(string value) { return new EmpJobCoPoRmaProjPsTrnNumType(value); }
        public static implicit operator EmpJobCoPoRmaProjPsTrnNumType(DBNull value) { return new EmpJobCoPoRmaProjPsTrnNumType(null); }
    }
    public class EmpNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EmpNameType(string value) : base(value) { }
        public static implicit operator EmpNameType(string value) { return new EmpNameType(value); }
        public static implicit operator EmpNameType(DBNull value) { return new EmpNameType(null); }
    }
    public class EmpNumType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EmpNumType(string value) : base(value) { }
        public static implicit operator EmpNumType(string value) { return new EmpNumType(value); }
        public static implicit operator EmpNumType(DBNull value) { return new EmpNumType(null); }
    }
    public class EmpPrbankRankType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EmpPrbankRankType(short? value) : base(value) { }
        public static implicit operator EmpPrbankRankType(short? value) { return new EmpPrbankRankType(value); }
        public static implicit operator EmpPrbankRankType(DBNull value) { return new EmpPrbankRankType(null); }
        private EmpPrbankRankType(int? value) : base(value) { }
        public static implicit operator EmpPrbankRankType(int? value) { return new EmpPrbankRankType(value); }
    }
    public class EmpStatTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EmpStatTypeType(string value) : base(value) { }
        public static implicit operator EmpStatTypeType(string value) { return new EmpStatTypeType(value); }
        public static implicit operator EmpStatTypeType(DBNull value) { return new EmpStatTypeType(null); }
    }
    public class EmpStatusType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EmpStatusType(string value) : base(value) { }
        public static implicit operator EmpStatusType(string value) { return new EmpStatusType(value); }
        public static implicit operator EmpStatusType(DBNull value) { return new EmpStatusType(null); }
    }
    public class EmpTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EmpTypeType(string value) : base(value) { }
        public static implicit operator EmpTypeType(string value) { return new EmpTypeType(value); }
        public static implicit operator EmpTypeType(DBNull value) { return new EmpTypeType(null); }
    }
    public class EmpVendNumType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EmpVendNumType(string value) : base(value) { }
        public static implicit operator EmpVendNumType(string value) { return new EmpVendNumType(value); }
        public static implicit operator EmpVendNumType(DBNull value) { return new EmpVendNumType(null); }
    }
    public class EncodedImageType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EncodedImageType(string value) : base(value) { }
        public static implicit operator EncodedImageType(string value) { return new EncodedImageType(value); }
        public static implicit operator EncodedImageType(DBNull value) { return new EncodedImageType(null); }
    }
    public class EncryptedClientPasswordType : StringType
    {
        public override int Length { get => 300; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EncryptedClientPasswordType(string value) : base(value) { }
        public static implicit operator EncryptedClientPasswordType(string value) { return new EncryptedClientPasswordType(value); }
        public static implicit operator EncryptedClientPasswordType(DBNull value) { return new EncryptedClientPasswordType(null); }
    }
    public class EncryptedFileType : BinaryType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EncryptedFileType(Byte[] value) : base(value) { }
        public static implicit operator EncryptedFileType(Byte[] value) { return new EncryptedFileType(value); }
        public static implicit operator EncryptedFileType(DBNull value) { return new EncryptedFileType(null); }
    }
    public class EncryptedPasswordType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EncryptedPasswordType(string value) : base(value) { }
        public static implicit operator EncryptedPasswordType(string value) { return new EncryptedPasswordType(value); }
        public static implicit operator EncryptedPasswordType(DBNull value) { return new EncryptedPasswordType(null); }
    }
    public class EndUserType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EndUserType(string value) : base(value) { }
        public static implicit operator EndUserType(string value) { return new EndUserType(value); }
        public static implicit operator EndUserType(DBNull value) { return new EndUserType(null); }
    }
    public class EndUserTypeType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EndUserTypeType(string value) : base(value) { }
        public static implicit operator EndUserTypeType(string value) { return new EndUserTypeType(value); }
        public static implicit operator EndUserTypeType(DBNull value) { return new EndUserTypeType(null); }
    }
    public class ErrLogTrxNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ErrLogTrxNumType(string value) : base(value) { }
        public static implicit operator ErrLogTrxNumType(string value) { return new ErrLogTrxNumType(value); }
        public static implicit operator ErrLogTrxNumType(DBNull value) { return new ErrLogTrxNumType(null); }
    }
    public class ESBAccountingEntityIdType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBAccountingEntityIdType(string value) : base(value) { }
        public static implicit operator ESBAccountingEntityIdType(string value) { return new ESBAccountingEntityIdType(value); }
        public static implicit operator ESBAccountingEntityIdType(DBNull value) { return new ESBAccountingEntityIdType(null); }
    }
    public class ESBAgencyRoleType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBAgencyRoleType(string value) : base(value) { }
        public static implicit operator ESBAgencyRoleType(string value) { return new ESBAgencyRoleType(value); }
        public static implicit operator ESBAgencyRoleType(DBNull value) { return new ESBAgencyRoleType(null); }
    }
    public class ESBDrillbackLidType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBDrillbackLidType(string value) : base(value) { }
        public static implicit operator ESBDrillbackLidType(string value) { return new ESBDrillbackLidType(value); }
        public static implicit operator ESBDrillbackLidType(DBNull value) { return new ESBDrillbackLidType(null); }
    }
    public class ESBListYesNoType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBListYesNoType(int? value) : base(value) { }
        public static implicit operator ESBListYesNoType(int? value) { return new ESBListYesNoType(value); }
        public static implicit operator ESBListYesNoType(DBNull value) { return new ESBListYesNoType(null); }
        private ESBListYesNoType(long? value) : base(value) { }
        public static implicit operator ESBListYesNoType(long? value) { return new ESBListYesNoType(value); }
    }
    public class ESBLocationIdType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBLocationIdType(string value) : base(value) { }
        public static implicit operator ESBLocationIdType(string value) { return new ESBLocationIdType(value); }
        public static implicit operator ESBLocationIdType(DBNull value) { return new ESBLocationIdType(null); }
    }
    public class ESBLogicalIdType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBLogicalIdType(string value) : base(value) { }
        public static implicit operator ESBLogicalIdType(string value) { return new ESBLogicalIdType(value); }
        public static implicit operator ESBLogicalIdType(DBNull value) { return new ESBLogicalIdType(null); }
    }
    public class ESBMessageId2Type : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBMessageId2Type(string value) : base(value) { }
        public static implicit operator ESBMessageId2Type(string value) { return new ESBMessageId2Type(value); }
        public static implicit operator ESBMessageId2Type(DBNull value) { return new ESBMessageId2Type(null); }
    }
    public class ESBMessageIdType : LongType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 19; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBMessageIdType(long? value) : base(value) { }
        public static implicit operator ESBMessageIdType(long? value) { return new ESBMessageIdType(value); }
        public static implicit operator ESBMessageIdType(DBNull value) { return new ESBMessageIdType(null); }
    }
    public class ESBMessageXMLType : BinaryType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBMessageXMLType(Byte[] value) : base(value) { }
        public static implicit operator ESBMessageXMLType(Byte[] value) { return new ESBMessageXMLType(value); }
        public static implicit operator ESBMessageXMLType(DBNull value) { return new ESBMessageXMLType(null); }
    }
    public class ESBNounIdType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBNounIdType(string value) : base(value) { }
        public static implicit operator ESBNounIdType(string value) { return new ESBNounIdType(value); }
        public static implicit operator ESBNounIdType(DBNull value) { return new ESBNounIdType(null); }
    }
    public class ESBNounNameType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBNounNameType(string value) : base(value) { }
        public static implicit operator ESBNounNameType(string value) { return new ESBNounNameType(value); }
        public static implicit operator ESBNounNameType(DBNull value) { return new ESBNounNameType(null); }
    }
    public class ESBPriorityType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBPriorityType(int? value) : base(value) { }
        public static implicit operator ESBPriorityType(int? value) { return new ESBPriorityType(value); }
        public static implicit operator ESBPriorityType(DBNull value) { return new ESBPriorityType(null); }
        private ESBPriorityType(long? value) : base(value) { }
        public static implicit operator ESBPriorityType(long? value) { return new ESBPriorityType(value); }
    }
    public class ESBPropertyNameType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBPropertyNameType(string value) : base(value) { }
        public static implicit operator ESBPropertyNameType(string value) { return new ESBPropertyNameType(value); }
        public static implicit operator ESBPropertyNameType(DBNull value) { return new ESBPropertyNameType(null); }
    }
    public class ESBPropertyValueType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBPropertyValueType(string value) : base(value) { }
        public static implicit operator ESBPropertyValueType(string value) { return new ESBPropertyValueType(value); }
        public static implicit operator ESBPropertyValueType(DBNull value) { return new ESBPropertyValueType(null); }
    }
    public class ESBRevisionIdType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBRevisionIdType(string value) : base(value) { }
        public static implicit operator ESBRevisionIdType(string value) { return new ESBRevisionIdType(value); }
        public static implicit operator ESBRevisionIdType(DBNull value) { return new ESBRevisionIdType(null); }
    }
    public class ESBSystemIdType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBSystemIdType(string value) : base(value) { }
        public static implicit operator ESBSystemIdType(string value) { return new ESBSystemIdType(value); }
        public static implicit operator ESBSystemIdType(DBNull value) { return new ESBSystemIdType(null); }
    }
    public class ESBTenantIDType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBTenantIDType(string value) : base(value) { }
        public static implicit operator ESBTenantIDType(string value) { return new ESBTenantIDType(value); }
        public static implicit operator ESBTenantIDType(DBNull value) { return new ESBTenantIDType(null); }
    }
    public class ESBVariationIdType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ESBVariationIdType(string value) : base(value) { }
        public static implicit operator ESBVariationIdType(string value) { return new ESBVariationIdType(value); }
        public static implicit operator ESBVariationIdType(DBNull value) { return new ESBVariationIdType(null); }
    }
    public class EscapeCharactersType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EscapeCharactersType(string value) : base(value) { }
        public static implicit operator EscapeCharactersType(string value) { return new EscapeCharactersType(value); }
        public static implicit operator EscapeCharactersType(DBNull value) { return new EscapeCharactersType(null); }
    }
    public class EstJobPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EstJobPrefixType(string value) : base(value) { }
        public static implicit operator EstJobPrefixType(string value) { return new EstJobPrefixType(value); }
        public static implicit operator EstJobPrefixType(DBNull value) { return new EstJobPrefixType(null); }
    }
    public class EstNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EstNumType(string value) : base(value) { }
        public static implicit operator EstNumType(string value) { return new EstNumType(value); }
        public static implicit operator EstNumType(DBNull value) { return new EstNumType(null); }
    }
    public class EstPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EstPrefixType(string value) : base(value) { }
        public static implicit operator EstPrefixType(string value) { return new EstPrefixType(value); }
        public static implicit operator EstPrefixType(DBNull value) { return new EstPrefixType(null); }
    }
    public class EthnicIdType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EthnicIdType(string value) : base(value) { }
        public static implicit operator EthnicIdType(string value) { return new EthnicIdType(value); }
        public static implicit operator EthnicIdType(DBNull value) { return new EthnicIdType(null); }
    }
    public class EvalCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EvalCodeType(string value) : base(value) { }
        public static implicit operator EvalCodeType(string value) { return new EvalCodeType(value); }
        public static implicit operator EvalCodeType(DBNull value) { return new EvalCodeType(null); }
    }
    public class EventActionParmList2Type : StringType
    {
        public override int Length { get => 8000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventActionParmList2Type(string value) : base(value) { }
        public static implicit operator EventActionParmList2Type(string value) { return new EventActionParmList2Type(value); }
        public static implicit operator EventActionParmList2Type(DBNull value) { return new EventActionParmList2Type(null); }
    }
    public class EventActionParmListType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventActionParmListType(string value) : base(value) { }
        public static implicit operator EventActionParmListType(string value) { return new EventActionParmListType(value); }
        public static implicit operator EventActionParmListType(DBNull value) { return new EventActionParmListType(null); }
    }
    public class EventActionTypeType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventActionTypeType(byte? value) : base(value) { }
        public static implicit operator EventActionTypeType(byte? value) { return new EventActionTypeType(value); }
        public static implicit operator EventActionTypeType(DBNull value) { return new EventActionTypeType(null); }
        private EventActionTypeType(int? value) : base(value) { }
        public static implicit operator EventActionTypeType(int? value) { return new EventActionTypeType(value); }
    }
    public class EventAttachmentNameType : StringType
    {
        public override int Length { get => 264; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventAttachmentNameType(string value) : base(value) { }
        public static implicit operator EventAttachmentNameType(string value) { return new EventAttachmentNameType(value); }
        public static implicit operator EventAttachmentNameType(DBNull value) { return new EventAttachmentNameType(null); }
    }
    public class EventBigIntervalType : LongType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 19; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventBigIntervalType(long? value) : base(value) { }
        public static implicit operator EventBigIntervalType(long? value) { return new EventBigIntervalType(value); }
        public static implicit operator EventBigIntervalType(DBNull value) { return new EventBigIntervalType(null); }
    }
    public class EventBigQuorumType : LongType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 19; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventBigQuorumType(long? value) : base(value) { }
        public static implicit operator EventBigQuorumType(long? value) { return new EventBigQuorumType(value); }
        public static implicit operator EventBigQuorumType(DBNull value) { return new EventBigQuorumType(null); }
    }
    public class EventChronoType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventChronoType(string value) : base(value) { }
        public static implicit operator EventChronoType(string value) { return new EventChronoType(value); }
        public static implicit operator EventChronoType(DBNull value) { return new EventChronoType(null); }
    }
    public class EventConditionType : StringType
    {
        public override int Length { get => 6000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventConditionType(string value) : base(value) { }
        public static implicit operator EventConditionType(string value) { return new EventConditionType(value); }
        public static implicit operator EventConditionType(DBNull value) { return new EventConditionType(null); }
    }
    public class EventExpressionType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventExpressionType(string value) : base(value) { }
        public static implicit operator EventExpressionType(string value) { return new EventExpressionType(value); }
        public static implicit operator EventExpressionType(DBNull value) { return new EventExpressionType(null); }
    }
    public class EventGroupIdType : GuidType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventGroupIdType(Guid? value) : base(value) { }
        public static implicit operator EventGroupIdType(Guid? value) { return new EventGroupIdType(value); }
        public static implicit operator EventGroupIdType(DBNull value) { return new EventGroupIdType((Guid?)null); }
        private EventGroupIdType(string value) : base(value) { }
        public static implicit operator EventGroupIdType(string value) { return new EventGroupIdType(value); }
    }
    public class EventInitialStateNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventInitialStateNameType(string value) : base(value) { }
        public static implicit operator EventInitialStateNameType(string value) { return new EventInitialStateNameType(value); }
        public static implicit operator EventInitialStateNameType(DBNull value) { return new EventInitialStateNameType(null); }
    }
    public class EventIntervalType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventIntervalType(int? value) : base(value) { }
        public static implicit operator EventIntervalType(int? value) { return new EventIntervalType(value); }
        public static implicit operator EventIntervalType(DBNull value) { return new EventIntervalType(null); }
        private EventIntervalType(long? value) : base(value) { }
        public static implicit operator EventIntervalType(long? value) { return new EventIntervalType(value); }
    }
    public class EventNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventNameType(string value) : base(value) { }
        public static implicit operator EventNameType(string value) { return new EventNameType(value); }
        public static implicit operator EventNameType(DBNull value) { return new EventNameType(null); }
    }
    public class EventObjectListType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventObjectListType(string value) : base(value) { }
        public static implicit operator EventObjectListType(string value) { return new EventObjectListType(value); }
        public static implicit operator EventObjectListType(DBNull value) { return new EventObjectListType(null); }
    }
    public class EventObjectType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventObjectType(string value) : base(value) { }
        public static implicit operator EventObjectType(string value) { return new EventObjectType(value); }
        public static implicit operator EventObjectType(DBNull value) { return new EventObjectType(null); }
    }
    public class EventOccurrencesType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventOccurrencesType(int? value) : base(value) { }
        public static implicit operator EventOccurrencesType(int? value) { return new EventOccurrencesType(value); }
        public static implicit operator EventOccurrencesType(DBNull value) { return new EventOccurrencesType(null); }
        private EventOccurrencesType(long? value) : base(value) { }
        public static implicit operator EventOccurrencesType(long? value) { return new EventOccurrencesType(value); }
    }
    public class EventParmIdType : GuidType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventParmIdType(Guid? value) : base(value) { }
        public static implicit operator EventParmIdType(Guid? value) { return new EventParmIdType(value); }
        public static implicit operator EventParmIdType(DBNull value) { return new EventParmIdType((Guid?)null); }
        private EventParmIdType(string value) : base(value) { }
        public static implicit operator EventParmIdType(string value) { return new EventParmIdType(value); }
    }
    public class EventQueuedObjectTypeType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventQueuedObjectTypeType(byte? value) : base(value) { }
        public static implicit operator EventQueuedObjectTypeType(byte? value) { return new EventQueuedObjectTypeType(value); }
        public static implicit operator EventQueuedObjectTypeType(DBNull value) { return new EventQueuedObjectTypeType(null); }
        private EventQueuedObjectTypeType(int? value) : base(value) { }
        public static implicit operator EventQueuedObjectTypeType(int? value) { return new EventQueuedObjectTypeType(value); }
    }
    public class EventQueueIdType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventQueueIdType(int? value) : base(value) { }
        public static implicit operator EventQueueIdType(int? value) { return new EventQueueIdType(value); }
        public static implicit operator EventQueueIdType(DBNull value) { return new EventQueueIdType(null); }
        private EventQueueIdType(long? value) : base(value) { }
        public static implicit operator EventQueueIdType(long? value) { return new EventQueueIdType(value); }
    }
    public class EventQuorumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventQuorumType(int? value) : base(value) { }
        public static implicit operator EventQuorumType(int? value) { return new EventQuorumType(value); }
        public static implicit operator EventQuorumType(DBNull value) { return new EventQuorumType(null); }
        private EventQuorumType(long? value) : base(value) { }
        public static implicit operator EventQuorumType(long? value) { return new EventQuorumType(value); }
    }
    public class EventResultType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventResultType(string value) : base(value) { }
        public static implicit operator EventResultType(string value) { return new EventResultType(value); }
        public static implicit operator EventResultType(DBNull value) { return new EventResultType(null); }
    }
    public class EventRevisionType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventRevisionType(int? value) : base(value) { }
        public static implicit operator EventRevisionType(int? value) { return new EventRevisionType(value); }
        public static implicit operator EventRevisionType(DBNull value) { return new EventRevisionType(null); }
        private EventRevisionType(long? value) : base(value) { }
        public static implicit operator EventRevisionType(long? value) { return new EventRevisionType(value); }
    }
    public class EventSequenceType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventSequenceType(short? value) : base(value) { }
        public static implicit operator EventSequenceType(short? value) { return new EventSequenceType(value); }
        public static implicit operator EventSequenceType(DBNull value) { return new EventSequenceType(null); }
        private EventSequenceType(int? value) : base(value) { }
        public static implicit operator EventSequenceType(int? value) { return new EventSequenceType(value); }
    }
    public class EventStateIdType : GuidType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventStateIdType(Guid? value) : base(value) { }
        public static implicit operator EventStateIdType(Guid? value) { return new EventStateIdType(value); }
        public static implicit operator EventStateIdType(DBNull value) { return new EventStateIdType((Guid?)null); }
        private EventStateIdType(string value) : base(value) { }
        public static implicit operator EventStateIdType(string value) { return new EventStateIdType(value); }
    }
    public class EventStateType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventStateType(string value) : base(value) { }
        public static implicit operator EventStateType(string value) { return new EventStateType(value); }
        public static implicit operator EventStateType(DBNull value) { return new EventStateType(null); }
    }
    public class EventStatusType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventStatusType(byte? value) : base(value) { }
        public static implicit operator EventStatusType(byte? value) { return new EventStatusType(value); }
        public static implicit operator EventStatusType(DBNull value) { return new EventStatusType(null); }
        private EventStatusType(int? value) : base(value) { }
        public static implicit operator EventStatusType(int? value) { return new EventStatusType(value); }
    }
    public class EventTitleType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventTitleType(string value) : base(value) { }
        public static implicit operator EventTitleType(string value) { return new EventTitleType(value); }
        public static implicit operator EventTitleType(DBNull value) { return new EventTitleType(null); }
    }
    public class EventVariableAccessType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventVariableAccessType(string value) : base(value) { }
        public static implicit operator EventVariableAccessType(string value) { return new EventVariableAccessType(value); }
        public static implicit operator EventVariableAccessType(DBNull value) { return new EventVariableAccessType(null); }
    }
    public class EventVariableNameType : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventVariableNameType(string value) : base(value) { }
        public static implicit operator EventVariableNameType(string value) { return new EventVariableNameType(value); }
        public static implicit operator EventVariableNameType(DBNull value) { return new EventVariableNameType(null); }
    }
    public class EventVariableValueType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventVariableValueType(string value) : base(value) { }
        public static implicit operator EventVariableValueType(string value) { return new EventVariableValueType(value); }
        public static implicit operator EventVariableValueType(DBNull value) { return new EventVariableValueType(null); }
    }
    public class EventVotingChoiceStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventVotingChoiceStatusType(string value) : base(value) { }
        public static implicit operator EventVotingChoiceStatusType(string value) { return new EventVotingChoiceStatusType(value); }
        public static implicit operator EventVotingChoiceStatusType(DBNull value) { return new EventVotingChoiceStatusType(null); }
    }
    public class EventVotingMarginType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private EventVotingMarginType(decimal? value) : base(value) { }
        public static implicit operator EventVotingMarginType(decimal? value) { return new EventVotingMarginType(value); }
        public static implicit operator EventVotingMarginType(DBNull value) { return new EventVotingMarginType(null); }
    }
    public class EventVotingMinimumType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private EventVotingMinimumType(decimal? value) : base(value) { }
        public static implicit operator EventVotingMinimumType(decimal? value) { return new EventVotingMinimumType(value); }
        public static implicit operator EventVotingMinimumType(DBNull value) { return new EventVotingMinimumType(null); }
    }
    public class EventVotingRuleType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EventVotingRuleType(byte? value) : base(value) { }
        public static implicit operator EventVotingRuleType(byte? value) { return new EventVotingRuleType(value); }
        public static implicit operator EventVotingRuleType(DBNull value) { return new EventVotingRuleType(null); }
        private EventVotingRuleType(int? value) : base(value) { }
        public static implicit operator EventVotingRuleType(int? value) { return new EventVotingRuleType(value); }
    }
    public class ExamScoreType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private ExamScoreType(decimal? value) : base(value) { }
        public static implicit operator ExamScoreType(decimal? value) { return new ExamScoreType(value); }
        public static implicit operator ExamScoreType(DBNull value) { return new ExamScoreType(null); }
    }
    public class ExchangeNameType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExchangeNameType(string value) : base(value) { }
        public static implicit operator ExchangeNameType(string value) { return new ExchangeNameType(value); }
        public static implicit operator ExchangeNameType(DBNull value) { return new ExchangeNameType(null); }
    }
    public class ExchRateType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 12; }
        public override byte Scale { get => 7; }
        public override bool Nullable { get => true; }
        private ExchRateType(decimal? value) : base(value) { }
        public static implicit operator ExchRateType(decimal? value) { return new ExchRateType(value); }
        public static implicit operator ExchRateType(DBNull value) { return new ExchRateType(null); }
    }
    public class ExciseTaxPercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 4; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private ExciseTaxPercentType(decimal? value) : base(value) { }
        public static implicit operator ExciseTaxPercentType(decimal? value) { return new ExciseTaxPercentType(value); }
        public static implicit operator ExciseTaxPercentType(DBNull value) { return new ExciseTaxPercentType(null); }
    }
    public class ExcMessageType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExcMessageType(string value) : base(value) { }
        public static implicit operator ExcMessageType(string value) { return new ExcMessageType(value); }
        public static implicit operator ExcMessageType(DBNull value) { return new ExcMessageType(null); }
    }
    public class ExemptionsType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExemptionsType(byte? value) : base(value) { }
        public static implicit operator ExemptionsType(byte? value) { return new ExemptionsType(value); }
        public static implicit operator ExemptionsType(DBNull value) { return new ExemptionsType(null); }
        private ExemptionsType(int? value) : base(value) { }
        public static implicit operator ExemptionsType(int? value) { return new ExemptionsType(value); }
    }
    public class ExpCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExpCodeType(string value) : base(value) { }
        public static implicit operator ExpCodeType(string value) { return new ExpCodeType(value); }
        public static implicit operator ExpCodeType(DBNull value) { return new ExpCodeType(null); }
    }
    public class ExpectedNumberOfLeadsType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExpectedNumberOfLeadsType(int? value) : base(value) { }
        public static implicit operator ExpectedNumberOfLeadsType(int? value) { return new ExpectedNumberOfLeadsType(value); }
        public static implicit operator ExpectedNumberOfLeadsType(DBNull value) { return new ExpectedNumberOfLeadsType(null); }
        private ExpectedNumberOfLeadsType(long? value) : base(value) { }
        public static implicit operator ExpectedNumberOfLeadsType(long? value) { return new ExpectedNumberOfLeadsType(value); }
    }
    public class ExpectedReceiptCoLineJobSuffixType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExpectedReceiptCoLineJobSuffixType(short? value) : base(value) { }
        public static implicit operator ExpectedReceiptCoLineJobSuffixType(short? value) { return new ExpectedReceiptCoLineJobSuffixType(value); }
        public static implicit operator ExpectedReceiptCoLineJobSuffixType(DBNull value) { return new ExpectedReceiptCoLineJobSuffixType(null); }
        private ExpectedReceiptCoLineJobSuffixType(int? value) : base(value) { }
        public static implicit operator ExpectedReceiptCoLineJobSuffixType(int? value) { return new ExpectedReceiptCoLineJobSuffixType(value); }
    }
    public class ExpectedReceiptCoNumJobType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExpectedReceiptCoNumJobType(string value) : base(value) { }
        public static implicit operator ExpectedReceiptCoNumJobType(string value) { return new ExpectedReceiptCoNumJobType(value); }
        public static implicit operator ExpectedReceiptCoNumJobType(DBNull value) { return new ExpectedReceiptCoNumJobType(null); }
    }
    public class ExpectedReceiptCoReleaseType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExpectedReceiptCoReleaseType(short? value) : base(value) { }
        public static implicit operator ExpectedReceiptCoReleaseType(short? value) { return new ExpectedReceiptCoReleaseType(value); }
        public static implicit operator ExpectedReceiptCoReleaseType(DBNull value) { return new ExpectedReceiptCoReleaseType(null); }
        private ExpectedReceiptCoReleaseType(int? value) : base(value) { }
        public static implicit operator ExpectedReceiptCoReleaseType(int? value) { return new ExpectedReceiptCoReleaseType(value); }
    }
    public class ExpectedReceiptOJType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExpectedReceiptOJType(string value) : base(value) { }
        public static implicit operator ExpectedReceiptOJType(string value) { return new ExpectedReceiptOJType(value); }
        public static implicit operator ExpectedReceiptOJType(DBNull value) { return new ExpectedReceiptOJType(null); }
    }
    public class ExpenseTypeType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExpenseTypeType(string value) : base(value) { }
        public static implicit operator ExpenseTypeType(string value) { return new ExpenseTypeType(value); }
        public static implicit operator ExpenseTypeType(DBNull value) { return new ExpenseTypeType(null); }
    }
    public class ExplorerMenuPathType : StringType
    {
        public override int Length { get => 1000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExplorerMenuPathType(string value) : base(value) { }
        public static implicit operator ExplorerMenuPathType(string value) { return new ExplorerMenuPathType(value); }
        public static implicit operator ExplorerMenuPathType(DBNull value) { return new ExplorerMenuPathType(null); }
    }
    public class ExportComplianceProgramType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExportComplianceProgramType(string value) : base(value) { }
        public static implicit operator ExportComplianceProgramType(string value) { return new ExportComplianceProgramType(value); }
        public static implicit operator ExportComplianceProgramType(DBNull value) { return new ExportComplianceProgramType(null); }
    }
    public class ExportDocIdType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExportDocIdType(string value) : base(value) { }
        public static implicit operator ExportDocIdType(string value) { return new ExportDocIdType(value); }
        public static implicit operator ExportDocIdType(DBNull value) { return new ExportDocIdType(null); }
    }
    public class ExportDocumentTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExportDocumentTypeType(string value) : base(value) { }
        public static implicit operator ExportDocumentTypeType(string value) { return new ExportDocumentTypeType(value); }
        public static implicit operator ExportDocumentTypeType(DBNull value) { return new ExportDocumentTypeType(null); }
    }
    public class ExtDataStoreAccessKeyType : StringType
    {
        public override int Length { get => 880; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExtDataStoreAccessKeyType(string value) : base(value) { }
        public static implicit operator ExtDataStoreAccessKeyType(string value) { return new ExtDataStoreAccessKeyType(value); }
        public static implicit operator ExtDataStoreAccessKeyType(DBNull value) { return new ExtDataStoreAccessKeyType(null); }
    }
    public class ExtDataStoreLifetimeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExtDataStoreLifetimeType(short? value) : base(value) { }
        public static implicit operator ExtDataStoreLifetimeType(short? value) { return new ExtDataStoreLifetimeType(value); }
        public static implicit operator ExtDataStoreLifetimeType(DBNull value) { return new ExtDataStoreLifetimeType(null); }
        private ExtDataStoreLifetimeType(int? value) : base(value) { }
        public static implicit operator ExtDataStoreLifetimeType(int? value) { return new ExtDataStoreLifetimeType(value); }
    }
    public class ExtDataStoreValueType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExtDataStoreValueType(string value) : base(value) { }
        public static implicit operator ExtDataStoreValueType(string value) { return new ExtDataStoreValueType(value); }
        public static implicit operator ExtDataStoreValueType(DBNull value) { return new ExtDataStoreValueType(null); }
    }
    public class ExternalAbsenceIdType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalAbsenceIdType(string value) : base(value) { }
        public static implicit operator ExternalAbsenceIdType(string value) { return new ExternalAbsenceIdType(value); }
        public static implicit operator ExternalAbsenceIdType(DBNull value) { return new ExternalAbsenceIdType(null); }
    }
    public class ExternalCalendarSyncStateType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalCalendarSyncStateType(string value) : base(value) { }
        public static implicit operator ExternalCalendarSyncStateType(string value) { return new ExternalCalendarSyncStateType(value); }
        public static implicit operator ExternalCalendarSyncStateType(DBNull value) { return new ExternalCalendarSyncStateType(null); }
    }
    public class ExternalEntityAppCodeType : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalEntityAppCodeType(string value) : base(value) { }
        public static implicit operator ExternalEntityAppCodeType(string value) { return new ExternalEntityAppCodeType(value); }
        public static implicit operator ExternalEntityAppCodeType(DBNull value) { return new ExternalEntityAppCodeType(null); }
    }
    public class ExternalEntityCodeType : StringType
    {
        public override int Length { get => 128; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalEntityCodeType(string value) : base(value) { }
        public static implicit operator ExternalEntityCodeType(string value) { return new ExternalEntityCodeType(value); }
        public static implicit operator ExternalEntityCodeType(DBNull value) { return new ExternalEntityCodeType(null); }
    }
    public class ExternalEntityNameType : StringType
    {
        public override int Length { get => 256; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalEntityNameType(string value) : base(value) { }
        public static implicit operator ExternalEntityNameType(string value) { return new ExternalEntityNameType(value); }
        public static implicit operator ExternalEntityNameType(DBNull value) { return new ExternalEntityNameType(null); }
    }
    public class ExternalEntityRoleNameType : StringType
    {
        public override int Length { get => 256; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalEntityRoleNameType(string value) : base(value) { }
        public static implicit operator ExternalEntityRoleNameType(string value) { return new ExternalEntityRoleNameType(value); }
        public static implicit operator ExternalEntityRoleNameType(DBNull value) { return new ExternalEntityRoleNameType(null); }
    }
    public class ExternalGUIDType : GuidType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalGUIDType(Guid? value) : base(value) { }
        public static implicit operator ExternalGUIDType(Guid? value) { return new ExternalGUIDType(value); }
        public static implicit operator ExternalGUIDType(DBNull value) { return new ExternalGUIDType((Guid?)null); }
        private ExternalGUIDType(string value) : base(value) { }
        public static implicit operator ExternalGUIDType(string value) { return new ExternalGUIDType(value); }
    }
    public class ExternalHRStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalHRStatusType(string value) : base(value) { }
        public static implicit operator ExternalHRStatusType(string value) { return new ExternalHRStatusType(value); }
        public static implicit operator ExternalHRStatusType(DBNull value) { return new ExternalHRStatusType(null); }
    }
    public class ExternalMessageAttributeNameType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalMessageAttributeNameType(string value) : base(value) { }
        public static implicit operator ExternalMessageAttributeNameType(string value) { return new ExternalMessageAttributeNameType(value); }
        public static implicit operator ExternalMessageAttributeNameType(DBNull value) { return new ExternalMessageAttributeNameType(null); }
    }
    public class ExternalMessageEntityType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalMessageEntityType(string value) : base(value) { }
        public static implicit operator ExternalMessageEntityType(string value) { return new ExternalMessageEntityType(value); }
        public static implicit operator ExternalMessageEntityType(DBNull value) { return new ExternalMessageEntityType(null); }
    }
    public class ExternalMessageTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalMessageTypeType(string value) : base(value) { }
        public static implicit operator ExternalMessageTypeType(string value) { return new ExternalMessageTypeType(value); }
        public static implicit operator ExternalMessageTypeType(DBNull value) { return new ExternalMessageTypeType(null); }
    }
    public class ExternalMessageValueType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalMessageValueType(string value) : base(value) { }
        public static implicit operator ExternalMessageValueType(string value) { return new ExternalMessageValueType(value); }
        public static implicit operator ExternalMessageValueType(DBNull value) { return new ExternalMessageValueType(null); }
    }
    public class ExternalObjectSyncChangeKeyType : StringType
    {
        public override int Length { get => 1024; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalObjectSyncChangeKeyType(string value) : base(value) { }
        public static implicit operator ExternalObjectSyncChangeKeyType(string value) { return new ExternalObjectSyncChangeKeyType(value); }
        public static implicit operator ExternalObjectSyncChangeKeyType(DBNull value) { return new ExternalObjectSyncChangeKeyType(null); }
    }
    public class ExternalObjectSyncIdType : StringType
    {
        public override int Length { get => 1024; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalObjectSyncIdType(string value) : base(value) { }
        public static implicit operator ExternalObjectSyncIdType(string value) { return new ExternalObjectSyncIdType(value); }
        public static implicit operator ExternalObjectSyncIdType(DBNull value) { return new ExternalObjectSyncIdType(null); }
    }
    public class ExternalPickUpSheetIDType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalPickUpSheetIDType(string value) : base(value) { }
        public static implicit operator ExternalPickUpSheetIDType(string value) { return new ExternalPickUpSheetIDType(value); }
        public static implicit operator ExternalPickUpSheetIDType(DBNull value) { return new ExternalPickUpSheetIDType(null); }
    }
    public class ExternalReqNumType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalReqNumType(string value) : base(value) { }
        public static implicit operator ExternalReqNumType(string value) { return new ExternalReqNumType(value); }
        public static implicit operator ExternalReqNumType(DBNull value) { return new ExternalReqNumType(null); }
    }
    public class ExternalRoleNameType : StringType
    {
        public override int Length { get => 512; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ExternalRoleNameType(string value) : base(value) { }
        public static implicit operator ExternalRoleNameType(string value) { return new ExternalRoleNameType(value); }
        public static implicit operator ExternalRoleNameType(DBNull value) { return new ExternalRoleNameType(null); }
    }
    public class ExternalShipmentStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalShipmentStatusType(string value) : base(value) { }
        public static implicit operator ExternalShipmentStatusType(string value) { return new ExternalShipmentStatusType(value); }
        public static implicit operator ExternalShipmentStatusType(DBNull value) { return new ExternalShipmentStatusType(null); }
    }
    public class ExternalSyncStateType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalSyncStateType(string value) : base(value) { }
        public static implicit operator ExternalSyncStateType(string value) { return new ExternalSyncStateType(value); }
        public static implicit operator ExternalSyncStateType(DBNull value) { return new ExternalSyncStateType(null); }
    }
    public class ExternalTableNameType : StringType
    {
        public override int Length { get => 514; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExternalTableNameType(string value) : base(value) { }
        public static implicit operator ExternalTableNameType(string value) { return new ExternalTableNameType(value); }
        public static implicit operator ExternalTableNameType(DBNull value) { return new ExternalTableNameType(null); }
    }
    public class ExtFinExportCounterType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 24; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExtFinExportCounterType(decimal? value) : base(value) { }
        public static implicit operator ExtFinExportCounterType(decimal? value) { return new ExtFinExportCounterType(value); }
        public static implicit operator ExtFinExportCounterType(DBNull value) { return new ExtFinExportCounterType(null); }
    }
    public class ExtFinNameType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExtFinNameType(string value) : base(value) { }
        public static implicit operator ExtFinNameType(string value) { return new ExtFinNameType(value); }
        public static implicit operator ExtFinNameType(DBNull value) { return new ExtFinNameType(null); }
    }
    public class ExtPayPeriodNameType : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExtPayPeriodNameType(string value) : base(value) { }
        public static implicit operator ExtPayPeriodNameType(string value) { return new ExtPayPeriodNameType(value); }
        public static implicit operator ExtPayPeriodNameType(DBNull value) { return new ExtPayPeriodNameType(null); }
    }
    public class ExtSystemTransIdType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ExtSystemTransIdType(string value) : base(value) { }
        public static implicit operator ExtSystemTransIdType(string value) { return new ExtSystemTransIdType(value); }
        public static implicit operator ExtSystemTransIdType(DBNull value) { return new ExtSystemTransIdType(null); }
    }
    public class EZBCycleType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private EZBCycleType(string value) : base(value) { }
        public static implicit operator EZBCycleType(string value) { return new EZBCycleType(value); }
        public static implicit operator EZBCycleType(DBNull value) { return new EZBCycleType(null); }
    }
    public class FaClassType : StringType
    {
        public override int Length { get => 10; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaClassType(string value) : base(value) { }
        public static implicit operator FaClassType(string value) { return new FaClassType(value); }
        public static implicit operator FaClassType(DBNull value) { return new FaClassType(null); }
    }
    public class FaCostSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaCostSeqType(int? value) : base(value) { }
        public static implicit operator FaCostSeqType(int? value) { return new FaCostSeqType(value); }
        public static implicit operator FaCostSeqType(DBNull value) { return new FaCostSeqType(null); }
        private FaCostSeqType(long? value) : base(value) { }
        public static implicit operator FaCostSeqType(long? value) { return new FaCostSeqType(value); }
    }
    public class FaCostTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaCostTypeType(string value) : base(value) { }
        public static implicit operator FaCostTypeType(string value) { return new FaCostTypeType(value); }
        public static implicit operator FaCostTypeType(DBNull value) { return new FaCostTypeType(null); }
    }
    public class FaDeprPercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private FaDeprPercentType(decimal? value) : base(value) { }
        public static implicit operator FaDeprPercentType(decimal? value) { return new FaDeprPercentType(value); }
        public static implicit operator FaDeprPercentType(DBNull value) { return new FaDeprPercentType(null); }
    }
    public class FaDeprPeriodType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaDeprPeriodType(byte? value) : base(value) { }
        public static implicit operator FaDeprPeriodType(byte? value) { return new FaDeprPeriodType(value); }
        public static implicit operator FaDeprPeriodType(DBNull value) { return new FaDeprPeriodType(null); }
        private FaDeprPeriodType(int? value) : base(value) { }
        public static implicit operator FaDeprPeriodType(int? value) { return new FaDeprPeriodType(value); }
    }
    public class FaDeprSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaDeprSeqType(int? value) : base(value) { }
        public static implicit operator FaDeprSeqType(int? value) { return new FaDeprSeqType(value); }
        public static implicit operator FaDeprSeqType(DBNull value) { return new FaDeprSeqType(null); }
        private FaDeprSeqType(long? value) : base(value) { }
        public static implicit operator FaDeprSeqType(long? value) { return new FaDeprSeqType(value); }
    }
    public class FaDeptColumnType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaDeptColumnType(byte? value) : base(value) { }
        public static implicit operator FaDeptColumnType(byte? value) { return new FaDeptColumnType(value); }
        public static implicit operator FaDeptColumnType(DBNull value) { return new FaDeptColumnType(null); }
        private FaDeptColumnType(int? value) : base(value) { }
        public static implicit operator FaDeptColumnType(int? value) { return new FaDeptColumnType(value); }
    }
    public class FaDistSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaDistSeqType(int? value) : base(value) { }
        public static implicit operator FaDistSeqType(int? value) { return new FaDistSeqType(value); }
        public static implicit operator FaDistSeqType(DBNull value) { return new FaDistSeqType(null); }
        private FaDistSeqType(long? value) : base(value) { }
        public static implicit operator FaDistSeqType(long? value) { return new FaDistSeqType(value); }
    }
    public class FaInvNumType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaInvNumType(string value) : base(value) { }
        public static implicit operator FaInvNumType(string value) { return new FaInvNumType(value); }
        public static implicit operator FaInvNumType(DBNull value) { return new FaInvNumType(null); }
    }
    public class FamilyCodeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FamilyCodeType(string value) : base(value) { }
        public static implicit operator FamilyCodeType(string value) { return new FamilyCodeType(value); }
        public static implicit operator FamilyCodeType(DBNull value) { return new FamilyCodeType(null); }
    }
    public class FaModelType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaModelType(string value) : base(value) { }
        public static implicit operator FaModelType(string value) { return new FaModelType(value); }
        public static implicit operator FaModelType(DBNull value) { return new FaModelType(null); }
    }
    public class FaNumType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaNumType(string value) : base(value) { }
        public static implicit operator FaNumType(string value) { return new FaNumType(value); }
        public static implicit operator FaNumType(DBNull value) { return new FaNumType(null); }
    }
    public class FaPeriodsType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaPeriodsType(short? value) : base(value) { }
        public static implicit operator FaPeriodsType(short? value) { return new FaPeriodsType(value); }
        public static implicit operator FaPeriodsType(DBNull value) { return new FaPeriodsType(null); }
        private FaPeriodsType(int? value) : base(value) { }
        public static implicit operator FaPeriodsType(int? value) { return new FaPeriodsType(value); }
    }
    public class FaSerialType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaSerialType(string value) : base(value) { }
        public static implicit operator FaSerialType(string value) { return new FaSerialType(value); }
        public static implicit operator FaSerialType(DBNull value) { return new FaSerialType(null); }
    }
    public class FaStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaStatusType(string value) : base(value) { }
        public static implicit operator FaStatusType(string value) { return new FaStatusType(value); }
        public static implicit operator FaStatusType(DBNull value) { return new FaStatusType(null); }
    }
    public class FaTagType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaTagType(string value) : base(value) { }
        public static implicit operator FaTagType(string value) { return new FaTagType(value); }
        public static implicit operator FaTagType(DBNull value) { return new FaTagType(null); }
    }
    public class FaTranSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaTranSeqType(int? value) : base(value) { }
        public static implicit operator FaTranSeqType(int? value) { return new FaTranSeqType(value); }
        public static implicit operator FaTranSeqType(DBNull value) { return new FaTranSeqType(null); }
        private FaTranSeqType(long? value) : base(value) { }
        public static implicit operator FaTranSeqType(long? value) { return new FaTranSeqType(value); }
    }
    public class FaTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaTypeType(string value) : base(value) { }
        public static implicit operator FaTypeType(string value) { return new FaTypeType(value); }
        public static implicit operator FaTypeType(DBNull value) { return new FaTypeType(null); }
    }
    public class FaUnitsType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaUnitsType(int? value) : base(value) { }
        public static implicit operator FaUnitsType(int? value) { return new FaUnitsType(value); }
        public static implicit operator FaUnitsType(DBNull value) { return new FaUnitsType(null); }
        private FaUnitsType(long? value) : base(value) { }
        public static implicit operator FaUnitsType(long? value) { return new FaUnitsType(value); }
    }
    public class FaUsefulLifeType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaUsefulLifeType(byte? value) : base(value) { }
        public static implicit operator FaUsefulLifeType(byte? value) { return new FaUsefulLifeType(value); }
        public static implicit operator FaUsefulLifeType(DBNull value) { return new FaUsefulLifeType(null); }
        private FaUsefulLifeType(int? value) : base(value) { }
        public static implicit operator FaUsefulLifeType(int? value) { return new FaUsefulLifeType(value); }
    }
    public class FaxHeaderType : StringType
    {
        public override int Length { get => 2000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FaxHeaderType(string value) : base(value) { }
        public static implicit operator FaxHeaderType(string value) { return new FaxHeaderType(value); }
        public static implicit operator FaxHeaderType(DBNull value) { return new FaxHeaderType(null); }
    }
    public class FeatBlankType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FeatBlankType(string value) : base(value) { }
        public static implicit operator FeatBlankType(string value) { return new FeatBlankType(value); }
        public static implicit operator FeatBlankType(DBNull value) { return new FeatBlankType(null); }
    }
    public class FeatCodeLengthType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FeatCodeLengthType(byte? value) : base(value) { }
        public static implicit operator FeatCodeLengthType(byte? value) { return new FeatCodeLengthType(value); }
        public static implicit operator FeatCodeLengthType(DBNull value) { return new FeatCodeLengthType(null); }
        private FeatCodeLengthType(int? value) : base(value) { }
        public static implicit operator FeatCodeLengthType(int? value) { return new FeatCodeLengthType(value); }
    }
    public class FeatCodeOffsetType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FeatCodeOffsetType(byte? value) : base(value) { }
        public static implicit operator FeatCodeOffsetType(byte? value) { return new FeatCodeOffsetType(value); }
        public static implicit operator FeatCodeOffsetType(DBNull value) { return new FeatCodeOffsetType(null); }
        private FeatCodeOffsetType(int? value) : base(value) { }
        public static implicit operator FeatCodeOffsetType(int? value) { return new FeatCodeOffsetType(value); }
    }
    public class FeatQualStringType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FeatQualStringType(string value) : base(value) { }
        public static implicit operator FeatQualStringType(string value) { return new FeatQualStringType(value); }
        public static implicit operator FeatQualStringType(DBNull value) { return new FeatQualStringType(null); }
    }
    public class FeatRankType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FeatRankType(short? value) : base(value) { }
        public static implicit operator FeatRankType(short? value) { return new FeatRankType(value); }
        public static implicit operator FeatRankType(DBNull value) { return new FeatRankType(null); }
        private FeatRankType(int? value) : base(value) { }
        public static implicit operator FeatRankType(int? value) { return new FeatRankType(value); }
    }
    public class FeatSelQtyType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FeatSelQtyType(byte? value) : base(value) { }
        public static implicit operator FeatSelQtyType(byte? value) { return new FeatSelQtyType(value); }
        public static implicit operator FeatSelQtyType(DBNull value) { return new FeatSelQtyType(null); }
        private FeatSelQtyType(int? value) : base(value) { }
        public static implicit operator FeatSelQtyType(int? value) { return new FeatSelQtyType(value); }
    }
    public class FeatStrType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FeatStrType(string value) : base(value) { }
        public static implicit operator FeatStrType(string value) { return new FeatStrType(value); }
        public static implicit operator FeatStrType(DBNull value) { return new FeatStrType(null); }
    }
    public class FeatSuffixType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FeatSuffixType(short? value) : base(value) { }
        public static implicit operator FeatSuffixType(short? value) { return new FeatSuffixType(value); }
        public static implicit operator FeatSuffixType(DBNull value) { return new FeatSuffixType(null); }
        private FeatSuffixType(int? value) : base(value) { }
        public static implicit operator FeatSuffixType(int? value) { return new FeatSuffixType(value); }
    }
    public class FeatTemplateType : StringType
    {
        public override int Length { get => 110; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FeatTemplateType(string value) : base(value) { }
        public static implicit operator FeatTemplateType(string value) { return new FeatTemplateType(value); }
        public static implicit operator FeatTemplateType(DBNull value) { return new FeatTemplateType(null); }
    }
    public class FeatureType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FeatureType(string value) : base(value) { }
        public static implicit operator FeatureType(string value) { return new FeatureType(value); }
        public static implicit operator FeatureType(DBNull value) { return new FeatureType(null); }
    }
    public class FileServerTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FileServerTypeType(string value) : base(value) { }
        public static implicit operator FileServerTypeType(string value) { return new FileServerTypeType(value); }
        public static implicit operator FileServerTypeType(DBNull value) { return new FileServerTypeType(null); }
    }
    public class FileSpecType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FileSpecType(string value) : base(value) { }
        public static implicit operator FileSpecType(string value) { return new FileSpecType(value); }
        public static implicit operator FileSpecType(DBNull value) { return new FileSpecType(null); }
    }
    public class FilterColumnValueType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FilterColumnValueType(string value) : base(value) { }
        public static implicit operator FilterColumnValueType(string value) { return new FilterColumnValueType(value); }
        public static implicit operator FilterColumnValueType(DBNull value) { return new FilterColumnValueType(null); }
    }
    public class FilterSequenceType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FilterSequenceType(int? value) : base(value) { }
        public static implicit operator FilterSequenceType(int? value) { return new FilterSequenceType(value); }
        public static implicit operator FilterSequenceType(DBNull value) { return new FilterSequenceType(null); }
        private FilterSequenceType(long? value) : base(value) { }
        public static implicit operator FilterSequenceType(long? value) { return new FilterSequenceType(value); }
    }
    public class FilterType : StringType
    {
        public override int Length { get => 1500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FilterType(string value) : base(value) { }
        public static implicit operator FilterType(string value) { return new FilterType(value); }
        public static implicit operator FilterType(DBNull value) { return new FilterType(null); }
    }
    public class FinGroupSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FinGroupSeqType(short? value) : base(value) { }
        public static implicit operator FinGroupSeqType(short? value) { return new FinGroupSeqType(value); }
        public static implicit operator FinGroupSeqType(DBNull value) { return new FinGroupSeqType(null); }
        private FinGroupSeqType(int? value) : base(value) { }
        public static implicit operator FinGroupSeqType(int? value) { return new FinGroupSeqType(value); }
    }
    public class FinPeriodType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FinPeriodType(byte? value) : base(value) { }
        public static implicit operator FinPeriodType(byte? value) { return new FinPeriodType(value); }
        public static implicit operator FinPeriodType(DBNull value) { return new FinPeriodType(null); }
        private FinPeriodType(int? value) : base(value) { }
        public static implicit operator FinPeriodType(int? value) { return new FinPeriodType(value); }
    }
    public class FinStmtColType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FinStmtColType(byte? value) : base(value) { }
        public static implicit operator FinStmtColType(byte? value) { return new FinStmtColType(value); }
        public static implicit operator FinStmtColType(DBNull value) { return new FinStmtColType(null); }
        private FinStmtColType(int? value) : base(value) { }
        public static implicit operator FinStmtColType(int? value) { return new FinStmtColType(value); }
    }
    public class FinStmtColWidthType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FinStmtColWidthType(short? value) : base(value) { }
        public static implicit operator FinStmtColWidthType(short? value) { return new FinStmtColWidthType(value); }
        public static implicit operator FinStmtColWidthType(DBNull value) { return new FinStmtColWidthType(null); }
        private FinStmtColWidthType(int? value) : base(value) { }
        public static implicit operator FinStmtColWidthType(int? value) { return new FinStmtColWidthType(value); }
    }
    public class FinStmtGroupNumType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FinStmtGroupNumType(short? value) : base(value) { }
        public static implicit operator FinStmtGroupNumType(short? value) { return new FinStmtGroupNumType(value); }
        public static implicit operator FinStmtGroupNumType(DBNull value) { return new FinStmtGroupNumType(null); }
        private FinStmtGroupNumType(int? value) : base(value) { }
        public static implicit operator FinStmtGroupNumType(int? value) { return new FinStmtGroupNumType(value); }
    }
    public class FinStmtPosType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FinStmtPosType(short? value) : base(value) { }
        public static implicit operator FinStmtPosType(short? value) { return new FinStmtPosType(value); }
        public static implicit operator FinStmtPosType(DBNull value) { return new FinStmtPosType(null); }
        private FinStmtPosType(int? value) : base(value) { }
        public static implicit operator FinStmtPosType(int? value) { return new FinStmtPosType(value); }
    }
    public class FinStmtSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FinStmtSeqType(int? value) : base(value) { }
        public static implicit operator FinStmtSeqType(int? value) { return new FinStmtSeqType(value); }
        public static implicit operator FinStmtSeqType(DBNull value) { return new FinStmtSeqType(null); }
        private FinStmtSeqType(long? value) : base(value) { }
        public static implicit operator FinStmtSeqType(long? value) { return new FinStmtSeqType(value); }
    }
    public class FIPSCodeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FIPSCodeType(string value) : base(value) { }
        public static implicit operator FIPSCodeType(string value) { return new FIPSCodeType(value); }
        public static implicit operator FIPSCodeType(DBNull value) { return new FIPSCodeType(null); }
    }
    public class FirmPlnTargetType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FirmPlnTargetType(string value) : base(value) { }
        public static implicit operator FirmPlnTargetType(string value) { return new FirmPlnTargetType(value); }
        public static implicit operator FirmPlnTargetType(DBNull value) { return new FirmPlnTargetType(null); }
    }
    public class FiscalReportingSystemType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FiscalReportingSystemType(string value) : base(value) { }
        public static implicit operator FiscalReportingSystemType(string value) { return new FiscalReportingSystemType(value); }
        public static implicit operator FiscalReportingSystemType(DBNull value) { return new FiscalReportingSystemType(null); }
    }
    public class FiscalReportingSystemTypeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FiscalReportingSystemTypeType(string value) : base(value) { }
        public static implicit operator FiscalReportingSystemTypeType(string value) { return new FiscalReportingSystemTypeType(value); }
        public static implicit operator FiscalReportingSystemTypeType(DBNull value) { return new FiscalReportingSystemTypeType(null); }
    }
    public class FiscalYearType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FiscalYearType(short? value) : base(value) { }
        public static implicit operator FiscalYearType(short? value) { return new FiscalYearType(value); }
        public static implicit operator FiscalYearType(DBNull value) { return new FiscalYearType(null); }
        private FiscalYearType(int? value) : base(value) { }
        public static implicit operator FiscalYearType(int? value) { return new FiscalYearType(value); }
    }
    public class FixedHoursType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 8; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private FixedHoursType(decimal? value) : base(value) { }
        public static implicit operator FixedHoursType(decimal? value) { return new FixedHoursType(value); }
        public static implicit operator FixedHoursType(DBNull value) { return new FixedHoursType(null); }
    }
    public class Flag : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private Flag(byte? value) : base(value) { }
        public static implicit operator Flag(byte? value) { return new Flag(value); }
        public static implicit operator Flag(DBNull value) { return new Flag(null); }
        private Flag(int? value) : base(value) { }
        public static implicit operator Flag(int? value) { return new Flag(value); }
    }
    public class FlagIeType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FlagIeType(byte? value) : base(value) { }
        public static implicit operator FlagIeType(byte? value) { return new FlagIeType(value); }
        public static implicit operator FlagIeType(DBNull value) { return new FlagIeType(null); }
        private FlagIeType(int? value) : base(value) { }
        public static implicit operator FlagIeType(int? value) { return new FlagIeType(value); }
    }
    public class FlagNyType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FlagNyType(byte? value) : base(value) { }
        public static implicit operator FlagNyType(byte? value) { return new FlagNyType(value); }
        public static implicit operator FlagNyType(DBNull value) { return new FlagNyType(null); }
        private FlagNyType(int? value) : base(value) { }
        public static implicit operator FlagNyType(int? value) { return new FlagNyType(value); }
    }
    public class FldNameType : StringType
    {
        public override int Length { get => 256; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FldNameType(string value) : base(value) { }
        public static implicit operator FldNameType(string value) { return new FldNameType(value); }
        public static implicit operator FldNameType(DBNull value) { return new FldNameType(null); }
    }
    public class FlowTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FlowTypeType(string value) : base(value) { }
        public static implicit operator FlowTypeType(string value) { return new FlowTypeType(value); }
        public static implicit operator FlowTypeType(DBNull value) { return new FlowTypeType(null); }
    }
    public class FmType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FmType(string value) : base(value) { }
        public static implicit operator FmType(string value) { return new FmType(value); }
        public static implicit operator FmType(DBNull value) { return new FmType(null); }
    }
    public class FmTypeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FmTypeType(short? value) : base(value) { }
        public static implicit operator FmTypeType(short? value) { return new FmTypeType(value); }
        public static implicit operator FmTypeType(DBNull value) { return new FmTypeType(null); }
        private FmTypeType(int? value) : base(value) { }
        public static implicit operator FmTypeType(int? value) { return new FmTypeType(value); }
    }
    public class FmVerType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FmVerType(string value) : base(value) { }
        public static implicit operator FmVerType(string value) { return new FmVerType(value); }
        public static implicit operator FmVerType(DBNull value) { return new FmVerType(null); }
    }
    public class FOBType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FOBType(string value) : base(value) { }
        public static implicit operator FOBType(string value) { return new FOBType(value); }
        public static implicit operator FOBType(DBNull value) { return new FOBType(null); }
    }
    public class FolderNameType : StringType
    {
        public override int Length { get => 64; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FolderNameType(string value) : base(value) { }
        public static implicit operator FolderNameType(string value) { return new FolderNameType(value); }
        public static implicit operator FolderNameType(DBNull value) { return new FolderNameType(null); }
    }
    public class FolderTemplateType : StringType
    {
        public override int Length { get => 512; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FolderTemplateType(string value) : base(value) { }
        public static implicit operator FolderTemplateType(string value) { return new FolderTemplateType(value); }
        public static implicit operator FolderTemplateType(DBNull value) { return new FolderTemplateType(null); }
    }
    public class FontColorType : StringType
    {
        public override int Length { get => 22; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FontColorType(string value) : base(value) { }
        public static implicit operator FontColorType(string value) { return new FontColorType(value); }
        public static implicit operator FontColorType(DBNull value) { return new FontColorType(null); }
    }
    public class FontDescriptorType : StringType
    {
        public override int Length { get => 128; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FontDescriptorType(string value) : base(value) { }
        public static implicit operator FontDescriptorType(string value) { return new FontDescriptorType(value); }
        public static implicit operator FontDescriptorType(DBNull value) { return new FontDescriptorType(null); }
    }
    public class ForecastStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ForecastStatusType(string value) : base(value) { }
        public static implicit operator ForecastStatusType(string value) { return new ForecastStatusType(value); }
        public static implicit operator ForecastStatusType(DBNull value) { return new ForecastStatusType(null); }
    }
    public class ForeignKeyPrefixType : StringType
    {
        public override int Length { get => 44; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ForeignKeyPrefixType(string value) : base(value) { }
        public static implicit operator ForeignKeyPrefixType(string value) { return new ForeignKeyPrefixType(value); }
        public static implicit operator ForeignKeyPrefixType(DBNull value) { return new ForeignKeyPrefixType(null); }
    }
    public class FormActionThresholdType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FormActionThresholdType(int? value) : base(value) { }
        public static implicit operator FormActionThresholdType(int? value) { return new FormActionThresholdType(value); }
        public static implicit operator FormActionThresholdType(DBNull value) { return new FormActionThresholdType(null); }
        private FormActionThresholdType(long? value) : base(value) { }
        public static implicit operator FormActionThresholdType(long? value) { return new FormActionThresholdType(value); }
    }
    public class FormEditorType : StringType
    {
        public override int Length { get => 1500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FormEditorType(string value) : base(value) { }
        public static implicit operator FormEditorType(string value) { return new FormEditorType(value); }
        public static implicit operator FormEditorType(DBNull value) { return new FormEditorType(null); }
    }
    public class FormJobType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FormJobType(string value) : base(value) { }
        public static implicit operator FormJobType(string value) { return new FormJobType(value); }
        public static implicit operator FormJobType(DBNull value) { return new FormJobType(null); }
    }
    public class FormMetricsBottomType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FormMetricsBottomType(string value) : base(value) { }
        public static implicit operator FormMetricsBottomType(string value) { return new FormMetricsBottomType(value); }
        public static implicit operator FormMetricsBottomType(DBNull value) { return new FormMetricsBottomType(null); }
    }
    public class FormMetricsHeightType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FormMetricsHeightType(string value) : base(value) { }
        public static implicit operator FormMetricsHeightType(string value) { return new FormMetricsHeightType(value); }
        public static implicit operator FormMetricsHeightType(DBNull value) { return new FormMetricsHeightType(null); }
    }
    public class FormMetricsSpaceType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FormMetricsSpaceType(string value) : base(value) { }
        public static implicit operator FormMetricsSpaceType(string value) { return new FormMetricsSpaceType(value); }
        public static implicit operator FormMetricsSpaceType(DBNull value) { return new FormMetricsSpaceType(null); }
    }
    public class FormMetricsTopType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FormMetricsTopType(string value) : base(value) { }
        public static implicit operator FormMetricsTopType(string value) { return new FormMetricsTopType(value); }
        public static implicit operator FormMetricsTopType(DBNull value) { return new FormMetricsTopType(null); }
    }
    public class FormMetricsWidthType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FormMetricsWidthType(string value) : base(value) { }
        public static implicit operator FormMetricsWidthType(string value) { return new FormMetricsWidthType(value); }
        public static implicit operator FormMetricsWidthType(DBNull value) { return new FormMetricsWidthType(null); }
    }
    public class FormNameOrCaptionType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FormNameOrCaptionType(string value) : base(value) { }
        public static implicit operator FormNameOrCaptionType(string value) { return new FormNameOrCaptionType(value); }
        public static implicit operator FormNameOrCaptionType(DBNull value) { return new FormNameOrCaptionType(null); }
    }
    public class FormNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FormNameType(string value) : base(value) { }
        public static implicit operator FormNameType(string value) { return new FormNameType(value); }
        public static implicit operator FormNameType(DBNull value) { return new FormNameType(null); }
    }
    public class FormPositionType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FormPositionType(short? value) : base(value) { }
        public static implicit operator FormPositionType(short? value) { return new FormPositionType(value); }
        public static implicit operator FormPositionType(DBNull value) { return new FormPositionType(null); }
        private FormPositionType(int? value) : base(value) { }
        public static implicit operator FormPositionType(int? value) { return new FormPositionType(value); }
    }
    public class FormsDBThemeNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FormsDBThemeNameType(string value) : base(value) { }
        public static implicit operator FormsDBThemeNameType(string value) { return new FormsDBThemeNameType(value); }
        public static implicit operator FormsDBThemeNameType(DBNull value) { return new FormsDBThemeNameType(null); }
    }
    public class FormSizeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FormSizeType(short? value) : base(value) { }
        public static implicit operator FormSizeType(short? value) { return new FormSizeType(value); }
        public static implicit operator FormSizeType(DBNull value) { return new FormSizeType(null); }
        private FormSizeType(int? value) : base(value) { }
        public static implicit operator FormSizeType(int? value) { return new FormSizeType(value); }
    }
    public class FRBusinessLegalStructureType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FRBusinessLegalStructureType(string value) : base(value) { }
        public static implicit operator FRBusinessLegalStructureType(string value) { return new FRBusinessLegalStructureType(value); }
        public static implicit operator FRBusinessLegalStructureType(DBNull value) { return new FRBusinessLegalStructureType(null); }
    }
    public class FRCategoryType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FRCategoryType(string value) : base(value) { }
        public static implicit operator FRCategoryType(string value) { return new FRCategoryType(value); }
        public static implicit operator FRCategoryType(DBNull value) { return new FRCategoryType(null); }
    }
    public class FRCodeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FRCodeType(short? value) : base(value) { }
        public static implicit operator FRCodeType(short? value) { return new FRCodeType(value); }
        public static implicit operator FRCodeType(DBNull value) { return new FRCodeType(null); }
        private FRCodeType(int? value) : base(value) { }
        public static implicit operator FRCodeType(int? value) { return new FRCodeType(value); }
    }
    public class FreightChargeMethodType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FreightChargeMethodType(string value) : base(value) { }
        public static implicit operator FreightChargeMethodType(string value) { return new FreightChargeMethodType(value); }
        public static implicit operator FreightChargeMethodType(DBNull value) { return new FreightChargeMethodType(null); }
    }
    public class FreightClassType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FreightClassType(string value) : base(value) { }
        public static implicit operator FreightClassType(string value) { return new FreightClassType(value); }
        public static implicit operator FreightClassType(DBNull value) { return new FreightClassType(null); }
    }
    public class FRJournalOfTechnicalEventCategoryType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FRJournalOfTechnicalEventCategoryType(string value) : base(value) { }
        public static implicit operator FRJournalOfTechnicalEventCategoryType(string value) { return new FRJournalOfTechnicalEventCategoryType(value); }
        public static implicit operator FRJournalOfTechnicalEventCategoryType(DBNull value) { return new FRJournalOfTechnicalEventCategoryType(null); }
    }
    public class FRJournalOfTechnicalEventCodeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FRJournalOfTechnicalEventCodeType(short? value) : base(value) { }
        public static implicit operator FRJournalOfTechnicalEventCodeType(short? value) { return new FRJournalOfTechnicalEventCodeType(value); }
        public static implicit operator FRJournalOfTechnicalEventCodeType(DBNull value) { return new FRJournalOfTechnicalEventCodeType(null); }
        private FRJournalOfTechnicalEventCodeType(int? value) : base(value) { }
        public static implicit operator FRJournalOfTechnicalEventCodeType(int? value) { return new FRJournalOfTechnicalEventCodeType(value); }
    }
    public class FRLedgerReconciliationLetterType : StringType
    {
        public override int Length { get => 10; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FRLedgerReconciliationLetterType(string value) : base(value) { }
        public static implicit operator FRLedgerReconciliationLetterType(string value) { return new FRLedgerReconciliationLetterType(value); }
        public static implicit operator FRLedgerReconciliationLetterType(DBNull value) { return new FRLedgerReconciliationLetterType(null); }
    }
    public class FRReportTextType : StringType
    {
        public override int Length { get => 480; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FRReportTextType(string value) : base(value) { }
        public static implicit operator FRReportTextType(string value) { return new FRReportTextType(value); }
        public static implicit operator FRReportTextType(DBNull value) { return new FRReportTextType(null); }
    }
    public class FRTradeRegisterNumType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FRTradeRegisterNumType(string value) : base(value) { }
        public static implicit operator FRTradeRegisterNumType(string value) { return new FRTradeRegisterNumType(value); }
        public static implicit operator FRTradeRegisterNumType(DBNull value) { return new FRTradeRegisterNumType(null); }
    }
    public class FSACMItemStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSACMItemStatType(string value) : base(value) { }
        public static implicit operator FSACMItemStatType(string value) { return new FSACMItemStatType(value); }
        public static implicit operator FSACMItemStatType(DBNull value) { return new FSACMItemStatType(null); }
    }
    public class FSACMNumType : StringType
    {
        public override int Length { get => 38; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSACMNumType(string value) : base(value) { }
        public static implicit operator FSACMNumType(string value) { return new FSACMNumType(value); }
        public static implicit operator FSACMNumType(DBNull value) { return new FSACMNumType(null); }
    }
    public class FSACMStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSACMStatType(string value) : base(value) { }
        public static implicit operator FSACMStatType(string value) { return new FSACMStatType(value); }
        public static implicit operator FSACMStatType(DBNull value) { return new FSACMStatType(null); }
    }
    public class FSACMTransDateFromType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSACMTransDateFromType(string value) : base(value) { }
        public static implicit operator FSACMTransDateFromType(string value) { return new FSACMTransDateFromType(value); }
        public static implicit operator FSACMTransDateFromType(DBNull value) { return new FSACMTransDateFromType(null); }
    }
    public class FSAlertIdType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSAlertIdType(string value) : base(value) { }
        public static implicit operator FSAlertIdType(string value) { return new FSAlertIdType(value); }
        public static implicit operator FSAlertIdType(DBNull value) { return new FSAlertIdType(null); }
    }
    public class FSApptStatType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSApptStatType(string value) : base(value) { }
        public static implicit operator FSApptStatType(string value) { return new FSApptStatType(value); }
        public static implicit operator FSApptStatType(DBNull value) { return new FSApptStatType(null); }
    }
    public class FSApptTypeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSApptTypeType(string value) : base(value) { }
        public static implicit operator FSApptTypeType(string value) { return new FSApptTypeType(value); }
        public static implicit operator FSApptTypeType(DBNull value) { return new FSApptTypeType(null); }
    }
    public class FSAqmConnPwdType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSAqmConnPwdType(string value) : base(value) { }
        public static implicit operator FSAqmConnPwdType(string value) { return new FSAqmConnPwdType(value); }
        public static implicit operator FSAqmConnPwdType(DBNull value) { return new FSAqmConnPwdType(null); }
    }
    public class FSAqmConnUserType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSAqmConnUserType(string value) : base(value) { }
        public static implicit operator FSAqmConnUserType(string value) { return new FSAqmConnUserType(value); }
        public static implicit operator FSAqmConnUserType(DBNull value) { return new FSAqmConnUserType(null); }
    }
    public class FSBChartOfAcctNameType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSBChartOfAcctNameType(string value) : base(value) { }
        public static implicit operator FSBChartOfAcctNameType(string value) { return new FSBChartOfAcctNameType(value); }
        public static implicit operator FSBChartOfAcctNameType(DBNull value) { return new FSBChartOfAcctNameType(null); }
    }
    public class FSBFinPeriodType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSBFinPeriodType(int? value) : base(value) { }
        public static implicit operator FSBFinPeriodType(int? value) { return new FSBFinPeriodType(value); }
        public static implicit operator FSBFinPeriodType(DBNull value) { return new FSBFinPeriodType(null); }
        private FSBFinPeriodType(long? value) : base(value) { }
        public static implicit operator FSBFinPeriodType(long? value) { return new FSBFinPeriodType(value); }
    }
    public class FSBNameType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSBNameType(string value) : base(value) { }
        public static implicit operator FSBNameType(string value) { return new FSBNameType(value); }
        public static implicit operator FSBNameType(DBNull value) { return new FSBNameType(null); }
    }
    public class FSBPeriodNameType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSBPeriodNameType(string value) : base(value) { }
        public static implicit operator FSBPeriodNameType(string value) { return new FSBPeriodNameType(value); }
        public static implicit operator FSBPeriodNameType(DBNull value) { return new FSBPeriodNameType(null); }
    }
    public class FSCalcLineTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSCalcLineTypeType(string value) : base(value) { }
        public static implicit operator FSCalcLineTypeType(string value) { return new FSCalcLineTypeType(value); }
        public static implicit operator FSCalcLineTypeType(DBNull value) { return new FSCalcLineTypeType(null); }
    }
    public class FSCgsRevLocType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSCgsRevLocType(string value) : base(value) { }
        public static implicit operator FSCgsRevLocType(string value) { return new FSCgsRevLocType(value); }
        public static implicit operator FSCgsRevLocType(DBNull value) { return new FSCgsRevLocType(null); }
    }
    public class FSChangeBranchType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSChangeBranchType(string value) : base(value) { }
        public static implicit operator FSChangeBranchType(string value) { return new FSChangeBranchType(value); }
        public static implicit operator FSChangeBranchType(DBNull value) { return new FSChangeBranchType(null); }
    }
    public class FSColorType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSColorType(int? value) : base(value) { }
        public static implicit operator FSColorType(int? value) { return new FSColorType(value); }
        public static implicit operator FSColorType(DBNull value) { return new FSColorType(null); }
        private FSColorType(long? value) : base(value) { }
        public static implicit operator FSColorType(long? value) { return new FSColorType(value); }
    }
    public class FSColumnWidthType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSColumnWidthType(int? value) : base(value) { }
        public static implicit operator FSColumnWidthType(int? value) { return new FSColumnWidthType(value); }
        public static implicit operator FSColumnWidthType(DBNull value) { return new FSColumnWidthType(null); }
        private FSColumnWidthType(long? value) : base(value) { }
        public static implicit operator FSColumnWidthType(long? value) { return new FSColumnWidthType(value); }
    }
    public class FSCommDuePayType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSCommDuePayType(string value) : base(value) { }
        public static implicit operator FSCommDuePayType(string value) { return new FSCommDuePayType(value); }
        public static implicit operator FSCommDuePayType(DBNull value) { return new FSCommDuePayType(null); }
    }
    public class FSCompIdType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSCompIdType(int? value) : base(value) { }
        public static implicit operator FSCompIdType(int? value) { return new FSCompIdType(value); }
        public static implicit operator FSCompIdType(DBNull value) { return new FSCompIdType(null); }
        private FSCompIdType(long? value) : base(value) { }
        public static implicit operator FSCompIdType(long? value) { return new FSCompIdType(value); }
    }
    public class FSConfigUpdateMethod : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSConfigUpdateMethod(string value) : base(value) { }
        public static implicit operator FSConfigUpdateMethod(string value) { return new FSConfigUpdateMethod(value); }
        public static implicit operator FSConfigUpdateMethod(DBNull value) { return new FSConfigUpdateMethod(null); }
    }
    public class FSConfigUpdateMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSConfigUpdateMethodType(string value) : base(value) { }
        public static implicit operator FSConfigUpdateMethodType(string value) { return new FSConfigUpdateMethodType(value); }
        public static implicit operator FSConfigUpdateMethodType(DBNull value) { return new FSConfigUpdateMethodType(null); }
    }
    public class FSContactNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSContactNumType(int? value) : base(value) { }
        public static implicit operator FSContactNumType(int? value) { return new FSContactNumType(value); }
        public static implicit operator FSContactNumType(DBNull value) { return new FSContactNumType(null); }
        private FSContactNumType(long? value) : base(value) { }
        public static implicit operator FSContactNumType(long? value) { return new FSContactNumType(value); }
    }
    public class FSContBillFreqType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSContBillFreqType(string value) : base(value) { }
        public static implicit operator FSContBillFreqType(string value) { return new FSContBillFreqType(value); }
        public static implicit operator FSContBillFreqType(DBNull value) { return new FSContBillFreqType(null); }
    }
    public class FSContBillTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSContBillTypeType(string value) : base(value) { }
        public static implicit operator FSContBillTypeType(string value) { return new FSContBillTypeType(value); }
        public static implicit operator FSContBillTypeType(DBNull value) { return new FSContBillTypeType(null); }
    }
    public class FSContLineType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSContLineType(int? value) : base(value) { }
        public static implicit operator FSContLineType(int? value) { return new FSContLineType(value); }
        public static implicit operator FSContLineType(DBNull value) { return new FSContLineType(null); }
        private FSContLineType(long? value) : base(value) { }
        public static implicit operator FSContLineType(long? value) { return new FSContLineType(value); }
    }
    public class FSContMntStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSContMntStatType(string value) : base(value) { }
        public static implicit operator FSContMntStatType(string value) { return new FSContMntStatType(value); }
        public static implicit operator FSContMntStatType(DBNull value) { return new FSContMntStatType(null); }
    }
    public class FSContPriceBasisType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSContPriceBasisType(string value) : base(value) { }
        public static implicit operator FSContPriceBasisType(string value) { return new FSContPriceBasisType(value); }
        public static implicit operator FSContPriceBasisType(DBNull value) { return new FSContPriceBasisType(null); }
    }
    public class FSContractType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSContractType(string value) : base(value) { }
        public static implicit operator FSContractType(string value) { return new FSContractType(value); }
        public static implicit operator FSContractType(DBNull value) { return new FSContractType(null); }
    }
    public class FSContServTypeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSContServTypeType(string value) : base(value) { }
        public static implicit operator FSContServTypeType(string value) { return new FSContServTypeType(value); }
        public static implicit operator FSContServTypeType(DBNull value) { return new FSContServTypeType(null); }
    }
    public class FSContStatType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSContStatType(string value) : base(value) { }
        public static implicit operator FSContStatType(string value) { return new FSContStatType(value); }
        public static implicit operator FSContStatType(DBNull value) { return new FSContStatType(null); }
    }
    public class FSContSurchargeFreqType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSContSurchargeFreqType(string value) : base(value) { }
        public static implicit operator FSContSurchargeFreqType(string value) { return new FSContSurchargeFreqType(value); }
        public static implicit operator FSContSurchargeFreqType(DBNull value) { return new FSContSurchargeFreqType(null); }
    }
    public class FSContSurchargeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSContSurchargeType(string value) : base(value) { }
        public static implicit operator FSContSurchargeType(string value) { return new FSContSurchargeType(value); }
        public static implicit operator FSContSurchargeType(DBNull value) { return new FSContSurchargeType(null); }
    }
    public class FSContSurchargeTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSContSurchargeTypeType(string value) : base(value) { }
        public static implicit operator FSContSurchargeTypeType(string value) { return new FSContSurchargeTypeType(value); }
        public static implicit operator FSContSurchargeTypeType(DBNull value) { return new FSContSurchargeTypeType(null); }
    }
    public class FSContUnitOfRateType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSContUnitOfRateType(string value) : base(value) { }
        public static implicit operator FSContUnitOfRateType(string value) { return new FSContUnitOfRateType(value); }
        public static implicit operator FSContUnitOfRateType(DBNull value) { return new FSContUnitOfRateType(null); }
    }
    public class FSCustomerDirectionsType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSCustomerDirectionsType(string value) : base(value) { }
        public static implicit operator FSCustomerDirectionsType(string value) { return new FSCustomerDirectionsType(value); }
        public static implicit operator FSCustomerDirectionsType(DBNull value) { return new FSCustomerDirectionsType(null); }
    }
    public class FSDayOfMonthType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSDayOfMonthType(short? value) : base(value) { }
        public static implicit operator FSDayOfMonthType(short? value) { return new FSDayOfMonthType(value); }
        public static implicit operator FSDayOfMonthType(DBNull value) { return new FSDayOfMonthType(null); }
        private FSDayOfMonthType(int? value) : base(value) { }
        public static implicit operator FSDayOfMonthType(int? value) { return new FSDayOfMonthType(value); }
    }
    public class FSDaysToMonthType : DecimalType
    {
        public override int Length { get => 17; }
        public override byte Precision { get => 38; }
        public override byte Scale { get => 10; }
        public override bool Nullable { get => true; }
        private FSDaysToMonthType(decimal? value) : base(value) { }
        public static implicit operator FSDaysToMonthType(decimal? value) { return new FSDaysToMonthType(value); }
        public static implicit operator FSDaysToMonthType(DBNull value) { return new FSDaysToMonthType(null); }
    }
    public class FSDaysToWeekType : DecimalType
    {
        public override int Length { get => 17; }
        public override byte Precision { get => 38; }
        public override byte Scale { get => 10; }
        public override bool Nullable { get => true; }
        private FSDaysToWeekType(decimal? value) : base(value) { }
        public static implicit operator FSDaysToWeekType(decimal? value) { return new FSDaysToWeekType(value); }
        public static implicit operator FSDaysToWeekType(DBNull value) { return new FSDaysToWeekType(null); }
    }
    public class FSDefaultFromType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSDefaultFromType(string value) : base(value) { }
        public static implicit operator FSDefaultFromType(string value) { return new FSDefaultFromType(value); }
        public static implicit operator FSDefaultFromType(DBNull value) { return new FSDefaultFromType(null); }
    }
    public class FSDepAppTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSDepAppTypeType(string value) : base(value) { }
        public static implicit operator FSDepAppTypeType(string value) { return new FSDepAppTypeType(value); }
        public static implicit operator FSDepAppTypeType(DBNull value) { return new FSDepAppTypeType(null); }
    }
    public class FSDeptType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSDeptType(string value) : base(value) { }
        public static implicit operator FSDeptType(string value) { return new FSDeptType(value); }
        public static implicit operator FSDeptType(DBNull value) { return new FSDeptType(null); }
    }
    public class FSDispatchEmailType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSDispatchEmailType(string value) : base(value) { }
        public static implicit operator FSDispatchEmailType(string value) { return new FSDispatchEmailType(value); }
        public static implicit operator FSDispatchEmailType(DBNull value) { return new FSDispatchEmailType(null); }
    }
    public class FSDispatchEventCodeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSDispatchEventCodeType(string value) : base(value) { }
        public static implicit operator FSDispatchEventCodeType(string value) { return new FSDispatchEventCodeType(value); }
        public static implicit operator FSDispatchEventCodeType(DBNull value) { return new FSDispatchEventCodeType(null); }
    }
    public class FSDispCfgLevelsType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSDispCfgLevelsType(int? value) : base(value) { }
        public static implicit operator FSDispCfgLevelsType(int? value) { return new FSDispCfgLevelsType(value); }
        public static implicit operator FSDispCfgLevelsType(DBNull value) { return new FSDispCfgLevelsType(null); }
        private FSDispCfgLevelsType(long? value) : base(value) { }
        public static implicit operator FSDispCfgLevelsType(long? value) { return new FSDispCfgLevelsType(value); }
    }
    public class FSDragDropModeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSDragDropModeType(int? value) : base(value) { }
        public static implicit operator FSDragDropModeType(int? value) { return new FSDragDropModeType(value); }
        public static implicit operator FSDragDropModeType(DBNull value) { return new FSDragDropModeType(null); }
        private FSDragDropModeType(long? value) : base(value) { }
        public static implicit operator FSDragDropModeType(long? value) { return new FSDragDropModeType(value); }
    }
    public class FSDriversLicenseType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSDriversLicenseType(string value) : base(value) { }
        public static implicit operator FSDriversLicenseType(string value) { return new FSDriversLicenseType(value); }
        public static implicit operator FSDriversLicenseType(DBNull value) { return new FSDriversLicenseType(null); }
    }
    public class FSDropShipTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSDropShipTypeType(string value) : base(value) { }
        public static implicit operator FSDropShipTypeType(string value) { return new FSDropShipTypeType(value); }
        public static implicit operator FSDropShipTypeType(DBNull value) { return new FSDropShipTypeType(null); }
    }
    public class FSDrpLowLevelType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSDrpLowLevelType(int? value) : base(value) { }
        public static implicit operator FSDrpLowLevelType(int? value) { return new FSDrpLowLevelType(value); }
        public static implicit operator FSDrpLowLevelType(DBNull value) { return new FSDrpLowLevelType(null); }
        private FSDrpLowLevelType(long? value) : base(value) { }
        public static implicit operator FSDrpLowLevelType(long? value) { return new FSDrpLowLevelType(value); }
    }
    public class FSDurationType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSDurationType(int? value) : base(value) { }
        public static implicit operator FSDurationType(int? value) { return new FSDurationType(value); }
        public static implicit operator FSDurationType(DBNull value) { return new FSDurationType(null); }
        private FSDurationType(long? value) : base(value) { }
        public static implicit operator FSDurationType(long? value) { return new FSDurationType(value); }
    }
    public class FSDurationTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSDurationTypeType(string value) : base(value) { }
        public static implicit operator FSDurationTypeType(string value) { return new FSDurationTypeType(value); }
        public static implicit operator FSDurationTypeType(DBNull value) { return new FSDurationTypeType(null); }
    }
    public class FSEmailCommandType : StringType
    {
        public override int Length { get => 110; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSEmailCommandType(string value) : base(value) { }
        public static implicit operator FSEmailCommandType(string value) { return new FSEmailCommandType(value); }
        public static implicit operator FSEmailCommandType(DBNull value) { return new FSEmailCommandType(null); }
    }
    public class FSEmailFlagType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSEmailFlagType(string value) : base(value) { }
        public static implicit operator FSEmailFlagType(string value) { return new FSEmailFlagType(value); }
        public static implicit operator FSEmailFlagType(DBNull value) { return new FSEmailFlagType(null); }
    }
    public class FSEmailServerType : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSEmailServerType(string value) : base(value) { }
        public static implicit operator FSEmailServerType(string value) { return new FSEmailServerType(value); }
        public static implicit operator FSEmailServerType(DBNull value) { return new FSEmailServerType(null); }
    }
    public class FSEmailTypeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSEmailTypeType(string value) : base(value) { }
        public static implicit operator FSEmailTypeType(string value) { return new FSEmailTypeType(value); }
        public static implicit operator FSEmailTypeType(DBNull value) { return new FSEmailTypeType(null); }
    }
    public class FSEscalBasisType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSEscalBasisType(string value) : base(value) { }
        public static implicit operator FSEscalBasisType(string value) { return new FSEscalBasisType(value); }
        public static implicit operator FSEscalBasisType(DBNull value) { return new FSEscalBasisType(null); }
    }
    public class FSEscalFreqType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSEscalFreqType(string value) : base(value) { }
        public static implicit operator FSEscalFreqType(string value) { return new FSEscalFreqType(value); }
        public static implicit operator FSEscalFreqType(DBNull value) { return new FSEscalFreqType(null); }
    }
    public class FSEventActivitiesType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSEventActivitiesType(string value) : base(value) { }
        public static implicit operator FSEventActivitiesType(string value) { return new FSEventActivitiesType(value); }
        public static implicit operator FSEventActivitiesType(DBNull value) { return new FSEventActivitiesType(null); }
    }
    public class FSEventCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSEventCodeType(string value) : base(value) { }
        public static implicit operator FSEventCodeType(string value) { return new FSEventCodeType(value); }
        public static implicit operator FSEventCodeType(DBNull value) { return new FSEventCodeType(null); }
    }
    public class FSEventTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSEventTypeType(string value) : base(value) { }
        public static implicit operator FSEventTypeType(string value) { return new FSEventTypeType(value); }
        public static implicit operator FSEventTypeType(DBNull value) { return new FSEventTypeType(null); }
    }
    public class FSExchangeDaysType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSExchangeDaysType(short? value) : base(value) { }
        public static implicit operator FSExchangeDaysType(short? value) { return new FSExchangeDaysType(value); }
        public static implicit operator FSExchangeDaysType(DBNull value) { return new FSExchangeDaysType(null); }
        private FSExchangeDaysType(int? value) : base(value) { }
        public static implicit operator FSExchangeDaysType(int? value) { return new FSExchangeDaysType(value); }
    }
    public class FSExchangeVersionType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSExchangeVersionType(string value) : base(value) { }
        public static implicit operator FSExchangeVersionType(string value) { return new FSExchangeVersionType(value); }
        public static implicit operator FSExchangeVersionType(DBNull value) { return new FSExchangeVersionType(null); }
    }
    public class FSFieldDescriptionType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSFieldDescriptionType(string value) : base(value) { }
        public static implicit operator FSFieldDescriptionType(string value) { return new FSFieldDescriptionType(value); }
        public static implicit operator FSFieldDescriptionType(DBNull value) { return new FSFieldDescriptionType(null); }
    }
    public class FSFieldIdType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSFieldIdType(string value) : base(value) { }
        public static implicit operator FSFieldIdType(string value) { return new FSFieldIdType(value); }
        public static implicit operator FSFieldIdType(DBNull value) { return new FSFieldIdType(null); }
    }
    public class FSFieldOrderType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSFieldOrderType(int? value) : base(value) { }
        public static implicit operator FSFieldOrderType(int? value) { return new FSFieldOrderType(value); }
        public static implicit operator FSFieldOrderType(DBNull value) { return new FSFieldOrderType(null); }
        private FSFieldOrderType(long? value) : base(value) { }
        public static implicit operator FSFieldOrderType(long? value) { return new FSFieldOrderType(value); }
    }
    public class FSFilterNameType : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSFilterNameType(string value) : base(value) { }
        public static implicit operator FSFilterNameType(string value) { return new FSFilterNameType(value); }
        public static implicit operator FSFilterNameType(DBNull value) { return new FSFilterNameType(null); }
    }
    public class FSFilterType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSFilterType(int? value) : base(value) { }
        public static implicit operator FSFilterType(int? value) { return new FSFilterType(value); }
        public static implicit operator FSFilterType(DBNull value) { return new FSFilterType(null); }
        private FSFilterType(long? value) : base(value) { }
        public static implicit operator FSFilterType(long? value) { return new FSFilterType(value); }
    }
    public class FSFontNameType : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSFontNameType(string value) : base(value) { }
        public static implicit operator FSFontNameType(string value) { return new FSFontNameType(value); }
        public static implicit operator FSFontNameType(DBNull value) { return new FSFontNameType(null); }
    }
    public class FSFontSizeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSFontSizeType(int? value) : base(value) { }
        public static implicit operator FSFontSizeType(int? value) { return new FSFontSizeType(value); }
        public static implicit operator FSFontSizeType(DBNull value) { return new FSFontSizeType(null); }
        private FSFontSizeType(long? value) : base(value) { }
        public static implicit operator FSFontSizeType(long? value) { return new FSFontSizeType(value); }
    }
    public class FSGPSLocType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 21; }
        public override byte Scale { get => 10; }
        public override bool Nullable { get => true; }
        private FSGPSLocType(decimal? value) : base(value) { }
        public static implicit operator FSGPSLocType(decimal? value) { return new FSGPSLocType(value); }
        public static implicit operator FSGPSLocType(DBNull value) { return new FSGPSLocType(null); }
    }
    public class FSHighValueType : DecimalType
    {
        public override int Length { get => 17; }
        public override byte Precision { get => 38; }
        public override byte Scale { get => 10; }
        public override bool Nullable { get => true; }
        private FSHighValueType(decimal? value) : base(value) { }
        public static implicit operator FSHighValueType(decimal? value) { return new FSHighValueType(value); }
        public static implicit operator FSHighValueType(DBNull value) { return new FSHighValueType(null); }
    }
    public class FSHrsToDayType : DecimalType
    {
        public override int Length { get => 17; }
        public override byte Precision { get => 38; }
        public override byte Scale { get => 10; }
        public override bool Nullable { get => true; }
        private FSHrsToDayType(decimal? value) : base(value) { }
        public static implicit operator FSHrsToDayType(decimal? value) { return new FSHrsToDayType(value); }
        public static implicit operator FSHrsToDayType(DBNull value) { return new FSHrsToDayType(null); }
    }
    public class FSIncNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSIncNumType(string value) : base(value) { }
        public static implicit operator FSIncNumType(string value) { return new FSIncNumType(value); }
        public static implicit operator FSIncNumType(DBNull value) { return new FSIncNumType(null); }
    }
    public class FSIncPriorCodeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSIncPriorCodeType(string value) : base(value) { }
        public static implicit operator FSIncPriorCodeType(string value) { return new FSIncPriorCodeType(value); }
        public static implicit operator FSIncPriorCodeType(DBNull value) { return new FSIncPriorCodeType(null); }
    }
    public class FSInitialViewType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSInitialViewType(int? value) : base(value) { }
        public static implicit operator FSInitialViewType(int? value) { return new FSInitialViewType(value); }
        public static implicit operator FSInitialViewType(DBNull value) { return new FSInitialViewType(null); }
        private FSInitialViewType(long? value) : base(value) { }
        public static implicit operator FSInitialViewType(long? value) { return new FSInitialViewType(value); }
    }
    public class FSInspectRefNumType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSInspectRefNumType(string value) : base(value) { }
        public static implicit operator FSInspectRefNumType(string value) { return new FSInspectRefNumType(value); }
        public static implicit operator FSInspectRefNumType(DBNull value) { return new FSInspectRefNumType(null); }
    }
    public class FSInspectRefTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSInspectRefTypeType(string value) : base(value) { }
        public static implicit operator FSInspectRefTypeType(string value) { return new FSInspectRefTypeType(value); }
        public static implicit operator FSInspectRefTypeType(DBNull value) { return new FSInspectRefTypeType(null); }
    }
    public class FSInspectTaskType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSInspectTaskType(string value) : base(value) { }
        public static implicit operator FSInspectTaskType(string value) { return new FSInspectTaskType(value); }
        public static implicit operator FSInspectTaskType(DBNull value) { return new FSInspectTaskType(null); }
    }
    public class FSInspectTypeType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSInspectTypeType(string value) : base(value) { }
        public static implicit operator FSInspectTypeType(string value) { return new FSInspectTypeType(value); }
        public static implicit operator FSInspectTypeType(DBNull value) { return new FSInspectTypeType(null); }
    }
    public class FSInvTypeType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSInvTypeType(string value) : base(value) { }
        public static implicit operator FSInvTypeType(string value) { return new FSInvTypeType(value); }
        public static implicit operator FSInvTypeType(DBNull value) { return new FSInvTypeType(null); }
    }
    public class FSKBGeneralType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSKBGeneralType(string value) : base(value) { }
        public static implicit operator FSKBGeneralType(string value) { return new FSKBGeneralType(value); }
        public static implicit operator FSKBGeneralType(DBNull value) { return new FSKBGeneralType(null); }
    }
    public class FSKBKeywordType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSKBKeywordType(string value) : base(value) { }
        public static implicit operator FSKBKeywordType(string value) { return new FSKBKeywordType(value); }
        public static implicit operator FSKBKeywordType(DBNull value) { return new FSKBKeywordType(null); }
    }
    public class FSKBSpecificType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSKBSpecificType(string value) : base(value) { }
        public static implicit operator FSKBSpecificType(string value) { return new FSKBSpecificType(value); }
        public static implicit operator FSKBSpecificType(DBNull value) { return new FSKBSpecificType(null); }
    }
    public class FSKBStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSKBStatType(string value) : base(value) { }
        public static implicit operator FSKBStatType(string value) { return new FSKBStatType(value); }
        public static implicit operator FSKBStatType(DBNull value) { return new FSKBStatType(null); }
    }
    public class FSKBSummaryType : StringType
    {
        public override int Length { get => 2000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSKBSummaryType(string value) : base(value) { }
        public static implicit operator FSKBSummaryType(string value) { return new FSKBSummaryType(value); }
        public static implicit operator FSKBSummaryType(DBNull value) { return new FSKBSummaryType(null); }
    }
    public class FSKBTextType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSKBTextType(string value) : base(value) { }
        public static implicit operator FSKBTextType(string value) { return new FSKBTextType(value); }
        public static implicit operator FSKBTextType(DBNull value) { return new FSKBTextType(null); }
    }
    public class FSKnowNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSKnowNumType(int? value) : base(value) { }
        public static implicit operator FSKnowNumType(int? value) { return new FSKnowNumType(value); }
        public static implicit operator FSKnowNumType(DBNull value) { return new FSKnowNumType(null); }
        private FSKnowNumType(long? value) : base(value) { }
        public static implicit operator FSKnowNumType(long? value) { return new FSKnowNumType(value); }
    }
    public class FSLangCodeType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSLangCodeType(string value) : base(value) { }
        public static implicit operator FSLangCodeType(string value) { return new FSLangCodeType(value); }
        public static implicit operator FSLangCodeType(DBNull value) { return new FSLangCodeType(null); }
    }
    public class FSLiCertType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSLiCertType(string value) : base(value) { }
        public static implicit operator FSLiCertType(string value) { return new FSLiCertType(value); }
        public static implicit operator FSLiCertType(DBNull value) { return new FSLiCertType(null); }
    }
    public class FSListManAutoType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSListManAutoType(string value) : base(value) { }
        public static implicit operator FSListManAutoType(string value) { return new FSListManAutoType(value); }
        public static implicit operator FSListManAutoType(DBNull value) { return new FSListManAutoType(null); }
    }
    public class FSLocalSplitterDistanceType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSLocalSplitterDistanceType(int? value) : base(value) { }
        public static implicit operator FSLocalSplitterDistanceType(int? value) { return new FSLocalSplitterDistanceType(value); }
        public static implicit operator FSLocalSplitterDistanceType(DBNull value) { return new FSLocalSplitterDistanceType(null); }
        private FSLocalSplitterDistanceType(long? value) : base(value) { }
        public static implicit operator FSLocalSplitterDistanceType(long? value) { return new FSLocalSplitterDistanceType(value); }
    }
    public class FSLowValueType : DecimalType
    {
        public override int Length { get => 17; }
        public override byte Precision { get => 38; }
        public override byte Scale { get => 10; }
        public override bool Nullable { get => true; }
        private FSLowValueType(decimal? value) : base(value) { }
        public static implicit operator FSLowValueType(decimal? value) { return new FSLowValueType(value); }
        public static implicit operator FSLowValueType(DBNull value) { return new FSLowValueType(null); }
    }
    public class FSMaintFreqType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSMaintFreqType(string value) : base(value) { }
        public static implicit operator FSMaintFreqType(string value) { return new FSMaintFreqType(value); }
        public static implicit operator FSMaintFreqType(DBNull value) { return new FSMaintFreqType(null); }
    }
    public class FSMeasResponseTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSMeasResponseTypeType(string value) : base(value) { }
        public static implicit operator FSMeasResponseTypeType(string value) { return new FSMeasResponseTypeType(value); }
        public static implicit operator FSMeasResponseTypeType(DBNull value) { return new FSMeasResponseTypeType(null); }
    }
    public class FSMeasTypeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSMeasTypeType(string value) : base(value) { }
        public static implicit operator FSMeasTypeType(string value) { return new FSMeasTypeType(value); }
        public static implicit operator FSMeasTypeType(DBNull value) { return new FSMeasTypeType(null); }
    }
    public class FSMeterAmtType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSMeterAmtType(int? value) : base(value) { }
        public static implicit operator FSMeterAmtType(int? value) { return new FSMeterAmtType(value); }
        public static implicit operator FSMeterAmtType(DBNull value) { return new FSMeterAmtType(null); }
        private FSMeterAmtType(long? value) : base(value) { }
        public static implicit operator FSMeterAmtType(long? value) { return new FSMeterAmtType(value); }
    }
    public class FSMeterLabelType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSMeterLabelType(string value) : base(value) { }
        public static implicit operator FSMeterLabelType(string value) { return new FSMeterLabelType(value); }
        public static implicit operator FSMeterLabelType(DBNull value) { return new FSMeterLabelType(null); }
    }
    public class FSMiscCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSMiscCodeType(string value) : base(value) { }
        public static implicit operator FSMiscCodeType(string value) { return new FSMiscCodeType(value); }
        public static implicit operator FSMiscCodeType(DBNull value) { return new FSMiscCodeType(null); }
    }
    public class FSMonthType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSMonthType(short? value) : base(value) { }
        public static implicit operator FSMonthType(short? value) { return new FSMonthType(value); }
        public static implicit operator FSMonthType(DBNull value) { return new FSMonthType(null); }
        private FSMonthType(int? value) : base(value) { }
        public static implicit operator FSMonthType(int? value) { return new FSMonthType(value); }
    }
    public class FSMultiDayMaxHrsType : DecimalType
    {
        public override int Length { get => 17; }
        public override byte Precision { get => 38; }
        public override byte Scale { get => 10; }
        public override bool Nullable { get => true; }
        private FSMultiDayMaxHrsType(decimal? value) : base(value) { }
        public static implicit operator FSMultiDayMaxHrsType(decimal? value) { return new FSMultiDayMaxHrsType(value); }
        public static implicit operator FSMultiDayMaxHrsType(DBNull value) { return new FSMultiDayMaxHrsType(null); }
    }
    public class FSMultiDayMethodType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSMultiDayMethodType(int? value) : base(value) { }
        public static implicit operator FSMultiDayMethodType(int? value) { return new FSMultiDayMethodType(value); }
        public static implicit operator FSMultiDayMethodType(DBNull value) { return new FSMultiDayMethodType(null); }
        private FSMultiDayMethodType(long? value) : base(value) { }
        public static implicit operator FSMultiDayMethodType(long? value) { return new FSMultiDayMethodType(value); }
    }
    public class FSMultiDayMinHrsType : DecimalType
    {
        public override int Length { get => 17; }
        public override byte Precision { get => 38; }
        public override byte Scale { get => 10; }
        public override bool Nullable { get => true; }
        private FSMultiDayMinHrsType(decimal? value) : base(value) { }
        public static implicit operator FSMultiDayMinHrsType(decimal? value) { return new FSMultiDayMinHrsType(value); }
        public static implicit operator FSMultiDayMinHrsType(DBNull value) { return new FSMultiDayMinHrsType(null); }
    }
    public class FSNotesType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSNotesType(string value) : base(value) { }
        public static implicit operator FSNotesType(string value) { return new FSNotesType(value); }
        public static implicit operator FSNotesType(DBNull value) { return new FSNotesType(null); }
    }
    public class FSOperCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSOperCodeType(string value) : base(value) { }
        public static implicit operator FSOperCodeType(string value) { return new FSOperCodeType(value); }
        public static implicit operator FSOperCodeType(DBNull value) { return new FSOperCodeType(null); }
    }
    public class FSParmKeyType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSParmKeyType(int? value) : base(value) { }
        public static implicit operator FSParmKeyType(int? value) { return new FSParmKeyType(value); }
        public static implicit operator FSParmKeyType(DBNull value) { return new FSParmKeyType(null); }
        private FSParmKeyType(long? value) : base(value) { }
        public static implicit operator FSParmKeyType(long? value) { return new FSParmKeyType(value); }
    }
    public class FSPartnerDispType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSPartnerDispType(int? value) : base(value) { }
        public static implicit operator FSPartnerDispType(int? value) { return new FSPartnerDispType(value); }
        public static implicit operator FSPartnerDispType(DBNull value) { return new FSPartnerDispType(null); }
        private FSPartnerDispType(long? value) : base(value) { }
        public static implicit operator FSPartnerDispType(long? value) { return new FSPartnerDispType(value); }
    }
    public class FSPartnerEndAddressType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSPartnerEndAddressType(int? value) : base(value) { }
        public static implicit operator FSPartnerEndAddressType(int? value) { return new FSPartnerEndAddressType(value); }
        public static implicit operator FSPartnerEndAddressType(DBNull value) { return new FSPartnerEndAddressType(null); }
        private FSPartnerEndAddressType(long? value) : base(value) { }
        public static implicit operator FSPartnerEndAddressType(long? value) { return new FSPartnerEndAddressType(value); }
    }
    public class FSPartnerStartAddressType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSPartnerStartAddressType(int? value) : base(value) { }
        public static implicit operator FSPartnerStartAddressType(int? value) { return new FSPartnerStartAddressType(value); }
        public static implicit operator FSPartnerStartAddressType(DBNull value) { return new FSPartnerStartAddressType(null); }
        private FSPartnerStartAddressType(long? value) : base(value) { }
        public static implicit operator FSPartnerStartAddressType(long? value) { return new FSPartnerStartAddressType(value); }
    }
    public class FSPartnerType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSPartnerType(string value) : base(value) { }
        public static implicit operator FSPartnerType(string value) { return new FSPartnerType(value); }
        public static implicit operator FSPartnerType(DBNull value) { return new FSPartnerType(null); }
    }
    public class FSPartsrecEmailBodyType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSPartsrecEmailBodyType(string value) : base(value) { }
        public static implicit operator FSPartsrecEmailBodyType(string value) { return new FSPartsrecEmailBodyType(value); }
        public static implicit operator FSPartsrecEmailBodyType(DBNull value) { return new FSPartsrecEmailBodyType(null); }
    }
    public class FSPayTypeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSPayTypeType(string value) : base(value) { }
        public static implicit operator FSPayTypeType(string value) { return new FSPayTypeType(value); }
        public static implicit operator FSPayTypeType(DBNull value) { return new FSPayTypeType(null); }
    }
    public class FSPctType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 4; }
        public override byte Scale { get => 1; }
        public override bool Nullable { get => true; }
        private FSPctType(decimal? value) : base(value) { }
        public static implicit operator FSPctType(decimal? value) { return new FSPctType(value); }
        public static implicit operator FSPctType(DBNull value) { return new FSPctType(null); }
    }
    public class FSPollIntervalType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private FSPollIntervalType(decimal? value) : base(value) { }
        public static implicit operator FSPollIntervalType(decimal? value) { return new FSPollIntervalType(value); }
        public static implicit operator FSPollIntervalType(DBNull value) { return new FSPollIntervalType(null); }
    }
    public class FSPriorDateBasisType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSPriorDateBasisType(string value) : base(value) { }
        public static implicit operator FSPriorDateBasisType(string value) { return new FSPriorDateBasisType(value); }
        public static implicit operator FSPriorDateBasisType(DBNull value) { return new FSPriorDateBasisType(null); }
    }
    public class FSReasonActivitiesType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSReasonActivitiesType(string value) : base(value) { }
        public static implicit operator FSReasonActivitiesType(string value) { return new FSReasonActivitiesType(value); }
        public static implicit operator FSReasonActivitiesType(DBNull value) { return new FSReasonActivitiesType(null); }
    }
    public class FSReasonNotesType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSReasonNotesType(string value) : base(value) { }
        public static implicit operator FSReasonNotesType(string value) { return new FSReasonNotesType(value); }
        public static implicit operator FSReasonNotesType(DBNull value) { return new FSReasonNotesType(null); }
    }
    public class FSReasonType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSReasonType(string value) : base(value) { }
        public static implicit operator FSReasonType(string value) { return new FSReasonType(value); }
        public static implicit operator FSReasonType(DBNull value) { return new FSReasonType(null); }
    }
    public class FSReasonTypeType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSReasonTypeType(string value) : base(value) { }
        public static implicit operator FSReasonTypeType(string value) { return new FSReasonTypeType(value); }
        public static implicit operator FSReasonTypeType(DBNull value) { return new FSReasonTypeType(null); }
    }
    public class FSReconBatchIdType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSReconBatchIdType(string value) : base(value) { }
        public static implicit operator FSReconBatchIdType(string value) { return new FSReconBatchIdType(value); }
        public static implicit operator FSReconBatchIdType(DBNull value) { return new FSReconBatchIdType(null); }
    }
    public class FSRefLineType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefLineType(int? value) : base(value) { }
        public static implicit operator FSRefLineType(int? value) { return new FSRefLineType(value); }
        public static implicit operator FSRefLineType(DBNull value) { return new FSRefLineType(null); }
        private FSRefLineType(long? value) : base(value) { }
        public static implicit operator FSRefLineType(long? value) { return new FSRefLineType(value); }
    }
    public class FSRefNumChar150Type : StringType
    {
        public override int Length { get => 300; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefNumChar150Type(string value) : base(value) { }
        public static implicit operator FSRefNumChar150Type(string value) { return new FSRefNumChar150Type(value); }
        public static implicit operator FSRefNumChar150Type(DBNull value) { return new FSRefNumChar150Type(null); }
    }
    public class FSRefNumChar200Type : StringType
    {
        public override int Length { get => 400; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefNumChar200Type(string value) : base(value) { }
        public static implicit operator FSRefNumChar200Type(string value) { return new FSRefNumChar200Type(value); }
        public static implicit operator FSRefNumChar200Type(DBNull value) { return new FSRefNumChar200Type(null); }
    }
    public class FSRefNumChar30Type : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefNumChar30Type(string value) : base(value) { }
        public static implicit operator FSRefNumChar30Type(string value) { return new FSRefNumChar30Type(value); }
        public static implicit operator FSRefNumChar30Type(DBNull value) { return new FSRefNumChar30Type(null); }
    }
    public class FSRefNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefNumType(string value) : base(value) { }
        public static implicit operator FSRefNumType(string value) { return new FSRefNumType(value); }
        public static implicit operator FSRefNumType(DBNull value) { return new FSRefNumType(null); }
    }
    public class FSRefReleaseType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefReleaseType(int? value) : base(value) { }
        public static implicit operator FSRefReleaseType(int? value) { return new FSRefReleaseType(value); }
        public static implicit operator FSRefReleaseType(DBNull value) { return new FSRefReleaseType(null); }
        private FSRefReleaseType(long? value) : base(value) { }
        public static implicit operator FSRefReleaseType(long? value) { return new FSRefReleaseType(value); }
    }
    public class FSRefreshIntervalType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefreshIntervalType(int? value) : base(value) { }
        public static implicit operator FSRefreshIntervalType(int? value) { return new FSRefreshIntervalType(value); }
        public static implicit operator FSRefreshIntervalType(DBNull value) { return new FSRefreshIntervalType(null); }
        private FSRefreshIntervalType(long? value) : base(value) { }
        public static implicit operator FSRefreshIntervalType(long? value) { return new FSRefreshIntervalType(value); }
    }
    public class FSRefSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefSeqType(int? value) : base(value) { }
        public static implicit operator FSRefSeqType(int? value) { return new FSRefSeqType(value); }
        public static implicit operator FSRefSeqType(DBNull value) { return new FSRefSeqType(null); }
        private FSRefSeqType(long? value) : base(value) { }
        public static implicit operator FSRefSeqType(long? value) { return new FSRefSeqType(value); }
    }
    public class FSRefTypeCEVType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefTypeCEVType(string value) : base(value) { }
        public static implicit operator FSRefTypeCEVType(string value) { return new FSRefTypeCEVType(value); }
        public static implicit operator FSRefTypeCEVType(DBNull value) { return new FSRefTypeCEVType(null); }
    }
    public class FSRefTypeChar100Type : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefTypeChar100Type(string value) : base(value) { }
        public static implicit operator FSRefTypeChar100Type(string value) { return new FSRefTypeChar100Type(value); }
        public static implicit operator FSRefTypeChar100Type(DBNull value) { return new FSRefTypeChar100Type(null); }
    }
    public class FSRefTypeChar10Type : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefTypeChar10Type(string value) : base(value) { }
        public static implicit operator FSRefTypeChar10Type(string value) { return new FSRefTypeChar10Type(value); }
        public static implicit operator FSRefTypeChar10Type(DBNull value) { return new FSRefTypeChar10Type(null); }
    }
    public class FSRefTypeCKOPSType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefTypeCKOPSType(string value) : base(value) { }
        public static implicit operator FSRefTypeCKOPSType(string value) { return new FSRefTypeCKOPSType(value); }
        public static implicit operator FSRefTypeCKOPSType(DBNull value) { return new FSRefTypeCKOPSType(null); }
    }
    public class FSRefTypeIJKMNOPRType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefTypeIJKMNOPRType(string value) : base(value) { }
        public static implicit operator FSRefTypeIJKMNOPRType(string value) { return new FSRefTypeIJKMNOPRType(value); }
        public static implicit operator FSRefTypeIJKMNOPRType(DBNull value) { return new FSRefTypeIJKMNOPRType(null); }
    }
    public class FSRefTypeIJKMOPRTType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefTypeIJKMOPRTType(string value) : base(value) { }
        public static implicit operator FSRefTypeIJKMOPRTType(string value) { return new FSRefTypeIJKMOPRTType(value); }
        public static implicit operator FSRefTypeIJKMOPRTType(DBNull value) { return new FSRefTypeIJKMOPRTType(null); }
    }
    public class FSRefTypeIJPRT : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefTypeIJPRT(string value) : base(value) { }
        public static implicit operator FSRefTypeIJPRT(string value) { return new FSRefTypeIJPRT(value); }
        public static implicit operator FSRefTypeIJPRT(DBNull value) { return new FSRefTypeIJPRT(null); }
    }
    public class FSRefTypeIntType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefTypeIntType(int? value) : base(value) { }
        public static implicit operator FSRefTypeIntType(int? value) { return new FSRefTypeIntType(value); }
        public static implicit operator FSRefTypeIntType(DBNull value) { return new FSRefTypeIntType(null); }
        private FSRefTypeIntType(long? value) : base(value) { }
        public static implicit operator FSRefTypeIntType(long? value) { return new FSRefTypeIntType(value); }
    }
    public class FSRefTypeJKMOPRSType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefTypeJKMOPRSType(string value) : base(value) { }
        public static implicit operator FSRefTypeJKMOPRSType(string value) { return new FSRefTypeJKMOPRSType(value); }
        public static implicit operator FSRefTypeJKMOPRSType(DBNull value) { return new FSRefTypeJKMOPRSType(null); }
    }
    public class FSRefTypeJKNSType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefTypeJKNSType(string value) : base(value) { }
        public static implicit operator FSRefTypeJKNSType(string value) { return new FSRefTypeJKNSType(value); }
        public static implicit operator FSRefTypeJKNSType(DBNull value) { return new FSRefTypeJKNSType(null); }
    }
    public class FSRefTypeKOType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefTypeKOType(string value) : base(value) { }
        public static implicit operator FSRefTypeKOType(string value) { return new FSRefTypeKOType(value); }
        public static implicit operator FSRefTypeKOType(DBNull value) { return new FSRefTypeKOType(null); }
    }
    public class FSRefTypeNSType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefTypeNSType(string value) : base(value) { }
        public static implicit operator FSRefTypeNSType(string value) { return new FSRefTypeNSType(value); }
        public static implicit operator FSRefTypeNSType(DBNull value) { return new FSRefTypeNSType(null); }
    }
    public class FSRefTypeNSUType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefTypeNSUType(string value) : base(value) { }
        public static implicit operator FSRefTypeNSUType(string value) { return new FSRefTypeNSUType(value); }
        public static implicit operator FSRefTypeNSUType(DBNull value) { return new FSRefTypeNSUType(null); }
    }
    public class FSRefTypeOPSType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefTypeOPSType(string value) : base(value) { }
        public static implicit operator FSRefTypeOPSType(string value) { return new FSRefTypeOPSType(value); }
        public static implicit operator FSRefTypeOPSType(DBNull value) { return new FSRefTypeOPSType(null); }
    }
    public class FSRefTypePRType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRefTypePRType(string value) : base(value) { }
        public static implicit operator FSRefTypePRType(string value) { return new FSRefTypePRType(value); }
        public static implicit operator FSRefTypePRType(DBNull value) { return new FSRefTypePRType(null); }
    }
    public class FSRegionType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRegionType(string value) : base(value) { }
        public static implicit operator FSRegionType(string value) { return new FSRegionType(value); }
        public static implicit operator FSRegionType(DBNull value) { return new FSRegionType(null); }
    }
    public class FSReimbBatchIdType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSReimbBatchIdType(string value) : base(value) { }
        public static implicit operator FSReimbBatchIdType(string value) { return new FSReimbBatchIdType(value); }
        public static implicit operator FSReimbBatchIdType(DBNull value) { return new FSReimbBatchIdType(null); }
    }
    public class FSReimbMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSReimbMethodType(string value) : base(value) { }
        public static implicit operator FSReimbMethodType(string value) { return new FSReimbMethodType(value); }
        public static implicit operator FSReimbMethodType(DBNull value) { return new FSReimbMethodType(null); }
    }
    public class FSReimbStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSReimbStatType(string value) : base(value) { }
        public static implicit operator FSReimbStatType(string value) { return new FSReimbStatType(value); }
        public static implicit operator FSReimbStatType(DBNull value) { return new FSReimbStatType(null); }
    }
    public class FSRemoteIdType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRemoteIdType(string value) : base(value) { }
        public static implicit operator FSRemoteIdType(string value) { return new FSRemoteIdType(value); }
        public static implicit operator FSRemoteIdType(DBNull value) { return new FSRemoteIdType(null); }
    }
    public class FSResolutionType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSResolutionType(string value) : base(value) { }
        public static implicit operator FSResolutionType(string value) { return new FSResolutionType(value); }
        public static implicit operator FSResolutionType(DBNull value) { return new FSResolutionType(null); }
    }
    public class FSRowHeightType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSRowHeightType(int? value) : base(value) { }
        public static implicit operator FSRowHeightType(int? value) { return new FSRowHeightType(value); }
        public static implicit operator FSRowHeightType(DBNull value) { return new FSRowHeightType(null); }
        private FSRowHeightType(long? value) : base(value) { }
        public static implicit operator FSRowHeightType(long? value) { return new FSRowHeightType(value); }
    }
    public class FSSchedBasisType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSchedBasisType(string value) : base(value) { }
        public static implicit operator FSSchedBasisType(string value) { return new FSSchedBasisType(value); }
        public static implicit operator FSSchedBasisType(DBNull value) { return new FSSchedBasisType(null); }
    }
    public class FSSchedDateFormatType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSchedDateFormatType(string value) : base(value) { }
        public static implicit operator FSSchedDateFormatType(string value) { return new FSSchedDateFormatType(value); }
        public static implicit operator FSSchedDateFormatType(DBNull value) { return new FSSchedDateFormatType(null); }
    }
    public class FSSchedDaysBackwardType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSchedDaysBackwardType(int? value) : base(value) { }
        public static implicit operator FSSchedDaysBackwardType(int? value) { return new FSSchedDaysBackwardType(value); }
        public static implicit operator FSSchedDaysBackwardType(DBNull value) { return new FSSchedDaysBackwardType(null); }
        private FSSchedDaysBackwardType(long? value) : base(value) { }
        public static implicit operator FSSchedDaysBackwardType(long? value) { return new FSSchedDaysBackwardType(value); }
    }
    public class FSSchedDaysForwardType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSchedDaysForwardType(int? value) : base(value) { }
        public static implicit operator FSSchedDaysForwardType(int? value) { return new FSSchedDaysForwardType(value); }
        public static implicit operator FSSchedDaysForwardType(DBNull value) { return new FSSchedDaysForwardType(null); }
        private FSSchedDaysForwardType(long? value) : base(value) { }
        public static implicit operator FSSchedDaysForwardType(long? value) { return new FSSchedDaysForwardType(value); }
    }
    public class FSSchedMultiMethodType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSchedMultiMethodType(int? value) : base(value) { }
        public static implicit operator FSSchedMultiMethodType(int? value) { return new FSSchedMultiMethodType(value); }
        public static implicit operator FSSchedMultiMethodType(DBNull value) { return new FSSchedMultiMethodType(null); }
        private FSSchedMultiMethodType(long? value) : base(value) { }
        public static implicit operator FSSchedMultiMethodType(long? value) { return new FSSchedMultiMethodType(value); }
    }
    public class FSSchedReminderType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSchedReminderType(int? value) : base(value) { }
        public static implicit operator FSSchedReminderType(int? value) { return new FSSchedReminderType(value); }
        public static implicit operator FSSchedReminderType(DBNull value) { return new FSSchedReminderType(null); }
        private FSSchedReminderType(long? value) : base(value) { }
        public static implicit operator FSSchedReminderType(long? value) { return new FSSchedReminderType(value); }
    }
    public class FSScheduleIdType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSScheduleIdType(string value) : base(value) { }
        public static implicit operator FSScheduleIdType(string value) { return new FSScheduleIdType(value); }
        public static implicit operator FSScheduleIdType(DBNull value) { return new FSScheduleIdType(null); }
    }
    public class FSSchedViewType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSchedViewType(int? value) : base(value) { }
        public static implicit operator FSSchedViewType(int? value) { return new FSSchedViewType(value); }
        public static implicit operator FSSchedViewType(DBNull value) { return new FSSchedViewType(null); }
        private FSSchedViewType(long? value) : base(value) { }
        public static implicit operator FSSchedViewType(long? value) { return new FSSchedViewType(value); }
    }
    public class FSSectionCodeType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSectionCodeType(string value) : base(value) { }
        public static implicit operator FSSectionCodeType(string value) { return new FSSectionCodeType(value); }
        public static implicit operator FSSectionCodeType(DBNull value) { return new FSSectionCodeType(null); }
    }
    public class FSSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSeqType(int? value) : base(value) { }
        public static implicit operator FSSeqType(int? value) { return new FSSeqType(value); }
        public static implicit operator FSSeqType(DBNull value) { return new FSSeqType(null); }
        private FSSeqType(long? value) : base(value) { }
        public static implicit operator FSSeqType(long? value) { return new FSSeqType(value); }
    }
    public class FSSkillType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSkillType(string value) : base(value) { }
        public static implicit operator FSSkillType(string value) { return new FSSkillType(value); }
        public static implicit operator FSSkillType(DBNull value) { return new FSSkillType(null); }
    }
    public class FSSROBillCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSROBillCodeType(string value) : base(value) { }
        public static implicit operator FSSROBillCodeType(string value) { return new FSSROBillCodeType(value); }
        public static implicit operator FSSROBillCodeType(DBNull value) { return new FSSROBillCodeType(null); }
    }
    public class FSSROBillStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSROBillStatType(string value) : base(value) { }
        public static implicit operator FSSROBillStatType(string value) { return new FSSROBillStatType(value); }
        public static implicit operator FSSROBillStatType(DBNull value) { return new FSSROBillStatType(null); }
    }
    public class FSSROBillTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSROBillTypeType(string value) : base(value) { }
        public static implicit operator FSSROBillTypeType(string value) { return new FSSROBillTypeType(value); }
        public static implicit operator FSSROBillTypeType(DBNull value) { return new FSSROBillTypeType(null); }
    }
    public class FSSROLineTransType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSROLineTransType(string value) : base(value) { }
        public static implicit operator FSSROLineTransType(string value) { return new FSSROLineTransType(value); }
        public static implicit operator FSSROLineTransType(DBNull value) { return new FSSROLineTransType(null); }
    }
    public class FSSROLineType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSROLineType(int? value) : base(value) { }
        public static implicit operator FSSROLineType(int? value) { return new FSSROLineType(value); }
        public static implicit operator FSSROLineType(DBNull value) { return new FSSROLineType(null); }
        private FSSROLineType(long? value) : base(value) { }
        public static implicit operator FSSROLineType(long? value) { return new FSSROLineType(value); }
    }
    public class FSSROLineTypeType : StringType
    {
        public override int Length { get => 18; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSROLineTypeType(string value) : base(value) { }
        public static implicit operator FSSROLineTypeType(string value) { return new FSSROLineTypeType(value); }
        public static implicit operator FSSROLineTypeType(DBNull value) { return new FSSROLineTypeType(null); }
    }
    public class FSSROMatlTransTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSROMatlTransTypeType(string value) : base(value) { }
        public static implicit operator FSSROMatlTransTypeType(string value) { return new FSSROMatlTransTypeType(value); }
        public static implicit operator FSSROMatlTransTypeType(DBNull value) { return new FSSROMatlTransTypeType(null); }
    }
    public class FSSROMatlUsageTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSROMatlUsageTypeType(string value) : base(value) { }
        public static implicit operator FSSROMatlUsageTypeType(string value) { return new FSSROMatlUsageTypeType(value); }
        public static implicit operator FSSROMatlUsageTypeType(DBNull value) { return new FSSROMatlUsageTypeType(null); }
    }
    public class FSSRONumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSRONumType(string value) : base(value) { }
        public static implicit operator FSSRONumType(string value) { return new FSSRONumType(value); }
        public static implicit operator FSSRONumType(DBNull value) { return new FSSRONumType(null); }
    }
    public class FSSROOperStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSROOperStatType(string value) : base(value) { }
        public static implicit operator FSSROOperStatType(string value) { return new FSSROOperStatType(value); }
        public static implicit operator FSSROOperStatType(DBNull value) { return new FSSROOperStatType(null); }
    }
    public class FSSROOperType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSROOperType(int? value) : base(value) { }
        public static implicit operator FSSROOperType(int? value) { return new FSSROOperType(value); }
        public static implicit operator FSSROOperType(DBNull value) { return new FSSROOperType(null); }
        private FSSROOperType(long? value) : base(value) { }
        public static implicit operator FSSROOperType(long? value) { return new FSSROOperType(value); }
    }
    public class FSSROStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSROStatType(string value) : base(value) { }
        public static implicit operator FSSROStatType(string value) { return new FSSROStatType(value); }
        public static implicit operator FSSROStatType(DBNull value) { return new FSSROStatType(null); }
    }
    public class FSSROTransNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSROTransNumType(int? value) : base(value) { }
        public static implicit operator FSSROTransNumType(int? value) { return new FSSROTransNumType(value); }
        public static implicit operator FSSROTransNumType(DBNull value) { return new FSSROTransNumType(null); }
        private FSSROTransNumType(long? value) : base(value) { }
        public static implicit operator FSSROTransNumType(long? value) { return new FSSROTransNumType(value); }
    }
    public class FSSROTransTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSROTransTypeType(string value) : base(value) { }
        public static implicit operator FSSROTransTypeType(string value) { return new FSSROTransTypeType(value); }
        public static implicit operator FSSROTransTypeType(DBNull value) { return new FSSROTransTypeType(null); }
    }
    public class FSSROTypeOfTransType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSROTypeOfTransType(string value) : base(value) { }
        public static implicit operator FSSROTypeOfTransType(string value) { return new FSSROTypeOfTransType(value); }
        public static implicit operator FSSROTypeOfTransType(DBNull value) { return new FSSROTypeOfTransType(null); }
    }
    public class FSSROTypeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSROTypeType(string value) : base(value) { }
        public static implicit operator FSSROTypeType(string value) { return new FSSROTypeType(value); }
        public static implicit operator FSSROTypeType(DBNull value) { return new FSSROTypeType(null); }
    }
    public class FSStatCodeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSStatCodeType(string value) : base(value) { }
        public static implicit operator FSStatCodeType(string value) { return new FSStatCodeType(value); }
        public static implicit operator FSStatCodeType(DBNull value) { return new FSStatCodeType(null); }
    }
    public class FSSubTypeType : StringType
    {
        public override int Length { get => 300; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSSubTypeType(string value) : base(value) { }
        public static implicit operator FSSubTypeType(string value) { return new FSSubTypeType(value); }
        public static implicit operator FSSubTypeType(DBNull value) { return new FSSubTypeType(null); }
    }
    public class FSTotalPeriodsType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSTotalPeriodsType(int? value) : base(value) { }
        public static implicit operator FSTotalPeriodsType(int? value) { return new FSTotalPeriodsType(value); }
        public static implicit operator FSTotalPeriodsType(DBNull value) { return new FSTotalPeriodsType(null); }
        private FSTotalPeriodsType(long? value) : base(value) { }
        public static implicit operator FSTotalPeriodsType(long? value) { return new FSTotalPeriodsType(value); }
    }
    public class FSUfLRMDeliveryOrderNumberType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSUfLRMDeliveryOrderNumberType(string value) : base(value) { }
        public static implicit operator FSUfLRMDeliveryOrderNumberType(string value) { return new FSUfLRMDeliveryOrderNumberType(value); }
        public static implicit operator FSUfLRMDeliveryOrderNumberType(DBNull value) { return new FSUfLRMDeliveryOrderNumberType(null); }
    }
    public class FSUnitMfgType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSUnitMfgType(string value) : base(value) { }
        public static implicit operator FSUnitMfgType(string value) { return new FSUnitMfgType(value); }
        public static implicit operator FSUnitMfgType(DBNull value) { return new FSUnitMfgType(null); }
    }
    public class FSUnitStatCodeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSUnitStatCodeType(string value) : base(value) { }
        public static implicit operator FSUnitStatCodeType(string value) { return new FSUnitStatCodeType(value); }
        public static implicit operator FSUnitStatCodeType(DBNull value) { return new FSUnitStatCodeType(null); }
    }
    public class FSUnitStatType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSUnitStatType(string value) : base(value) { }
        public static implicit operator FSUnitStatType(string value) { return new FSUnitStatType(value); }
        public static implicit operator FSUnitStatType(DBNull value) { return new FSUnitStatType(null); }
    }
    public class FSUsernameType : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSUsernameType(string value) : base(value) { }
        public static implicit operator FSUsernameType(string value) { return new FSUsernameType(value); }
        public static implicit operator FSUsernameType(DBNull value) { return new FSUsernameType(null); }
    }
    public class FSUsrNumType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSUsrNumType(string value) : base(value) { }
        public static implicit operator FSUsrNumType(string value) { return new FSUsrNumType(value); }
        public static implicit operator FSUsrNumType(DBNull value) { return new FSUsrNumType(null); }
    }
    public class FSUsrSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSUsrSeqType(int? value) : base(value) { }
        public static implicit operator FSUsrSeqType(int? value) { return new FSUsrSeqType(value); }
        public static implicit operator FSUsrSeqType(DBNull value) { return new FSUsrSeqType(null); }
        private FSUsrSeqType(long? value) : base(value) { }
        public static implicit operator FSUsrSeqType(long? value) { return new FSUsrSeqType(value); }
    }
    public class FSValueType : StringType
    {
        public override int Length { get => 76; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSValueType(string value) : base(value) { }
        public static implicit operator FSValueType(string value) { return new FSValueType(value); }
        public static implicit operator FSValueType(DBNull value) { return new FSValueType(null); }
    }
    public class FSWarrCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSWarrCodeType(string value) : base(value) { }
        public static implicit operator FSWarrCodeType(string value) { return new FSWarrCodeType(value); }
        public static implicit operator FSWarrCodeType(DBNull value) { return new FSWarrCodeType(null); }
    }
    public class FSWarrTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSWarrTypeType(string value) : base(value) { }
        public static implicit operator FSWarrTypeType(string value) { return new FSWarrTypeType(value); }
        public static implicit operator FSWarrTypeType(DBNull value) { return new FSWarrTypeType(null); }
    }
    public class FSWorkCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FSWorkCodeType(string value) : base(value) { }
        public static implicit operator FSWorkCodeType(string value) { return new FSWorkCodeType(value); }
        public static implicit operator FSWorkCodeType(DBNull value) { return new FSWorkCodeType(null); }
    }
    public class FullObjectPathType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FullObjectPathType(string value) : base(value) { }
        public static implicit operator FullObjectPathType(string value) { return new FullObjectPathType(value); }
        public static implicit operator FullObjectPathType(DBNull value) { return new FullObjectPathType(null); }
    }
    public class FunctIdType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private FunctIdType(short? value) : base(value) { }
        public static implicit operator FunctIdType(short? value) { return new FunctIdType(value); }
        public static implicit operator FunctIdType(DBNull value) { return new FunctIdType(null); }
        private FunctIdType(int? value) : base(value) { }
        public static implicit operator FunctIdType(int? value) { return new FunctIdType(value); }
    }
    public class GarnishTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GarnishTypeType(string value) : base(value) { }
        public static implicit operator GarnishTypeType(string value) { return new GarnishTypeType(value); }
        public static implicit operator GarnishTypeType(DBNull value) { return new GarnishTypeType(null); }
    }
    public class GDPRDataGroupType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GDPRDataGroupType(string value) : base(value) { }
        public static implicit operator GDPRDataGroupType(string value) { return new GDPRDataGroupType(value); }
        public static implicit operator GDPRDataGroupType(DBNull value) { return new GDPRDataGroupType(null); }
    }
    public class GenericCodeType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GenericCodeType(string value) : base(value) { }
        public static implicit operator GenericCodeType(string value) { return new GenericCodeType(value); }
        public static implicit operator GenericCodeType(DBNull value) { return new GenericCodeType(null); }
    }
    public class GenericDate : DateTimeType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 23; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private GenericDate(DateTime? value) : base(value) { }
        public static implicit operator GenericDate(DateTime? value) { return new GenericDate(value); }
        public static implicit operator GenericDate(DBNull value) { return new GenericDate(null); }
    }
    public class GenericDateType : DateTimeType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 23; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private GenericDateType(DateTime? value) : base(value) { }
        public static implicit operator GenericDateType(DateTime? value) { return new GenericDateType(value); }
        public static implicit operator GenericDateType(DBNull value) { return new GenericDateType(null); }
    }
    public class GenericDecimalType : DecimalType
    {
        public override int Length { get => 17; }
        public override byte Precision { get => 38; }
        public override byte Scale { get => 10; }
        public override bool Nullable { get => true; }
        private GenericDecimalType(decimal? value) : base(value) { }
        public static implicit operator GenericDecimalType(decimal? value) { return new GenericDecimalType(value); }
        public static implicit operator GenericDecimalType(DBNull value) { return new GenericDecimalType(null); }
    }
    public class GenericFloatType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 24; }
        public override byte Scale { get => 10; }
        public override bool Nullable { get => true; }
        private GenericFloatType(decimal? value) : base(value) { }
        public static implicit operator GenericFloatType(decimal? value) { return new GenericFloatType(value); }
        public static implicit operator GenericFloatType(DBNull value) { return new GenericFloatType(null); }
    }
    public class GenericIntType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GenericIntType(int? value) : base(value) { }
        public static implicit operator GenericIntType(int? value) { return new GenericIntType(value); }
        public static implicit operator GenericIntType(DBNull value) { return new GenericIntType(null); }
        private GenericIntType(long? value) : base(value) { }
        public static implicit operator GenericIntType(long? value) { return new GenericIntType(value); }
    }
    public class GenericKeyType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GenericKeyType(string value) : base(value) { }
        public static implicit operator GenericKeyType(string value) { return new GenericKeyType(value); }
        public static implicit operator GenericKeyType(DBNull value) { return new GenericKeyType(null); }
    }
    public class GenericMedCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GenericMedCodeType(string value) : base(value) { }
        public static implicit operator GenericMedCodeType(string value) { return new GenericMedCodeType(value); }
        public static implicit operator GenericMedCodeType(DBNull value) { return new GenericMedCodeType(null); }
    }
    public class GenericNoType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GenericNoType(int? value) : base(value) { }
        public static implicit operator GenericNoType(int? value) { return new GenericNoType(value); }
        public static implicit operator GenericNoType(DBNull value) { return new GenericNoType(null); }
        private GenericNoType(long? value) : base(value) { }
        public static implicit operator GenericNoType(long? value) { return new GenericNoType(value); }
    }
    public class GenericTypeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GenericTypeType(int? value) : base(value) { }
        public static implicit operator GenericTypeType(int? value) { return new GenericTypeType(value); }
        public static implicit operator GenericTypeType(DBNull value) { return new GenericTypeType(null); }
        private GenericTypeType(long? value) : base(value) { }
        public static implicit operator GenericTypeType(long? value) { return new GenericTypeType(value); }
    }
    public class GivenNameType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GivenNameType(string value) : base(value) { }
        public static implicit operator GivenNameType(string value) { return new GivenNameType(value); }
        public static implicit operator GivenNameType(DBNull value) { return new GivenNameType(null); }
    }
    public class GlbankRefTypeType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GlbankRefTypeType(string value) : base(value) { }
        public static implicit operator GlbankRefTypeType(string value) { return new GlbankRefTypeType(value); }
        public static implicit operator GlbankRefTypeType(DBNull value) { return new GlbankRefTypeType(null); }
    }
    public class GlbankTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GlbankTypeType(string value) : base(value) { }
        public static implicit operator GlbankTypeType(string value) { return new GlbankTypeType(value); }
        public static implicit operator GlbankTypeType(DBNull value) { return new GlbankTypeType(null); }
    }
    public class GlCheckNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GlCheckNumType(int? value) : base(value) { }
        public static implicit operator GlCheckNumType(int? value) { return new GlCheckNumType(value); }
        public static implicit operator GlCheckNumType(DBNull value) { return new GlCheckNumType(null); }
        private GlCheckNumType(long? value) : base(value) { }
        public static implicit operator GlCheckNumType(long? value) { return new GlCheckNumType(value); }
    }
    public class GlobalPlanningModeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GlobalPlanningModeType(string value) : base(value) { }
        public static implicit operator GlobalPlanningModeType(string value) { return new GlobalPlanningModeType(value); }
        public static implicit operator GlobalPlanningModeType(DBNull value) { return new GlobalPlanningModeType(null); }
    }
    public class GlrpthcCalcTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GlrpthcCalcTypeType(string value) : base(value) { }
        public static implicit operator GlrpthcCalcTypeType(string value) { return new GlrpthcCalcTypeType(value); }
        public static implicit operator GlrpthcCalcTypeType(DBNull value) { return new GlrpthcCalcTypeType(null); }
    }
    public class GlrpthcRangeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GlrpthcRangeType(string value) : base(value) { }
        public static implicit operator GlrpthcRangeType(string value) { return new GlrpthcRangeType(value); }
        public static implicit operator GlrpthcRangeType(DBNull value) { return new GlrpthcRangeType(null); }
    }
    public class GlrpthcSourceType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GlrpthcSourceType(string value) : base(value) { }
        public static implicit operator GlrpthcSourceType(string value) { return new GlrpthcSourceType(value); }
        public static implicit operator GlrpthcSourceType(DBNull value) { return new GlrpthcSourceType(null); }
    }
    public class GlrptlAcctSortType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GlrptlAcctSortType(byte? value) : base(value) { }
        public static implicit operator GlrptlAcctSortType(byte? value) { return new GlrptlAcctSortType(value); }
        public static implicit operator GlrptlAcctSortType(DBNull value) { return new GlrptlAcctSortType(null); }
        private GlrptlAcctSortType(int? value) : base(value) { }
        public static implicit operator GlrptlAcctSortType(int? value) { return new GlrptlAcctSortType(value); }
    }
    public class GlrptlBalTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GlrptlBalTypeType(string value) : base(value) { }
        public static implicit operator GlrptlBalTypeType(string value) { return new GlrptlBalTypeType(value); }
        public static implicit operator GlrptlBalTypeType(DBNull value) { return new GlrptlBalTypeType(null); }
    }
    public class GlrptlcParenType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GlrptlcParenType(string value) : base(value) { }
        public static implicit operator GlrptlcParenType(string value) { return new GlrptlcParenType(value); }
        public static implicit operator GlrptlcParenType(DBNull value) { return new GlrptlcParenType(null); }
    }
    public class GlrptlcRangeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GlrptlcRangeType(string value) : base(value) { }
        public static implicit operator GlrptlcRangeType(string value) { return new GlrptlcRangeType(value); }
        public static implicit operator GlrptlcRangeType(DBNull value) { return new GlrptlcRangeType(null); }
    }
    public class GlrptlPrintType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GlrptlPrintType(string value) : base(value) { }
        public static implicit operator GlrptlPrintType(string value) { return new GlrptlPrintType(value); }
        public static implicit operator GlrptlPrintType(DBNull value) { return new GlrptlPrintType(null); }
    }
    public class GlrptlTextAlignType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GlrptlTextAlignType(string value) : base(value) { }
        public static implicit operator GlrptlTextAlignType(string value) { return new GlrptlTextAlignType(value); }
        public static implicit operator GlrptlTextAlignType(DBNull value) { return new GlrptlTextAlignType(null); }
    }
    public class GlrptlTextPrintType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GlrptlTextPrintType(string value) : base(value) { }
        public static implicit operator GlrptlTextPrintType(string value) { return new GlrptlTextPrintType(value); }
        public static implicit operator GlrptlTextPrintType(DBNull value) { return new GlrptlTextPrintType(null); }
    }
    public class GlrptlTextTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GlrptlTextTypeType(string value) : base(value) { }
        public static implicit operator GlrptlTextTypeType(string value) { return new GlrptlTextTypeType(value); }
        public static implicit operator GlrptlTextTypeType(DBNull value) { return new GlrptlTextTypeType(null); }
    }
    public class GlrptlTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GlrptlTypeType(string value) : base(value) { }
        public static implicit operator GlrptlTypeType(string value) { return new GlrptlTypeType(value); }
        public static implicit operator GlrptlTypeType(DBNull value) { return new GlrptlTypeType(null); }
    }
    public class GLVoucherStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GLVoucherStatusType(string value) : base(value) { }
        public static implicit operator GLVoucherStatusType(string value) { return new GLVoucherStatusType(value); }
        public static implicit operator GLVoucherStatusType(DBNull value) { return new GLVoucherStatusType(null); }
    }
    public class GoodsExVatType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private GoodsExVatType(decimal? value) : base(value) { }
        public static implicit operator GoodsExVatType(decimal? value) { return new GoodsExVatType(value); }
        public static implicit operator GoodsExVatType(DBNull value) { return new GoodsExVatType(null); }
    }
    public class GPAType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GPAType(string value) : base(value) { }
        public static implicit operator GPAType(string value) { return new GPAType(value); }
        public static implicit operator GPAType(DBNull value) { return new GPAType(null); }
    }
    public class GracePeriodType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GracePeriodType(short? value) : base(value) { }
        public static implicit operator GracePeriodType(short? value) { return new GracePeriodType(value); }
        public static implicit operator GracePeriodType(DBNull value) { return new GracePeriodType(null); }
        private GracePeriodType(int? value) : base(value) { }
        public static implicit operator GracePeriodType(int? value) { return new GracePeriodType(value); }
    }
    public class GraduationYearType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GraduationYearType(short? value) : base(value) { }
        public static implicit operator GraduationYearType(short? value) { return new GraduationYearType(value); }
        public static implicit operator GraduationYearType(DBNull value) { return new GraduationYearType(null); }
        private GraduationYearType(int? value) : base(value) { }
        public static implicit operator GraduationYearType(int? value) { return new GraduationYearType(value); }
    }
    public class GrnLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GrnLineType(short? value) : base(value) { }
        public static implicit operator GrnLineType(short? value) { return new GrnLineType(value); }
        public static implicit operator GrnLineType(DBNull value) { return new GrnLineType(null); }
        private GrnLineType(int? value) : base(value) { }
        public static implicit operator GrnLineType(int? value) { return new GrnLineType(value); }
    }
    public class GrnNumType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GrnNumType(string value) : base(value) { }
        public static implicit operator GrnNumType(string value) { return new GrnNumType(value); }
        public static implicit operator GrnNumType(DBNull value) { return new GrnNumType(null); }
    }
    public class GrnPackNumType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GrnPackNumType(string value) : base(value) { }
        public static implicit operator GrnPackNumType(string value) { return new GrnPackNumType(value); }
        public static implicit operator GrnPackNumType(DBNull value) { return new GrnPackNumType(null); }
    }
    public class GrnStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GrnStatusType(string value) : base(value) { }
        public static implicit operator GrnStatusType(string value) { return new GrnStatusType(value); }
        public static implicit operator GrnStatusType(DBNull value) { return new GrnStatusType(null); }
    }
    public class GroupnameType : StringType
    {
        public override int Length { get => 400; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private GroupnameType(string value) : base(value) { }
        public static implicit operator GroupnameType(string value) { return new GroupnameType(value); }
        public static implicit operator GroupnameType(DBNull value) { return new GroupnameType(null); }
    }
    public class HandlerEditingModeType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private HandlerEditingModeType(string value) : base(value) { }
        public static implicit operator HandlerEditingModeType(string value) { return new HandlerEditingModeType(value); }
        public static implicit operator HandlerEditingModeType(DBNull value) { return new HandlerEditingModeType(null); }
    }
    public class HashType : StringType
    {
        public override int Length { get => 64; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private HashType(string value) : base(value) { }
        public static implicit operator HashType(string value) { return new HashType(value); }
        public static implicit operator HashType(DBNull value) { return new HashType(null); }
    }
    public class HazardousMatlClassType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private HazardousMatlClassType(string value) : base(value) { }
        public static implicit operator HazardousMatlClassType(string value) { return new HazardousMatlClassType(value); }
        public static implicit operator HazardousMatlClassType(DBNull value) { return new HazardousMatlClassType(null); }
    }
    public class HazardousMatlContactNameType : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private HazardousMatlContactNameType(string value) : base(value) { }
        public static implicit operator HazardousMatlContactNameType(string value) { return new HazardousMatlContactNameType(value); }
        public static implicit operator HazardousMatlContactNameType(DBNull value) { return new HazardousMatlContactNameType(null); }
    }
    public class HazardousMatlPackageGroupType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private HazardousMatlPackageGroupType(string value) : base(value) { }
        public static implicit operator HazardousMatlPackageGroupType(string value) { return new HazardousMatlPackageGroupType(value); }
        public static implicit operator HazardousMatlPackageGroupType(DBNull value) { return new HazardousMatlPackageGroupType(null); }
    }
    public class HelpContextType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private HelpContextType(int? value) : base(value) { }
        public static implicit operator HelpContextType(int? value) { return new HelpContextType(value); }
        public static implicit operator HelpContextType(DBNull value) { return new HelpContextType(null); }
        private HelpContextType(long? value) : base(value) { }
        public static implicit operator HelpContextType(long? value) { return new HelpContextType(value); }
    }
    public class HelpSubdirType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private HelpSubdirType(string value) : base(value) { }
        public static implicit operator HelpSubdirType(string value) { return new HelpSubdirType(value); }
        public static implicit operator HelpSubdirType(DBNull value) { return new HelpSubdirType(null); }
    }
    public class HideParentGridColumnsOptionType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private HideParentGridColumnsOptionType(string value) : base(value) { }
        public static implicit operator HideParentGridColumnsOptionType(string value) { return new HideParentGridColumnsOptionType(value); }
        public static implicit operator HideParentGridColumnsOptionType(DBNull value) { return new HideParentGridColumnsOptionType(null); }
    }
    public class HierarchyType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private HierarchyType(string value) : base(value) { }
        public static implicit operator HierarchyType(string value) { return new HierarchyType(value); }
        public static implicit operator HierarchyType(DBNull value) { return new HierarchyType(null); }
    }
    public class HighLowCharType : StringType
    {
        public override int Length { get => 8000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private HighLowCharType(string value) : base(value) { }
        public static implicit operator HighLowCharType(string value) { return new HighLowCharType(value); }
        public static implicit operator HighLowCharType(DBNull value) { return new HighLowCharType(null); }
    }
    public class HolidayOffsetMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private HolidayOffsetMethodType(string value) : base(value) { }
        public static implicit operator HolidayOffsetMethodType(string value) { return new HolidayOffsetMethodType(value); }
        public static implicit operator HolidayOffsetMethodType(DBNull value) { return new HolidayOffsetMethodType(null); }
    }
    public class HorizonWorkDaysType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private HorizonWorkDaysType(short? value) : base(value) { }
        public static implicit operator HorizonWorkDaysType(short? value) { return new HorizonWorkDaysType(value); }
        public static implicit operator HorizonWorkDaysType(DBNull value) { return new HorizonWorkDaysType(null); }
        private HorizonWorkDaysType(int? value) : base(value) { }
        public static implicit operator HorizonWorkDaysType(int? value) { return new HorizonWorkDaysType(value); }
    }
    public class HourAndMinuteType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private HourAndMinuteType(short? value) : base(value) { }
        public static implicit operator HourAndMinuteType(short? value) { return new HourAndMinuteType(value); }
        public static implicit operator HourAndMinuteType(DBNull value) { return new HourAndMinuteType(null); }
        private HourAndMinuteType(int? value) : base(value) { }
        public static implicit operator HourAndMinuteType(int? value) { return new HourAndMinuteType(value); }
    }
    public class HourlyRateType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private HourlyRateType(decimal? value) : base(value) { }
        public static implicit operator HourlyRateType(decimal? value) { return new HourlyRateType(value); }
        public static implicit operator HourlyRateType(DBNull value) { return new HourlyRateType(null); }
    }
    public class HoursOffType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 8; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private HoursOffType(decimal? value) : base(value) { }
        public static implicit operator HoursOffType(decimal? value) { return new HoursOffType(value); }
        public static implicit operator HoursOffType(DBNull value) { return new HoursOffType(null); }
    }
    public class HTSCodeType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private HTSCodeType(string value) : base(value) { }
        public static implicit operator HTSCodeType(string value) { return new HTSCodeType(value); }
        public static implicit operator HTSCodeType(DBNull value) { return new HTSCodeType(null); }
    }
    public class HTTPMethodType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private HTTPMethodType(string value) : base(value) { }
        public static implicit operator HTTPMethodType(string value) { return new HTTPMethodType(value); }
        public static implicit operator HTTPMethodType(DBNull value) { return new HTTPMethodType(null); }
    }
    public class HugeTransNumType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private HugeTransNumType(decimal? value) : base(value) { }
        public static implicit operator HugeTransNumType(decimal? value) { return new HugeTransNumType(value); }
        public static implicit operator HugeTransNumType(DBNull value) { return new HugeTransNumType(null); }
    }
    public class HugeWeightType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 13; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private HugeWeightType(decimal? value) : base(value) { }
        public static implicit operator HugeWeightType(decimal? value) { return new HugeWeightType(value); }
        public static implicit operator HugeWeightType(DBNull value) { return new HugeWeightType(null); }
    }
    public class I9AdmissionType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private I9AdmissionType(string value) : base(value) { }
        public static implicit operator I9AdmissionType(string value) { return new I9AdmissionType(value); }
        public static implicit operator I9AdmissionType(DBNull value) { return new I9AdmissionType(null); }
    }
    public class I9AuthorityType : StringType
    {
        public override int Length { get => 70; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private I9AuthorityType(string value) : base(value) { }
        public static implicit operator I9AuthorityType(string value) { return new I9AuthorityType(value); }
        public static implicit operator I9AuthorityType(DBNull value) { return new I9AuthorityType(null); }
    }
    public class I9BoxNumType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private I9BoxNumType(string value) : base(value) { }
        public static implicit operator I9BoxNumType(string value) { return new I9BoxNumType(value); }
        public static implicit operator I9BoxNumType(DBNull value) { return new I9BoxNumType(null); }
    }
    public class I9DocIdType : StringType
    {
        public override int Length { get => 48; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private I9DocIdType(string value) : base(value) { }
        public static implicit operator I9DocIdType(string value) { return new I9DocIdType(value); }
        public static implicit operator I9DocIdType(DBNull value) { return new I9DocIdType(null); }
    }
    public class I9FormType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private I9FormType(string value) : base(value) { }
        public static implicit operator I9FormType(string value) { return new I9FormType(value); }
        public static implicit operator I9FormType(DBNull value) { return new I9FormType(null); }
    }
    public class I9ListIdType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private I9ListIdType(string value) : base(value) { }
        public static implicit operator I9ListIdType(string value) { return new I9ListIdType(value); }
        public static implicit operator I9ListIdType(DBNull value) { return new I9ListIdType(null); }
    }
    public class ImageIdType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ImageIdType(string value) : base(value) { }
        public static implicit operator ImageIdType(string value) { return new ImageIdType(value); }
        public static implicit operator ImageIdType(DBNull value) { return new ImageIdType(null); }
    }
    public class ImageNameType : StringType
    {
        public override int Length { get => 500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ImageNameType(string value) : base(value) { }
        public static implicit operator ImageNameType(string value) { return new ImageNameType(value); }
        public static implicit operator ImageNameType(DBNull value) { return new ImageNameType(null); }
    }
    public class ImageType : BinaryType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ImageType(Byte[] value) : base(value) { }
        public static implicit operator ImageType(Byte[] value) { return new ImageType(value); }
        public static implicit operator ImageType(DBNull value) { return new ImageType(null); }
    }
    public class ImportDocIdType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ImportDocIdType(string value) : base(value) { }
        public static implicit operator ImportDocIdType(string value) { return new ImportDocIdType(value); }
        public static implicit operator ImportDocIdType(DBNull value) { return new ImportDocIdType(null); }
    }
    public class ImportedAmountType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ImportedAmountType(string value) : base(value) { }
        public static implicit operator ImportedAmountType(string value) { return new ImportedAmountType(value); }
        public static implicit operator ImportedAmountType(DBNull value) { return new ImportedAmountType(null); }
    }
    public class ImportedPackagesType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ImportedPackagesType(string value) : base(value) { }
        public static implicit operator ImportedPackagesType(string value) { return new ImportedPackagesType(value); }
        public static implicit operator ImportedPackagesType(DBNull value) { return new ImportedPackagesType(null); }
    }
    public class ImportedWeightType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ImportedWeightType(string value) : base(value) { }
        public static implicit operator ImportedWeightType(string value) { return new ImportedWeightType(value); }
        public static implicit operator ImportedWeightType(DBNull value) { return new ImportedWeightType(null); }
    }
    public class ImportErrorNumberType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ImportErrorNumberType(decimal? value) : base(value) { }
        public static implicit operator ImportErrorNumberType(decimal? value) { return new ImportErrorNumberType(value); }
        public static implicit operator ImportErrorNumberType(DBNull value) { return new ImportErrorNumberType(null); }
    }
    public class ImportSequenceType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ImportSequenceType(int? value) : base(value) { }
        public static implicit operator ImportSequenceType(int? value) { return new ImportSequenceType(value); }
        public static implicit operator ImportSequenceType(DBNull value) { return new ImportSequenceType(null); }
        private ImportSequenceType(long? value) : base(value) { }
        public static implicit operator ImportSequenceType(long? value) { return new ImportSequenceType(value); }
    }
    public class IndCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private IndCodeType(string value) : base(value) { }
        public static implicit operator IndCodeType(string value) { return new IndCodeType(value); }
        public static implicit operator IndCodeType(DBNull value) { return new IndCodeType(null); }
    }
    public class IndexNameType : StringType
    {
        public override int Length { get => 64; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private IndexNameType(string value) : base(value) { }
        public static implicit operator IndexNameType(string value) { return new IndexNameType(value); }
        public static implicit operator IndexNameType(DBNull value) { return new IndexNameType(null); }
    }
    public class Infobar : StringType
    {
        public override int Length { get => 5600; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private Infobar(string value) : base(value) { }
        public static implicit operator Infobar(string value) { return new Infobar(value); }
        public static implicit operator Infobar(DBNull value) { return new Infobar(null); }
    }
    public class InfobarType : StringType
    {
        public override int Length { get => 5600; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InfobarType(string value) : base(value) { }
        public static implicit operator InfobarType(string value) { return new InfobarType(value); }
        public static implicit operator InfobarType(DBNull value) { return new InfobarType(null); }
    }
    public class InitialType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InitialType(string value) : base(value) { }
        public static implicit operator InitialType(string value) { return new InitialType(value); }
        public static implicit operator InitialType(DBNull value) { return new InitialType(null); }
    }
    public class InlineListType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InlineListType(string value) : base(value) { }
        public static implicit operator InlineListType(string value) { return new InlineListType(value); }
        public static implicit operator InlineListType(DBNull value) { return new InlineListType(null); }
    }
    public class InputMaskType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InputMaskType(string value) : base(value) { }
        public static implicit operator InputMaskType(string value) { return new InputMaskType(value); }
        public static implicit operator InputMaskType(DBNull value) { return new InputMaskType(null); }
    }
    public class InsuranceAgeClassType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InsuranceAgeClassType(byte? value) : base(value) { }
        public static implicit operator InsuranceAgeClassType(byte? value) { return new InsuranceAgeClassType(value); }
        public static implicit operator InsuranceAgeClassType(DBNull value) { return new InsuranceAgeClassType(null); }
        private InsuranceAgeClassType(int? value) : base(value) { }
        public static implicit operator InsuranceAgeClassType(int? value) { return new InsuranceAgeClassType(value); }
    }
    public class InsuranceAgeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InsuranceAgeType(short? value) : base(value) { }
        public static implicit operator InsuranceAgeType(short? value) { return new InsuranceAgeType(value); }
        public static implicit operator InsuranceAgeType(DBNull value) { return new InsuranceAgeType(null); }
        private InsuranceAgeType(int? value) : base(value) { }
        public static implicit operator InsuranceAgeType(int? value) { return new InsuranceAgeType(value); }
    }
    public class InsuranceAmountType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private InsuranceAmountType(decimal? value) : base(value) { }
        public static implicit operator InsuranceAmountType(decimal? value) { return new InsuranceAmountType(value); }
        public static implicit operator InsuranceAmountType(DBNull value) { return new InsuranceAmountType(null); }
    }
    public class InsuranceCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InsuranceCodeType(string value) : base(value) { }
        public static implicit operator InsuranceCodeType(string value) { return new InsuranceCodeType(value); }
        public static implicit operator InsuranceCodeType(DBNull value) { return new InsuranceCodeType(null); }
    }
    public class InsuranceCompContMonthlyType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private InsuranceCompContMonthlyType(decimal? value) : base(value) { }
        public static implicit operator InsuranceCompContMonthlyType(decimal? value) { return new InsuranceCompContMonthlyType(value); }
        public static implicit operator InsuranceCompContMonthlyType(DBNull value) { return new InsuranceCompContMonthlyType(null); }
    }
    public class InsuranceCompContType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 8; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private InsuranceCompContType(decimal? value) : base(value) { }
        public static implicit operator InsuranceCompContType(decimal? value) { return new InsuranceCompContType(value); }
        public static implicit operator InsuranceCompContType(DBNull value) { return new InsuranceCompContType(null); }
    }
    public class InsuranceCostType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 8; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private InsuranceCostType(decimal? value) : base(value) { }
        public static implicit operator InsuranceCostType(decimal? value) { return new InsuranceCostType(value); }
        public static implicit operator InsuranceCostType(DBNull value) { return new InsuranceCostType(null); }
    }
    public class InsuranceCoverageClassType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InsuranceCoverageClassType(string value) : base(value) { }
        public static implicit operator InsuranceCoverageClassType(string value) { return new InsuranceCoverageClassType(value); }
        public static implicit operator InsuranceCoverageClassType(DBNull value) { return new InsuranceCoverageClassType(null); }
    }
    public class InsuranceMaxMinType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InsuranceMaxMinType(int? value) : base(value) { }
        public static implicit operator InsuranceMaxMinType(int? value) { return new InsuranceMaxMinType(value); }
        public static implicit operator InsuranceMaxMinType(DBNull value) { return new InsuranceMaxMinType(null); }
        private InsuranceMaxMinType(long? value) : base(value) { }
        public static implicit operator InsuranceMaxMinType(long? value) { return new InsuranceMaxMinType(value); }
    }
    public class InsurancePolicyType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InsurancePolicyType(string value) : base(value) { }
        public static implicit operator InsurancePolicyType(string value) { return new InsurancePolicyType(value); }
        public static implicit operator InsurancePolicyType(DBNull value) { return new InsurancePolicyType(null); }
    }
    public class InsurancePriceMonthlyType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private InsurancePriceMonthlyType(decimal? value) : base(value) { }
        public static implicit operator InsurancePriceMonthlyType(decimal? value) { return new InsurancePriceMonthlyType(value); }
        public static implicit operator InsurancePriceMonthlyType(DBNull value) { return new InsurancePriceMonthlyType(null); }
    }
    public class InsuranceRoundingDivisorType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InsuranceRoundingDivisorType(short? value) : base(value) { }
        public static implicit operator InsuranceRoundingDivisorType(short? value) { return new InsuranceRoundingDivisorType(value); }
        public static implicit operator InsuranceRoundingDivisorType(DBNull value) { return new InsuranceRoundingDivisorType(null); }
        private InsuranceRoundingDivisorType(int? value) : base(value) { }
        public static implicit operator InsuranceRoundingDivisorType(int? value) { return new InsuranceRoundingDivisorType(value); }
    }
    public class InsuranceTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InsuranceTypeType(string value) : base(value) { }
        public static implicit operator InsuranceTypeType(string value) { return new InsuranceTypeType(value); }
        public static implicit operator InsuranceTypeType(DBNull value) { return new InsuranceTypeType(null); }
    }
    public class InteractionIdType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InteractionIdType(decimal? value) : base(value) { }
        public static implicit operator InteractionIdType(decimal? value) { return new InteractionIdType(value); }
        public static implicit operator InteractionIdType(DBNull value) { return new InteractionIdType(null); }
    }
    public class InteractionRefTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InteractionRefTypeType(string value) : base(value) { }
        public static implicit operator InteractionRefTypeType(string value) { return new InteractionRefTypeType(value); }
        public static implicit operator InteractionRefTypeType(DBNull value) { return new InteractionRefTypeType(null); }
    }
    public class InteractionTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InteractionTypeType(string value) : base(value) { }
        public static implicit operator InteractionTypeType(string value) { return new InteractionTypeType(value); }
        public static implicit operator InteractionTypeType(DBNull value) { return new InteractionTypeType(null); }
    }
    public class InternationalBankAccountType : StringType
    {
        public override int Length { get => 68; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InternationalBankAccountType(string value) : base(value) { }
        public static implicit operator InternationalBankAccountType(string value) { return new InternationalBankAccountType(value); }
        public static implicit operator InternationalBankAccountType(DBNull value) { return new InternationalBankAccountType(null); }
    }
    public class InternetMediaTypeType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InternetMediaTypeType(string value) : base(value) { }
        public static implicit operator InternetMediaTypeType(string value) { return new InternetMediaTypeType(value); }
        public static implicit operator InternetMediaTypeType(DBNull value) { return new InternetMediaTypeType(null); }
    }
    public class IntersitePostingMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private IntersitePostingMethodType(string value) : base(value) { }
        public static implicit operator IntersitePostingMethodType(string value) { return new IntersitePostingMethodType(value); }
        public static implicit operator IntersitePostingMethodType(DBNull value) { return new IntersitePostingMethodType(null); }
    }
    public class IntLineNoType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private IntLineNoType(int? value) : base(value) { }
        public static implicit operator IntLineNoType(int? value) { return new IntLineNoType(value); }
        public static implicit operator IntLineNoType(DBNull value) { return new IntLineNoType(null); }
        private IntLineNoType(long? value) : base(value) { }
        public static implicit operator IntLineNoType(long? value) { return new IntLineNoType(value); }
    }
    public class IntranetNameType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private IntranetNameType(string value) : base(value) { }
        public static implicit operator IntranetNameType(string value) { return new IntranetNameType(value); }
        public static implicit operator IntranetNameType(DBNull value) { return new IntranetNameType(null); }
    }
    public class InvBatchIDType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 19; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InvBatchIDType(decimal? value) : base(value) { }
        public static implicit operator InvBatchIDType(decimal? value) { return new InvBatchIDType(value); }
        public static implicit operator InvBatchIDType(DBNull value) { return new InvBatchIDType(null); }
    }
    public class InvCategoryType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InvCategoryType(string value) : base(value) { }
        public static implicit operator InvCategoryType(string value) { return new InvCategoryType(value); }
        public static implicit operator InvCategoryType(DBNull value) { return new InvCategoryType(null); }
    }
    public class InventoryReservationProcessStepType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InventoryReservationProcessStepType(string value) : base(value) { }
        public static implicit operator InventoryReservationProcessStepType(string value) { return new InventoryReservationProcessStepType(value); }
        public static implicit operator InventoryReservationProcessStepType(DBNull value) { return new InventoryReservationProcessStepType(null); }
    }
    public class InvFreqType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InvFreqType(string value) : base(value) { }
        public static implicit operator InvFreqType(string value) { return new InvFreqType(value); }
        public static implicit operator InvFreqType(DBNull value) { return new InvFreqType(null); }
    }
    public class InvGroupType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InvGroupType(short? value) : base(value) { }
        public static implicit operator InvGroupType(short? value) { return new InvGroupType(value); }
        public static implicit operator InvGroupType(DBNull value) { return new InvGroupType(null); }
        private InvGroupType(int? value) : base(value) { }
        public static implicit operator InvGroupType(int? value) { return new InvGroupType(value); }
    }
    public class InvLineType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InvLineType(int? value) : base(value) { }
        public static implicit operator InvLineType(int? value) { return new InvLineType(value); }
        public static implicit operator InvLineType(DBNull value) { return new InvLineType(null); }
        private InvLineType(long? value) : base(value) { }
        public static implicit operator InvLineType(long? value) { return new InvLineType(value); }
    }
    public class InvNumLength : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InvNumLength(byte? value) : base(value) { }
        public static implicit operator InvNumLength(byte? value) { return new InvNumLength(value); }
        public static implicit operator InvNumLength(DBNull value) { return new InvNumLength(null); }
        private InvNumLength(int? value) : base(value) { }
        public static implicit operator InvNumLength(int? value) { return new InvNumLength(value); }
    }
    public class InvNumType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InvNumType(string value) : base(value) { }
        public static implicit operator InvNumType(string value) { return new InvNumType(value); }
        public static implicit operator InvNumType(DBNull value) { return new InvNumType(null); }
    }
    public class InvNumVoucherType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InvNumVoucherType(string value) : base(value) { }
        public static implicit operator InvNumVoucherType(string value) { return new InvNumVoucherType(value); }
        public static implicit operator InvNumVoucherType(DBNull value) { return new InvNumVoucherType(null); }
    }
    public class InvoicesType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InvoicesType(int? value) : base(value) { }
        public static implicit operator InvoicesType(int? value) { return new InvoicesType(value); }
        public static implicit operator InvoicesType(DBNull value) { return new InvoicesType(null); }
        private InvoicesType(long? value) : base(value) { }
        public static implicit operator InvoicesType(long? value) { return new InvoicesType(value); }
    }
    public class InvoiceTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InvoiceTypeType(string value) : base(value) { }
        public static implicit operator InvoiceTypeType(string value) { return new InvoiceTypeType(value); }
        public static implicit operator InvoiceTypeType(DBNull value) { return new InvoiceTypeType(null); }
    }
    public class InvProSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InvProSeqType(short? value) : base(value) { }
        public static implicit operator InvProSeqType(short? value) { return new InvProSeqType(value); }
        public static implicit operator InvProSeqType(DBNull value) { return new InvProSeqType(null); }
        private InvProSeqType(int? value) : base(value) { }
        public static implicit operator InvProSeqType(int? value) { return new InvProSeqType(value); }
    }
    public class InvSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private InvSeqType(int? value) : base(value) { }
        public static implicit operator InvSeqType(int? value) { return new InvSeqType(value); }
        public static implicit operator InvSeqType(DBNull value) { return new InvSeqType(null); }
        private InvSeqType(long? value) : base(value) { }
        public static implicit operator InvSeqType(long? value) { return new InvSeqType(value); }
    }
    public class IONTransferTypeType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private IONTransferTypeType(byte? value) : base(value) { }
        public static implicit operator IONTransferTypeType(byte? value) { return new IONTransferTypeType(value); }
        public static implicit operator IONTransferTypeType(DBNull value) { return new IONTransferTypeType(null); }
        private IONTransferTypeType(int? value) : base(value) { }
        public static implicit operator IONTransferTypeType(int? value) { return new IONTransferTypeType(value); }
    }
    public class IRSFedIdType : StringType
    {
        public override int Length { get => 26; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private IRSFedIdType(string value) : base(value) { }
        public static implicit operator IRSFedIdType(string value) { return new IRSFedIdType(value); }
        public static implicit operator IRSFedIdType(DBNull value) { return new IRSFedIdType(null); }
    }
    public class IRSPayerControlType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private IRSPayerControlType(string value) : base(value) { }
        public static implicit operator IRSPayerControlType(string value) { return new IRSPayerControlType(value); }
        public static implicit operator IRSPayerControlType(DBNull value) { return new IRSPayerControlType(null); }
    }
    public class IRSTransCodeType : StringType
    {
        public override int Length { get => 10; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private IRSTransCodeType(string value) : base(value) { }
        public static implicit operator IRSTransCodeType(string value) { return new IRSTransCodeType(value); }
        public static implicit operator IRSTransCodeType(DBNull value) { return new IRSTransCodeType(null); }
    }
    public class ISOBankTranCodeDomainType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ISOBankTranCodeDomainType(string value) : base(value) { }
        public static implicit operator ISOBankTranCodeDomainType(string value) { return new ISOBankTranCodeDomainType(value); }
        public static implicit operator ISOBankTranCodeDomainType(DBNull value) { return new ISOBankTranCodeDomainType(null); }
    }
    public class ISOCountryCodeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ISOCountryCodeType(string value) : base(value) { }
        public static implicit operator ISOCountryCodeType(string value) { return new ISOCountryCodeType(value); }
        public static implicit operator ISOCountryCodeType(DBNull value) { return new ISOCountryCodeType(null); }
    }
    public class ISONumericCodeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ISONumericCodeType(short? value) : base(value) { }
        public static implicit operator ISONumericCodeType(short? value) { return new ISONumericCodeType(value); }
        public static implicit operator ISONumericCodeType(DBNull value) { return new ISONumericCodeType(null); }
        private ISONumericCodeType(int? value) : base(value) { }
        public static implicit operator ISONumericCodeType(int? value) { return new ISONumericCodeType(value); }
    }
    public class ItemCatalogIDType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemCatalogIDType(string value) : base(value) { }
        public static implicit operator ItemCatalogIDType(string value) { return new ItemCatalogIDType(value); }
        public static implicit operator ItemCatalogIDType(DBNull value) { return new ItemCatalogIDType(null); }
    }
    public class ItemCatalogStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemCatalogStatusType(string value) : base(value) { }
        public static implicit operator ItemCatalogStatusType(string value) { return new ItemCatalogStatusType(value); }
        public static implicit operator ItemCatalogStatusType(DBNull value) { return new ItemCatalogStatusType(null); }
    }
    public class ItemCategoryHierarchyRankType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemCategoryHierarchyRankType(short? value) : base(value) { }
        public static implicit operator ItemCategoryHierarchyRankType(short? value) { return new ItemCategoryHierarchyRankType(value); }
        public static implicit operator ItemCategoryHierarchyRankType(DBNull value) { return new ItemCategoryHierarchyRankType(null); }
        private ItemCategoryHierarchyRankType(int? value) : base(value) { }
        public static implicit operator ItemCategoryHierarchyRankType(int? value) { return new ItemCategoryHierarchyRankType(value); }
    }
    public class ItemCategoryRankType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemCategoryRankType(short? value) : base(value) { }
        public static implicit operator ItemCategoryRankType(short? value) { return new ItemCategoryRankType(value); }
        public static implicit operator ItemCategoryRankType(DBNull value) { return new ItemCategoryRankType(null); }
        private ItemCategoryRankType(int? value) : base(value) { }
        public static implicit operator ItemCategoryRankType(int? value) { return new ItemCategoryRankType(value); }
    }
    public class ItemCategoryType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemCategoryType(string value) : base(value) { }
        public static implicit operator ItemCategoryType(string value) { return new ItemCategoryType(value); }
        public static implicit operator ItemCategoryType(DBNull value) { return new ItemCategoryType(null); }
    }
    public class ItemContentFactorType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 5; }
        public override bool Nullable { get => true; }
        private ItemContentFactorType(decimal? value) : base(value) { }
        public static implicit operator ItemContentFactorType(decimal? value) { return new ItemContentFactorType(value); }
        public static implicit operator ItemContentFactorType(DBNull value) { return new ItemContentFactorType(null); }
    }
    public class ItemContentPriceBasisType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemContentPriceBasisType(string value) : base(value) { }
        public static implicit operator ItemContentPriceBasisType(string value) { return new ItemContentPriceBasisType(value); }
        public static implicit operator ItemContentPriceBasisType(DBNull value) { return new ItemContentPriceBasisType(null); }
    }
    public class ItemContentType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemContentType(string value) : base(value) { }
        public static implicit operator ItemContentType(string value) { return new ItemContentType(value); }
        public static implicit operator ItemContentType(DBNull value) { return new ItemContentType(null); }
    }
    public class ItemlocRankType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemlocRankType(short? value) : base(value) { }
        public static implicit operator ItemlocRankType(short? value) { return new ItemlocRankType(value); }
        public static implicit operator ItemlocRankType(DBNull value) { return new ItemlocRankType(null); }
        private ItemlocRankType(int? value) : base(value) { }
        public static implicit operator ItemlocRankType(int? value) { return new ItemlocRankType(value); }
    }
    public class ItemPictureSequenceType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemPictureSequenceType(int? value) : base(value) { }
        public static implicit operator ItemPictureSequenceType(int? value) { return new ItemPictureSequenceType(value); }
        public static implicit operator ItemPictureSequenceType(DBNull value) { return new ItemPictureSequenceType(null); }
        private ItemPictureSequenceType(long? value) : base(value) { }
        public static implicit operator ItemPictureSequenceType(long? value) { return new ItemPictureSequenceType(value); }
    }
    public class ItemPortalPriceStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemPortalPriceStatusType(string value) : base(value) { }
        public static implicit operator ItemPortalPriceStatusType(string value) { return new ItemPortalPriceStatusType(value); }
        public static implicit operator ItemPortalPriceStatusType(DBNull value) { return new ItemPortalPriceStatusType(null); }
    }
    public class ItemPriceRequestIdType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemPriceRequestIdType(string value) : base(value) { }
        public static implicit operator ItemPriceRequestIdType(string value) { return new ItemPriceRequestIdType(value); }
        public static implicit operator ItemPriceRequestIdType(DBNull value) { return new ItemPriceRequestIdType(null); }
    }
    public class ItemPriceRequestStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemPriceRequestStatusType(string value) : base(value) { }
        public static implicit operator ItemPriceRequestStatusType(string value) { return new ItemPriceRequestStatusType(value); }
        public static implicit operator ItemPriceRequestStatusType(DBNull value) { return new ItemPriceRequestStatusType(null); }
    }
    public class ItemPriceResponseOperatorType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemPriceResponseOperatorType(string value) : base(value) { }
        public static implicit operator ItemPriceResponseOperatorType(string value) { return new ItemPriceResponseOperatorType(value); }
        public static implicit operator ItemPriceResponseOperatorType(DBNull value) { return new ItemPriceResponseOperatorType(null); }
    }
    public class ItemPriceResponseStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemPriceResponseStatusType(string value) : base(value) { }
        public static implicit operator ItemPriceResponseStatusType(string value) { return new ItemPriceResponseStatusType(value); }
        public static implicit operator ItemPriceResponseStatusType(DBNull value) { return new ItemPriceResponseStatusType(null); }
    }
    public class ItemStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemStatusType(string value) : base(value) { }
        public static implicit operator ItemStatusType(string value) { return new ItemStatusType(value); }
        public static implicit operator ItemStatusType(DBNull value) { return new ItemStatusType(null); }
    }
    public class ItemType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemType(string value) : base(value) { }
        public static implicit operator ItemType(string value) { return new ItemType(value); }
        public static implicit operator ItemType(DBNull value) { return new ItemType(null); }
    }
    public class ItemvendpriceStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemvendpriceStatusType(string value) : base(value) { }
        public static implicit operator ItemvendpriceStatusType(string value) { return new ItemvendpriceStatusType(value); }
        public static implicit operator ItemvendpriceStatusType(DBNull value) { return new ItemvendpriceStatusType(null); }
    }
    public class ItemvendRankType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ItemvendRankType(short? value) : base(value) { }
        public static implicit operator ItemvendRankType(short? value) { return new ItemvendRankType(value); }
        public static implicit operator ItemvendRankType(DBNull value) { return new ItemvendRankType(null); }
        private ItemvendRankType(int? value) : base(value) { }
        public static implicit operator ItemvendRankType(int? value) { return new ItemvendRankType(value); }
    }
    public class ItemWeightType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 5; }
        public override bool Nullable { get => true; }
        private ItemWeightType(decimal? value) : base(value) { }
        public static implicit operator ItemWeightType(decimal? value) { return new ItemWeightType(value); }
        public static implicit operator ItemWeightType(DBNull value) { return new ItemWeightType(null); }
    }
    public class JobDetailType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobDetailType(int? value) : base(value) { }
        public static implicit operator JobDetailType(int? value) { return new JobDetailType(value); }
        public static implicit operator JobDetailType(DBNull value) { return new JobDetailType(null); }
        private JobDetailType(long? value) : base(value) { }
        public static implicit operator JobDetailType(long? value) { return new JobDetailType(value); }
    }
    public class JobGradeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobGradeType(string value) : base(value) { }
        public static implicit operator JobGradeType(string value) { return new JobGradeType(value); }
        public static implicit operator JobGradeType(DBNull value) { return new JobGradeType(null); }
    }
    public class JobIdType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobIdType(string value) : base(value) { }
        public static implicit operator JobIdType(string value) { return new JobIdType(value); }
        public static implicit operator JobIdType(DBNull value) { return new JobIdType(null); }
    }
    public class JobLaborAllocType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobLaborAllocType(string value) : base(value) { }
        public static implicit operator JobLaborAllocType(string value) { return new JobLaborAllocType(value); }
        public static implicit operator JobLaborAllocType(DBNull value) { return new JobLaborAllocType(null); }
    }
    public class JobmatlProjmatlSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobmatlProjmatlSeqType(int? value) : base(value) { }
        public static implicit operator JobmatlProjmatlSeqType(int? value) { return new JobmatlProjmatlSeqType(value); }
        public static implicit operator JobmatlProjmatlSeqType(DBNull value) { return new JobmatlProjmatlSeqType(null); }
        private JobmatlProjmatlSeqType(long? value) : base(value) { }
        public static implicit operator JobmatlProjmatlSeqType(long? value) { return new JobmatlProjmatlSeqType(value); }
    }
    public class JobmatlRankType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobmatlRankType(short? value) : base(value) { }
        public static implicit operator JobmatlRankType(short? value) { return new JobmatlRankType(value); }
        public static implicit operator JobmatlRankType(DBNull value) { return new JobmatlRankType(null); }
        private JobmatlRankType(int? value) : base(value) { }
        public static implicit operator JobmatlRankType(int? value) { return new JobmatlRankType(value); }
    }
    public class JobmatlSequenceType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobmatlSequenceType(short? value) : base(value) { }
        public static implicit operator JobmatlSequenceType(short? value) { return new JobmatlSequenceType(value); }
        public static implicit operator JobmatlSequenceType(DBNull value) { return new JobmatlSequenceType(null); }
        private JobmatlSequenceType(int? value) : base(value) { }
        public static implicit operator JobmatlSequenceType(int? value) { return new JobmatlSequenceType(value); }
    }
    public class JobmatlUnitsType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobmatlUnitsType(string value) : base(value) { }
        public static implicit operator JobmatlUnitsType(string value) { return new JobmatlUnitsType(value); }
        public static implicit operator JobmatlUnitsType(DBNull value) { return new JobmatlUnitsType(null); }
    }
    public class JobPoProjReqTrnNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobPoProjReqTrnNumType(string value) : base(value) { }
        public static implicit operator JobPoProjReqTrnNumType(string value) { return new JobPoProjReqTrnNumType(value); }
        public static implicit operator JobPoProjReqTrnNumType(DBNull value) { return new JobPoProjReqTrnNumType(null); }
    }
    public class JobPoReqNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobPoReqNumType(string value) : base(value) { }
        public static implicit operator JobPoReqNumType(string value) { return new JobPoReqNumType(value); }
        public static implicit operator JobPoReqNumType(DBNull value) { return new JobPoReqNumType(null); }
    }
    public class JobPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobPrefixType(string value) : base(value) { }
        public static implicit operator JobPrefixType(string value) { return new JobPrefixType(value); }
        public static implicit operator JobPrefixType(DBNull value) { return new JobPrefixType(null); }
    }
    public class JobRefSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobRefSeqType(short? value) : base(value) { }
        public static implicit operator JobRefSeqType(short? value) { return new JobRefSeqType(value); }
        public static implicit operator JobRefSeqType(DBNull value) { return new JobRefSeqType(null); }
        private JobRefSeqType(int? value) : base(value) { }
        public static implicit operator JobRefSeqType(int? value) { return new JobRefSeqType(value); }
    }
    public class JobStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobStatusType(string value) : base(value) { }
        public static implicit operator JobStatusType(string value) { return new JobStatusType(value); }
        public static implicit operator JobStatusType(DBNull value) { return new JobStatusType(null); }
    }
    public class JobTitleType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobTitleType(string value) : base(value) { }
        public static implicit operator JobTitleType(string value) { return new JobTitleType(value); }
        public static implicit operator JobTitleType(DBNull value) { return new JobTitleType(null); }
    }
    public class JobtranClassType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobtranClassType(string value) : base(value) { }
        public static implicit operator JobtranClassType(string value) { return new JobtranClassType(value); }
        public static implicit operator JobtranClassType(DBNull value) { return new JobtranClassType(null); }
    }
    public class JobtranSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobtranSeqType(short? value) : base(value) { }
        public static implicit operator JobtranSeqType(short? value) { return new JobtranSeqType(value); }
        public static implicit operator JobtranSeqType(DBNull value) { return new JobtranSeqType(null); }
        private JobtranSeqType(int? value) : base(value) { }
        public static implicit operator JobtranSeqType(int? value) { return new JobtranSeqType(value); }
    }
    public class JobtranTransSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobtranTransSeqType(int? value) : base(value) { }
        public static implicit operator JobtranTransSeqType(int? value) { return new JobtranTransSeqType(value); }
        public static implicit operator JobtranTransSeqType(DBNull value) { return new JobtranTransSeqType(null); }
        private JobtranTransSeqType(long? value) : base(value) { }
        public static implicit operator JobtranTransSeqType(long? value) { return new JobtranTransSeqType(value); }
    }
    public class JobtranTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobtranTypeType(string value) : base(value) { }
        public static implicit operator JobtranTypeType(string value) { return new JobtranTypeType(value); }
        public static implicit operator JobtranTypeType(DBNull value) { return new JobtranTypeType(null); }
    }
    public class JobType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobType(string value) : base(value) { }
        public static implicit operator JobType(string value) { return new JobType(value); }
        public static implicit operator JobType(DBNull value) { return new JobType(null); }
    }
    public class JobTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JobTypeType(string value) : base(value) { }
        public static implicit operator JobTypeType(string value) { return new JobTypeType(value); }
        public static implicit operator JobTypeType(DBNull value) { return new JobTypeType(null); }
    }
    public class JoinTypeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JoinTypeType(string value) : base(value) { }
        public static implicit operator JoinTypeType(string value) { return new JoinTypeType(value); }
        public static implicit operator JoinTypeType(DBNull value) { return new JoinTypeType(null); }
    }
    public class JourControlPrefixType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JourControlPrefixType(string value) : base(value) { }
        public static implicit operator JourControlPrefixType(string value) { return new JourControlPrefixType(value); }
        public static implicit operator JourControlPrefixType(DBNull value) { return new JourControlPrefixType(null); }
    }
    public class JournalCompLevelType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JournalCompLevelType(string value) : base(value) { }
        public static implicit operator JournalCompLevelType(string value) { return new JournalCompLevelType(value); }
        public static implicit operator JournalCompLevelType(DBNull value) { return new JournalCompLevelType(null); }
    }
    public class JournalIdType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JournalIdType(string value) : base(value) { }
        public static implicit operator JournalIdType(string value) { return new JournalIdType(value); }
        public static implicit operator JournalIdType(DBNull value) { return new JournalIdType(null); }
    }
    public class JournalPostStatusType : StringType
    {
        public override int Length { get => 26; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JournalPostStatusType(string value) : base(value) { }
        public static implicit operator JournalPostStatusType(string value) { return new JournalPostStatusType(value); }
        public static implicit operator JournalPostStatusType(DBNull value) { return new JournalPostStatusType(null); }
    }
    public class JournalPostTypeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JournalPostTypeType(string value) : base(value) { }
        public static implicit operator JournalPostTypeType(string value) { return new JournalPostTypeType(value); }
        public static implicit operator JournalPostTypeType(DBNull value) { return new JournalPostTypeType(null); }
    }
    public class JournalSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JournalSeqType(int? value) : base(value) { }
        public static implicit operator JournalSeqType(int? value) { return new JournalSeqType(value); }
        public static implicit operator JournalSeqType(DBNull value) { return new JournalSeqType(null); }
        private JournalSeqType(long? value) : base(value) { }
        public static implicit operator JournalSeqType(long? value) { return new JournalSeqType(value); }
    }
    public class JournalTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JournalTypeType(string value) : base(value) { }
        public static implicit operator JournalTypeType(string value) { return new JournalTypeType(value); }
        public static implicit operator JournalTypeType(DBNull value) { return new JournalTypeType(null); }
    }
    public class JP_AccountHolderNameType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JP_AccountHolderNameType(string value) : base(value) { }
        public static implicit operator JP_AccountHolderNameType(string value) { return new JP_AccountHolderNameType(value); }
        public static implicit operator JP_AccountHolderNameType(DBNull value) { return new JP_AccountHolderNameType(null); }
    }
    public class JP_AccountOwnerNameType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JP_AccountOwnerNameType(string value) : base(value) { }
        public static implicit operator JP_AccountOwnerNameType(string value) { return new JP_AccountOwnerNameType(value); }
        public static implicit operator JP_AccountOwnerNameType(DBNull value) { return new JP_AccountOwnerNameType(null); }
    }
    public class JP_AccountReferenceType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JP_AccountReferenceType(string value) : base(value) { }
        public static implicit operator JP_AccountReferenceType(string value) { return new JP_AccountReferenceType(value); }
        public static implicit operator JP_AccountReferenceType(DBNull value) { return new JP_AccountReferenceType(null); }
    }
    public class JP_BankBranchNameType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JP_BankBranchNameType(string value) : base(value) { }
        public static implicit operator JP_BankBranchNameType(string value) { return new JP_BankBranchNameType(value); }
        public static implicit operator JP_BankBranchNameType(DBNull value) { return new JP_BankBranchNameType(null); }
    }
    public class JP_ConsumptionTaxHeaderLineMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JP_ConsumptionTaxHeaderLineMethodType(string value) : base(value) { }
        public static implicit operator JP_ConsumptionTaxHeaderLineMethodType(string value) { return new JP_ConsumptionTaxHeaderLineMethodType(value); }
        public static implicit operator JP_ConsumptionTaxHeaderLineMethodType(DBNull value) { return new JP_ConsumptionTaxHeaderLineMethodType(null); }
    }
    public class JP_ConsumptionTaxRoundMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JP_ConsumptionTaxRoundMethodType(string value) : base(value) { }
        public static implicit operator JP_ConsumptionTaxRoundMethodType(string value) { return new JP_ConsumptionTaxRoundMethodType(value); }
        public static implicit operator JP_ConsumptionTaxRoundMethodType(DBNull value) { return new JP_ConsumptionTaxRoundMethodType(null); }
    }
    public class JP_EFTBankFeeTermsType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JP_EFTBankFeeTermsType(byte? value) : base(value) { }
        public static implicit operator JP_EFTBankFeeTermsType(byte? value) { return new JP_EFTBankFeeTermsType(value); }
        public static implicit operator JP_EFTBankFeeTermsType(DBNull value) { return new JP_EFTBankFeeTermsType(null); }
        private JP_EFTBankFeeTermsType(int? value) : base(value) { }
        public static implicit operator JP_EFTBankFeeTermsType(int? value) { return new JP_EFTBankFeeTermsType(value); }
    }
    public class JP_EFTBankFeeTypeType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JP_EFTBankFeeTypeType(byte? value) : base(value) { }
        public static implicit operator JP_EFTBankFeeTypeType(byte? value) { return new JP_EFTBankFeeTypeType(value); }
        public static implicit operator JP_EFTBankFeeTypeType(DBNull value) { return new JP_EFTBankFeeTypeType(null); }
        private JP_EFTBankFeeTypeType(int? value) : base(value) { }
        public static implicit operator JP_EFTBankFeeTypeType(int? value) { return new JP_EFTBankFeeTypeType(value); }
    }
    public class JP_EFTFileStatusType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JP_EFTFileStatusType(short? value) : base(value) { }
        public static implicit operator JP_EFTFileStatusType(short? value) { return new JP_EFTFileStatusType(value); }
        public static implicit operator JP_EFTFileStatusType(DBNull value) { return new JP_EFTFileStatusType(null); }
        private JP_EFTFileStatusType(int? value) : base(value) { }
        public static implicit operator JP_EFTFileStatusType(int? value) { return new JP_EFTFileStatusType(value); }
    }
    public class JP_InvBatchIDType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 19; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JP_InvBatchIDType(decimal? value) : base(value) { }
        public static implicit operator JP_InvBatchIDType(decimal? value) { return new JP_InvBatchIDType(value); }
        public static implicit operator JP_InvBatchIDType(DBNull value) { return new JP_InvBatchIDType(null); }
    }
    public class JP_ZenginAcctNoType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 7; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JP_ZenginAcctNoType(decimal? value) : base(value) { }
        public static implicit operator JP_ZenginAcctNoType(decimal? value) { return new JP_ZenginAcctNoType(value); }
        public static implicit operator JP_ZenginAcctNoType(DBNull value) { return new JP_ZenginAcctNoType(null); }
    }
    public class JP_ZenginBankCodeType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 4; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JP_ZenginBankCodeType(decimal? value) : base(value) { }
        public static implicit operator JP_ZenginBankCodeType(decimal? value) { return new JP_ZenginBankCodeType(value); }
        public static implicit operator JP_ZenginBankCodeType(DBNull value) { return new JP_ZenginBankCodeType(null); }
    }
    public class JP_ZenginBranchCodeType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JP_ZenginBranchCodeType(decimal? value) : base(value) { }
        public static implicit operator JP_ZenginBranchCodeType(decimal? value) { return new JP_ZenginBranchCodeType(value); }
        public static implicit operator JP_ZenginBranchCodeType(DBNull value) { return new JP_ZenginBranchCodeType(null); }
    }
    public class JSONStringType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private JSONStringType(string value) : base(value) { }
        public static implicit operator JSONStringType(string value) { return new JSONStringType(value); }
        public static implicit operator JSONStringType(DBNull value) { return new JSONStringType(null); }
    }
    public class KeyLengthType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private KeyLengthType(byte? value) : base(value) { }
        public static implicit operator KeyLengthType(byte? value) { return new KeyLengthType(value); }
        public static implicit operator KeyLengthType(DBNull value) { return new KeyLengthType(null); }
        private KeyLengthType(int? value) : base(value) { }
        public static implicit operator KeyLengthType(int? value) { return new KeyLengthType(value); }
    }
    public class KeyListType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private KeyListType(string value) : base(value) { }
        public static implicit operator KeyListType(string value) { return new KeyListType(value); }
        public static implicit operator KeyListType(DBNull value) { return new KeyListType(null); }
    }
    public class KeySequenceType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private KeySequenceType(int? value) : base(value) { }
        public static implicit operator KeySequenceType(int? value) { return new KeySequenceType(value); }
        public static implicit operator KeySequenceType(DBNull value) { return new KeySequenceType(null); }
        private KeySequenceType(long? value) : base(value) { }
        public static implicit operator KeySequenceType(long? value) { return new KeySequenceType(value); }
    }
    public class KeyValueType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private KeyValueType(string value) : base(value) { }
        public static implicit operator KeyValueType(string value) { return new KeyValueType(value); }
        public static implicit operator KeyValueType(DBNull value) { return new KeyValueType(null); }
    }
    public class LabelTemplateNameType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LabelTemplateNameType(string value) : base(value) { }
        public static implicit operator LabelTemplateNameType(string value) { return new LabelTemplateNameType(value); }
        public static implicit operator LabelTemplateNameType(DBNull value) { return new LabelTemplateNameType(null); }
    }
    public class LabelType : StringType
    {
        public override int Length { get => 64; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LabelType(string value) : base(value) { }
        public static implicit operator LabelType(string value) { return new LabelType(value); }
        public static implicit operator LabelType(DBNull value) { return new LabelType(null); }
    }
    public class LangCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LangCodeType(string value) : base(value) { }
        public static implicit operator LangCodeType(string value) { return new LangCodeType(value); }
        public static implicit operator LangCodeType(DBNull value) { return new LangCodeType(null); }
    }
    public class LangLabelType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LangLabelType(string value) : base(value) { }
        public static implicit operator LangLabelType(string value) { return new LangLabelType(value); }
        public static implicit operator LangLabelType(DBNull value) { return new LangLabelType(null); }
    }
    public class LanguageIDIntegerType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LanguageIDIntegerType(string value) : base(value) { }
        public static implicit operator LanguageIDIntegerType(string value) { return new LanguageIDIntegerType(value); }
        public static implicit operator LanguageIDIntegerType(DBNull value) { return new LanguageIDIntegerType(null); }
    }
    public class LanguageIDType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LanguageIDType(string value) : base(value) { }
        public static implicit operator LanguageIDType(string value) { return new LanguageIDType(value); }
        public static implicit operator LanguageIDType(DBNull value) { return new LanguageIDType(null); }
    }
    public class LanguageSubdirType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LanguageSubdirType(string value) : base(value) { }
        public static implicit operator LanguageSubdirType(string value) { return new LanguageSubdirType(value); }
        public static implicit operator LanguageSubdirType(DBNull value) { return new LanguageSubdirType(null); }
    }
    public class LargeIntType : DecimalType
    {
        public override int Length { get => 17; }
        public override byte Precision { get => 38; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LargeIntType(decimal? value) : base(value) { }
        public static implicit operator LargeIntType(decimal? value) { return new LargeIntType(value); }
        public static implicit operator LargeIntType(DBNull value) { return new LargeIntType(null); }
    }
    public class LargeURLType : StringType
    {
        public override int Length { get => 1000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LargeURLType(string value) : base(value) { }
        public static implicit operator LargeURLType(string value) { return new LargeURLType(value); }
        public static implicit operator LargeURLType(DBNull value) { return new LargeURLType(null); }
    }
    public class LasttranDescType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LasttranDescType(string value) : base(value) { }
        public static implicit operator LasttranDescType(string value) { return new LasttranDescType(value); }
        public static implicit operator LasttranDescType(DBNull value) { return new LasttranDescType(null); }
    }
    public class LasttranKeyType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LasttranKeyType(int? value) : base(value) { }
        public static implicit operator LasttranKeyType(int? value) { return new LasttranKeyType(value); }
        public static implicit operator LasttranKeyType(DBNull value) { return new LasttranKeyType(null); }
        private LasttranKeyType(long? value) : base(value) { }
        public static implicit operator LasttranKeyType(long? value) { return new LasttranKeyType(value); }
    }
    public class LastTranType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LastTranType(decimal? value) : base(value) { }
        public static implicit operator LastTranType(decimal? value) { return new LastTranType(value); }
        public static implicit operator LastTranType(DBNull value) { return new LastTranType(null); }
    }
    public class LcAllocMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LcAllocMethodType(string value) : base(value) { }
        public static implicit operator LcAllocMethodType(string value) { return new LcAllocMethodType(value); }
        public static implicit operator LcAllocMethodType(DBNull value) { return new LcAllocMethodType(null); }
    }
    public class LcAllocPercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 8; }
        public override byte Scale { get => 5; }
        public override bool Nullable { get => true; }
        private LcAllocPercentType(decimal? value) : base(value) { }
        public static implicit operator LcAllocPercentType(decimal? value) { return new LcAllocPercentType(value); }
        public static implicit operator LcAllocPercentType(DBNull value) { return new LcAllocPercentType(null); }
    }
    public class LcAllocTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LcAllocTypeType(string value) : base(value) { }
        public static implicit operator LcAllocTypeType(string value) { return new LcAllocTypeType(value); }
        public static implicit operator LcAllocTypeType(DBNull value) { return new LcAllocTypeType(null); }
    }
    public class LcnNoType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LcnNoType(string value) : base(value) { }
        public static implicit operator LcnNoType(string value) { return new LcnNoType(value); }
        public static implicit operator LcnNoType(DBNull value) { return new LcnNoType(null); }
    }
    public class LcrConfirmationType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LcrConfirmationType(string value) : base(value) { }
        public static implicit operator LcrConfirmationType(string value) { return new LcrConfirmationType(value); }
        public static implicit operator LcrConfirmationType(DBNull value) { return new LcrConfirmationType(null); }
    }
    public class LcrNumType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LcrNumType(string value) : base(value) { }
        public static implicit operator LcrNumType(string value) { return new LcrNumType(value); }
        public static implicit operator LcrNumType(DBNull value) { return new LcrNumType(null); }
    }
    public class LcrStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LcrStatusType(string value) : base(value) { }
        public static implicit operator LcrStatusType(string value) { return new LcrStatusType(value); }
        public static implicit operator LcrStatusType(DBNull value) { return new LcrStatusType(null); }
    }
    public class LcTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LcTypeType(string value) : base(value) { }
        public static implicit operator LcTypeType(string value) { return new LcTypeType(value); }
        public static implicit operator LcTypeType(DBNull value) { return new LcTypeType(null); }
    }
    public class LeadIDType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LeadIDType(string value) : base(value) { }
        public static implicit operator LeadIDType(string value) { return new LeadIDType(value); }
        public static implicit operator LeadIDType(DBNull value) { return new LeadIDType(null); }
    }
    public class LeadQualityType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LeadQualityType(string value) : base(value) { }
        public static implicit operator LeadQualityType(string value) { return new LeadQualityType(value); }
        public static implicit operator LeadQualityType(DBNull value) { return new LeadQualityType(null); }
    }
    public class LeadStatusType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LeadStatusType(string value) : base(value) { }
        public static implicit operator LeadStatusType(string value) { return new LeadStatusType(value); }
        public static implicit operator LeadStatusType(DBNull value) { return new LeadStatusType(null); }
    }
    public class LeadTimeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LeadTimeType(short? value) : base(value) { }
        public static implicit operator LeadTimeType(short? value) { return new LeadTimeType(value); }
        public static implicit operator LeadTimeType(DBNull value) { return new LeadTimeType(null); }
        private LeadTimeType(int? value) : base(value) { }
        public static implicit operator LeadTimeType(int? value) { return new LeadTimeType(value); }
    }
    public class LedgerConsolidatedType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LedgerConsolidatedType(string value) : base(value) { }
        public static implicit operator LedgerConsolidatedType(string value) { return new LedgerConsolidatedType(value); }
        public static implicit operator LedgerConsolidatedType(DBNull value) { return new LedgerConsolidatedType(null); }
    }
    public class LedgerTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LedgerTypeType(string value) : base(value) { }
        public static implicit operator LedgerTypeType(string value) { return new LedgerTypeType(value); }
        public static implicit operator LedgerTypeType(DBNull value) { return new LedgerTypeType(null); }
    }
    public class LicenseCheckSumType : StringType
    {
        public override int Length { get => 2000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LicenseCheckSumType(string value) : base(value) { }
        public static implicit operator LicenseCheckSumType(string value) { return new LicenseCheckSumType(value); }
        public static implicit operator LicenseCheckSumType(DBNull value) { return new LicenseCheckSumType(null); }
    }
    public class LicenseDocumentType : StringType
    {
        //public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LicenseDocumentType(string value) : base(value) { }
        public static implicit operator LicenseDocumentType(string value) { return new LicenseDocumentType(value); }
        public static implicit operator LicenseDocumentType(DBNull value) { return new LicenseDocumentType(null); }
    }
    public class LicenseModuleDescType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LicenseModuleDescType(string value) : base(value) { }
        public static implicit operator LicenseModuleDescType(string value) { return new LicenseModuleDescType(value); }
        public static implicit operator LicenseModuleDescType(DBNull value) { return new LicenseModuleDescType(null); }
    }
    public class LicenseModuleNameType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LicenseModuleNameType(string value) : base(value) { }
        public static implicit operator LicenseModuleNameType(string value) { return new LicenseModuleNameType(value); }
        public static implicit operator LicenseModuleNameType(DBNull value) { return new LicenseModuleNameType(null); }
    }
    public class LicenseObjectNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LicenseObjectNameType(string value) : base(value) { }
        public static implicit operator LicenseObjectNameType(string value) { return new LicenseObjectNameType(value); }
        public static implicit operator LicenseObjectNameType(DBNull value) { return new LicenseObjectNameType(null); }
    }
    public class LicenseObjectTypeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LicenseObjectTypeType(short? value) : base(value) { }
        public static implicit operator LicenseObjectTypeType(short? value) { return new LicenseObjectTypeType(value); }
        public static implicit operator LicenseObjectTypeType(DBNull value) { return new LicenseObjectTypeType(null); }
        private LicenseObjectTypeType(int? value) : base(value) { }
        public static implicit operator LicenseObjectTypeType(int? value) { return new LicenseObjectTypeType(value); }
    }
    public class LicertType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LicertType(string value) : base(value) { }
        public static implicit operator LicertType(string value) { return new LicertType(value); }
        public static implicit operator LicertType(DBNull value) { return new LicertType(null); }
    }
    public class LineageType : StringType
    {
        public override int Length { get => 8000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LineageType(string value) : base(value) { }
        public static implicit operator LineageType(string value) { return new LineageType(value); }
        public static implicit operator LineageType(DBNull value) { return new LineageType(null); }
    }
    public class LineDiscType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private LineDiscType(decimal? value) : base(value) { }
        public static implicit operator LineDiscType(decimal? value) { return new LineDiscType(value); }
        public static implicit operator LineDiscType(DBNull value) { return new LineDiscType(null); }
    }
    public class LinesPerDocType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LinesPerDocType(short? value) : base(value) { }
        public static implicit operator LinesPerDocType(short? value) { return new LinesPerDocType(value); }
        public static implicit operator LinesPerDocType(DBNull value) { return new LinesPerDocType(null); }
        private LinesPerDocType(int? value) : base(value) { }
        public static implicit operator LinesPerDocType(int? value) { return new LinesPerDocType(value); }
    }
    public class LineWeightType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 4; }
        public override bool Nullable { get => true; }
        private LineWeightType(decimal? value) : base(value) { }
        public static implicit operator LineWeightType(decimal? value) { return new LineWeightType(value); }
        public static implicit operator LineWeightType(DBNull value) { return new LineWeightType(null); }
    }
    public class LinkByType : StringType
    {
        public override int Length { get => 1500; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LinkByType(string value) : base(value) { }
        public static implicit operator LinkByType(string value) { return new LinkByType(value); }
        public static implicit operator LinkByType(DBNull value) { return new LinkByType(null); }
    }
    public class LinkDatabaseType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LinkDatabaseType(string value) : base(value) { }
        public static implicit operator LinkDatabaseType(string value) { return new LinkDatabaseType(value); }
        public static implicit operator LinkDatabaseType(DBNull value) { return new LinkDatabaseType(null); }
    }
    public class ListActiveInactiveType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListActiveInactiveType(string value) : base(value) { }
        public static implicit operator ListActiveInactiveType(string value) { return new ListActiveInactiveType(value); }
        public static implicit operator ListActiveInactiveType(DBNull value) { return new ListActiveInactiveType(null); }
    }
    public class ListActStdType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListActStdType(string value) : base(value) { }
        public static implicit operator ListActStdType(string value) { return new ListActStdType(value); }
        public static implicit operator ListActStdType(DBNull value) { return new ListActStdType(null); }
    }
    public class ListAddCreateBothType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListAddCreateBothType(string value) : base(value) { }
        public static implicit operator ListAddCreateBothType(string value) { return new ListAddCreateBothType(value); }
        public static implicit operator ListAddCreateBothType(DBNull value) { return new ListAddCreateBothType(null); }
    }
    public class ListAddSubType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListAddSubType(byte? value) : base(value) { }
        public static implicit operator ListAddSubType(byte? value) { return new ListAddSubType(value); }
        public static implicit operator ListAddSubType(DBNull value) { return new ListAddSubType(null); }
        private ListAddSubType(int? value) : base(value) { }
        public static implicit operator ListAddSubType(int? value) { return new ListAddSubType(value); }
    }
    public class ListAlwaysPromptNeverType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListAlwaysPromptNeverType(string value) : base(value) { }
        public static implicit operator ListAlwaysPromptNeverType(string value) { return new ListAlwaysPromptNeverType(value); }
        public static implicit operator ListAlwaysPromptNeverType(DBNull value) { return new ListAlwaysPromptNeverType(null); }
    }
    public class ListAlwaysSometimesNeverType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListAlwaysSometimesNeverType(string value) : base(value) { }
        public static implicit operator ListAlwaysSometimesNeverType(string value) { return new ListAlwaysSometimesNeverType(value); }
        public static implicit operator ListAlwaysSometimesNeverType(DBNull value) { return new ListAlwaysSometimesNeverType(null); }
    }
    public class ListAmountPercentType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListAmountPercentType(string value) : base(value) { }
        public static implicit operator ListAmountPercentType(string value) { return new ListAmountPercentType(value); }
        public static implicit operator ListAmountPercentType(DBNull value) { return new ListAmountPercentType(null); }
    }
    public class ListAndOrType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListAndOrType(string value) : base(value) { }
        public static implicit operator ListAndOrType(string value) { return new ListAndOrType(value); }
        public static implicit operator ListAndOrType(DBNull value) { return new ListAndOrType(null); }
    }
    public class ListAppEmpType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListAppEmpType(string value) : base(value) { }
        public static implicit operator ListAppEmpType(string value) { return new ListAppEmpType(value); }
        public static implicit operator ListAppEmpType(DBNull value) { return new ListAppEmpType(null); }
    }
    public class ListAppendReplaceIgnoreType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListAppendReplaceIgnoreType(string value) : base(value) { }
        public static implicit operator ListAppendReplaceIgnoreType(string value) { return new ListAppendReplaceIgnoreType(value); }
        public static implicit operator ListAppendReplaceIgnoreType(DBNull value) { return new ListAppendReplaceIgnoreType(null); }
    }
    public class ListAppendReplaceType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListAppendReplaceType(string value) : base(value) { }
        public static implicit operator ListAppendReplaceType(string value) { return new ListAppendReplaceType(value); }
        public static implicit operator ListAppendReplaceType(DBNull value) { return new ListAppendReplaceType(null); }
    }
    public class ListAppOvwType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListAppOvwType(byte? value) : base(value) { }
        public static implicit operator ListAppOvwType(byte? value) { return new ListAppOvwType(value); }
        public static implicit operator ListAppOvwType(DBNull value) { return new ListAppOvwType(null); }
        private ListAppOvwType(int? value) : base(value) { }
        public static implicit operator ListAppOvwType(int? value) { return new ListAppOvwType(value); }
    }
    public class ListAutoManualNoneType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListAutoManualNoneType(string value) : base(value) { }
        public static implicit operator ListAutoManualNoneType(string value) { return new ListAutoManualNoneType(value); }
        public static implicit operator ListAutoManualNoneType(DBNull value) { return new ListAutoManualNoneType(null); }
    }
    public class ListBlankAsteriskType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListBlankAsteriskType(byte? value) : base(value) { }
        public static implicit operator ListBlankAsteriskType(byte? value) { return new ListBlankAsteriskType(value); }
        public static implicit operator ListBlankAsteriskType(DBNull value) { return new ListBlankAsteriskType(null); }
        private ListBlankAsteriskType(int? value) : base(value) { }
        public static implicit operator ListBlankAsteriskType(int? value) { return new ListBlankAsteriskType(value); }
    }
    public class ListBuySellType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListBuySellType(byte? value) : base(value) { }
        public static implicit operator ListBuySellType(byte? value) { return new ListBuySellType(value); }
        public static implicit operator ListBuySellType(DBNull value) { return new ListBuySellType(null); }
        private ListBuySellType(int? value) : base(value) { }
        public static implicit operator ListBuySellType(int? value) { return new ListBuySellType(value); }
    }
    public class ListCacheCapType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListCacheCapType(string value) : base(value) { }
        public static implicit operator ListCacheCapType(string value) { return new ListCacheCapType(value); }
        public static implicit operator ListCacheCapType(DBNull value) { return new ListCacheCapType(null); }
    }
    public class ListCharIntType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListCharIntType(byte? value) : base(value) { }
        public static implicit operator ListCharIntType(byte? value) { return new ListCharIntType(value); }
        public static implicit operator ListCharIntType(DBNull value) { return new ListCharIntType(null); }
        private ListCharIntType(int? value) : base(value) { }
        public static implicit operator ListCharIntType(int? value) { return new ListCharIntType(value); }
    }
    public class ListCustItemType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListCustItemType(string value) : base(value) { }
        public static implicit operator ListCustItemType(string value) { return new ListCustItemType(value); }
        public static implicit operator ListCustItemType(DBNull value) { return new ListCustItemType(null); }
    }
    public class ListCustVendNullType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListCustVendNullType(string value) : base(value) { }
        public static implicit operator ListCustVendNullType(string value) { return new ListCustVendNullType(value); }
        public static implicit operator ListCustVendNullType(DBNull value) { return new ListCustVendNullType(null); }
    }
    public class ListDailyWeeklyType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListDailyWeeklyType(string value) : base(value) { }
        public static implicit operator ListDailyWeeklyType(string value) { return new ListDailyWeeklyType(value); }
        public static implicit operator ListDailyWeeklyType(DBNull value) { return new ListDailyWeeklyType(null); }
    }
    public class ListDebitMemoAdjustmentType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListDebitMemoAdjustmentType(string value) : base(value) { }
        public static implicit operator ListDebitMemoAdjustmentType(string value) { return new ListDebitMemoAdjustmentType(value); }
        public static implicit operator ListDebitMemoAdjustmentType(DBNull value) { return new ListDebitMemoAdjustmentType(null); }
    }
    public class ListDefaultAmountPercentType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListDefaultAmountPercentType(string value) : base(value) { }
        public static implicit operator ListDefaultAmountPercentType(string value) { return new ListDefaultAmountPercentType(value); }
        public static implicit operator ListDefaultAmountPercentType(DBNull value) { return new ListDefaultAmountPercentType(null); }
    }
    public class ListDepIndType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListDepIndType(string value) : base(value) { }
        public static implicit operator ListDepIndType(string value) { return new ListDepIndType(value); }
        public static implicit operator ListDepIndType(DBNull value) { return new ListDepIndType(null); }
    }
    public class ListDirectIndirectNonExportType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListDirectIndirectNonExportType(string value) : base(value) { }
        public static implicit operator ListDirectIndirectNonExportType(string value) { return new ListDirectIndirectNonExportType(value); }
        public static implicit operator ListDirectIndirectNonExportType(DBNull value) { return new ListDirectIndirectNonExportType(null); }
    }
    public class ListEnableDisableType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListEnableDisableType(string value) : base(value) { }
        public static implicit operator ListEnableDisableType(string value) { return new ListEnableDisableType(value); }
        public static implicit operator ListEnableDisableType(DBNull value) { return new ListEnableDisableType(null); }
    }
    public class ListExistingCreateBothType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListExistingCreateBothType(string value) : base(value) { }
        public static implicit operator ListExistingCreateBothType(string value) { return new ListExistingCreateBothType(value); }
        public static implicit operator ListExistingCreateBothType(DBNull value) { return new ListExistingCreateBothType(null); }
    }
    public class ListHistoryType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListHistoryType(string value) : base(value) { }
        public static implicit operator ListHistoryType(string value) { return new ListHistoryType(value); }
        public static implicit operator ListHistoryType(DBNull value) { return new ListHistoryType(null); }
    }
    public class ListHoursPiecesType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListHoursPiecesType(string value) : base(value) { }
        public static implicit operator ListHoursPiecesType(string value) { return new ListHoursPiecesType(value); }
        public static implicit operator ListHoursPiecesType(DBNull value) { return new ListHoursPiecesType(null); }
    }
    public class ListHrsMinType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListHrsMinType(byte? value) : base(value) { }
        public static implicit operator ListHrsMinType(byte? value) { return new ListHrsMinType(value); }
        public static implicit operator ListHrsMinType(DBNull value) { return new ListHrsMinType(null); }
        private ListHrsMinType(int? value) : base(value) { }
        public static implicit operator ListHrsMinType(int? value) { return new ListHrsMinType(value); }
    }
    public class ListLeftRightType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListLeftRightType(byte? value) : base(value) { }
        public static implicit operator ListLeftRightType(byte? value) { return new ListLeftRightType(value); }
        public static implicit operator ListLeftRightType(DBNull value) { return new ListLeftRightType(null); }
        private ListLeftRightType(int? value) : base(value) { }
        public static implicit operator ListLeftRightType(int? value) { return new ListLeftRightType(value); }
    }
    public class ListLocalRemoteType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListLocalRemoteType(string value) : base(value) { }
        public static implicit operator ListLocalRemoteType(string value) { return new ListLocalRemoteType(value); }
        public static implicit operator ListLocalRemoteType(DBNull value) { return new ListLocalRemoteType(null); }
    }
    public class ListLocLotType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListLocLotType(string value) : base(value) { }
        public static implicit operator ListLocLotType(string value) { return new ListLocLotType(value); }
        public static implicit operator ListLocLotType(DBNull value) { return new ListLocLotType(null); }
    }
    public class ListLotSerialType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListLotSerialType(string value) : base(value) { }
        public static implicit operator ListLotSerialType(string value) { return new ListLotSerialType(value); }
        public static implicit operator ListLotSerialType(DBNull value) { return new ListLotSerialType(null); }
    }
    public class ListManAutoType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListManAutoType(string value) : base(value) { }
        public static implicit operator ListManAutoType(string value) { return new ListManAutoType(value); }
        public static implicit operator ListManAutoType(DBNull value) { return new ListManAutoType(null); }
    }
    public class ListOnOffType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListOnOffType(byte? value) : base(value) { }
        public static implicit operator ListOnOffType(byte? value) { return new ListOnOffType(value); }
        public static implicit operator ListOnOffType(DBNull value) { return new ListOnOffType(null); }
        private ListOnOffType(int? value) : base(value) { }
        public static implicit operator ListOnOffType(int? value) { return new ListOnOffType(value); }
    }
    public class ListOpersJobsType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListOpersJobsType(byte? value) : base(value) { }
        public static implicit operator ListOpersJobsType(byte? value) { return new ListOpersJobsType(value); }
        public static implicit operator ListOpersJobsType(DBNull value) { return new ListOpersJobsType(null); }
        private ListOpersJobsType(int? value) : base(value) { }
        public static implicit operator ListOpersJobsType(int? value) { return new ListOpersJobsType(value); }
    }
    public class ListOrderDueType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListOrderDueType(string value) : base(value) { }
        public static implicit operator ListOrderDueType(string value) { return new ListOrderDueType(value); }
        public static implicit operator ListOrderDueType(DBNull value) { return new ListOrderDueType(null); }
    }
    public class ListPendingApprovedRejectedType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListPendingApprovedRejectedType(string value) : base(value) { }
        public static implicit operator ListPendingApprovedRejectedType(string value) { return new ListPendingApprovedRejectedType(value); }
        public static implicit operator ListPendingApprovedRejectedType(DBNull value) { return new ListPendingApprovedRejectedType(null); }
    }
    public class ListPowersOf10Type : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListPowersOf10Type(int? value) : base(value) { }
        public static implicit operator ListPowersOf10Type(int? value) { return new ListPowersOf10Type(value); }
        public static implicit operator ListPowersOf10Type(DBNull value) { return new ListPowersOf10Type(null); }
        private ListPowersOf10Type(long? value) : base(value) { }
        public static implicit operator ListPowersOf10Type(long? value) { return new ListPowersOf10Type(value); }
    }
    public class ListPrepaidCollectType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListPrepaidCollectType(string value) : base(value) { }
        public static implicit operator ListPrepaidCollectType(string value) { return new ListPrepaidCollectType(value); }
        public static implicit operator ListPrepaidCollectType(DBNull value) { return new ListPrepaidCollectType(null); }
    }
    public class ListPullUpRuleType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListPullUpRuleType(short? value) : base(value) { }
        public static implicit operator ListPullUpRuleType(short? value) { return new ListPullUpRuleType(value); }
        public static implicit operator ListPullUpRuleType(DBNull value) { return new ListPullUpRuleType(null); }
        private ListPullUpRuleType(int? value) : base(value) { }
        public static implicit operator ListPullUpRuleType(int? value) { return new ListPullUpRuleType(value); }
    }
    public class ListQuantityPercentType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListQuantityPercentType(short? value) : base(value) { }
        public static implicit operator ListQuantityPercentType(short? value) { return new ListQuantityPercentType(value); }
        public static implicit operator ListQuantityPercentType(DBNull value) { return new ListQuantityPercentType(null); }
        private ListQuantityPercentType(int? value) : base(value) { }
        public static implicit operator ListQuantityPercentType(int? value) { return new ListQuantityPercentType(value); }
    }
    public class ListRegenerationNetChangeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListRegenerationNetChangeType(string value) : base(value) { }
        public static implicit operator ListRegenerationNetChangeType(string value) { return new ListRegenerationNetChangeType(value); }
        public static implicit operator ListRegenerationNetChangeType(DBNull value) { return new ListRegenerationNetChangeType(null); }
    }
    public class ListReportColumnType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListReportColumnType(byte? value) : base(value) { }
        public static implicit operator ListReportColumnType(byte? value) { return new ListReportColumnType(value); }
        public static implicit operator ListReportColumnType(DBNull value) { return new ListReportColumnType(null); }
        private ListReportColumnType(int? value) : base(value) { }
        public static implicit operator ListReportColumnType(int? value) { return new ListReportColumnType(value); }
    }
    public class ListSafetyStockRuleType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListSafetyStockRuleType(short? value) : base(value) { }
        public static implicit operator ListSafetyStockRuleType(short? value) { return new ListSafetyStockRuleType(value); }
        public static implicit operator ListSafetyStockRuleType(DBNull value) { return new ListSafetyStockRuleType(null); }
        private ListSafetyStockRuleType(int? value) : base(value) { }
        public static implicit operator ListSafetyStockRuleType(int? value) { return new ListSafetyStockRuleType(value); }
    }
    public class ListSingleAllType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListSingleAllType(string value) : base(value) { }
        public static implicit operator ListSingleAllType(string value) { return new ListSingleAllType(value); }
        public static implicit operator ListSingleAllType(DBNull value) { return new ListSingleAllType(null); }
    }
    public class ListSiteEntityType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListSiteEntityType(string value) : base(value) { }
        public static implicit operator ListSiteEntityType(string value) { return new ListSiteEntityType(value); }
        public static implicit operator ListSiteEntityType(DBNull value) { return new ListSiteEntityType(null); }
    }
    public class ListTimeFenceRuleType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListTimeFenceRuleType(short? value) : base(value) { }
        public static implicit operator ListTimeFenceRuleType(short? value) { return new ListTimeFenceRuleType(value); }
        public static implicit operator ListTimeFenceRuleType(DBNull value) { return new ListTimeFenceRuleType(null); }
        private ListTimeFenceRuleType(int? value) : base(value) { }
        public static implicit operator ListTimeFenceRuleType(int? value) { return new ListTimeFenceRuleType(value); }
    }
    public class ListUpDownType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListUpDownType(string value) : base(value) { }
        public static implicit operator ListUpDownType(string value) { return new ListUpDownType(value); }
        public static implicit operator ListUpDownType(DBNull value) { return new ListUpDownType(null); }
    }
    public class ListWcUserType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListWcUserType(string value) : base(value) { }
        public static implicit operator ListWcUserType(string value) { return new ListWcUserType(value); }
        public static implicit operator ListWcUserType(DBNull value) { return new ListWcUserType(null); }
    }
    public class ListXBlankType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListXBlankType(byte? value) : base(value) { }
        public static implicit operator ListXBlankType(byte? value) { return new ListXBlankType(value); }
        public static implicit operator ListXBlankType(DBNull value) { return new ListXBlankType(null); }
        private ListXBlankType(int? value) : base(value) { }
        public static implicit operator ListXBlankType(int? value) { return new ListXBlankType(value); }
    }
    public class ListYearPeriodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListYearPeriodType(string value) : base(value) { }
        public static implicit operator ListYearPeriodType(string value) { return new ListYearPeriodType(value); }
        public static implicit operator ListYearPeriodType(DBNull value) { return new ListYearPeriodType(null); }
    }
    public class ListYesNoType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ListYesNoType(byte? value) : base(value) { }
        public static implicit operator ListYesNoType(byte? value) { return new ListYesNoType(value); }
        public static implicit operator ListYesNoType(DBNull value) { return new ListYesNoType(null); }
        private ListYesNoType(int? value) : base(value) { }
        public static implicit operator ListYesNoType(int? value) { return new ListYesNoType(value); }
    }
    public class LoadCollectionTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LoadCollectionTypeType(string value) : base(value) { }
        public static implicit operator LoadCollectionTypeType(string value) { return new LoadCollectionTypeType(value); }
        public static implicit operator LoadCollectionTypeType(DBNull value) { return new LoadCollectionTypeType(null); }
    }
    public class LoadHoursType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private LoadHoursType(decimal? value) : base(value) { }
        public static implicit operator LoadHoursType(decimal? value) { return new LoadHoursType(value); }
        public static implicit operator LoadHoursType(DBNull value) { return new LoadHoursType(null); }
    }
    public class LoadOffsetHoursType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private LoadOffsetHoursType(decimal? value) : base(value) { }
        public static implicit operator LoadOffsetHoursType(decimal? value) { return new LoadOffsetHoursType(value); }
        public static implicit operator LoadOffsetHoursType(DBNull value) { return new LoadOffsetHoursType(null); }
    }
    public class LoadTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LoadTypeType(string value) : base(value) { }
        public static implicit operator LoadTypeType(string value) { return new LoadTypeType(value); }
        public static implicit operator LoadTypeType(DBNull value) { return new LoadTypeType(null); }
    }
    public class LockoutDurationType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LockoutDurationType(int? value) : base(value) { }
        public static implicit operator LockoutDurationType(int? value) { return new LockoutDurationType(value); }
        public static implicit operator LockoutDurationType(DBNull value) { return new LockoutDurationType(null); }
        private LockoutDurationType(long? value) : base(value) { }
        public static implicit operator LockoutDurationType(long? value) { return new LockoutDurationType(value); }
    }
    public class LocType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LocType(string value) : base(value) { }
        public static implicit operator LocType(string value) { return new LocType(value); }
        public static implicit operator LocType(DBNull value) { return new LocType(null); }
    }
    public class LocTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LocTypeType(string value) : base(value) { }
        public static implicit operator LocTypeType(string value) { return new LocTypeType(value); }
        public static implicit operator LocTypeType(DBNull value) { return new LocTypeType(null); }
    }
    public class LogMessageSourceType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LogMessageSourceType(string value) : base(value) { }
        public static implicit operator LogMessageSourceType(string value) { return new LogMessageSourceType(value); }
        public static implicit operator LogMessageSourceType(DBNull value) { return new LogMessageSourceType(null); }
    }
    public class LogMessageType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LogMessageType(string value) : base(value) { }
        public static implicit operator LogMessageType(string value) { return new LogMessageType(value); }
        public static implicit operator LogMessageType(DBNull value) { return new LogMessageType(null); }
    }
    public class LogMessageTypeType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LogMessageTypeType(string value) : base(value) { }
        public static implicit operator LogMessageTypeType(string value) { return new LogMessageTypeType(value); }
        public static implicit operator LogMessageTypeType(DBNull value) { return new LogMessageTypeType(null); }
    }
    public class LongAddress : StringType
    {
        public override int Length { get => 8000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LongAddress(string value) : base(value) { }
        public static implicit operator LongAddress(string value) { return new LongAddress(value); }
        public static implicit operator LongAddress(DBNull value) { return new LongAddress(null); }
    }
    public class LongDescType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LongDescType(string value) : base(value) { }
        public static implicit operator LongDescType(string value) { return new LongDescType(value); }
        public static implicit operator LongDescType(DBNull value) { return new LongDescType(null); }
    }
    public class LongerDescType : StringType
    {
        public override int Length { get => 4000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LongerDescType(string value) : base(value) { }
        public static implicit operator LongerDescType(string value) { return new LongerDescType(value); }
        public static implicit operator LongerDescType(DBNull value) { return new LongerDescType(null); }
    }
    public class LongList : StringType
    {
        public override int Length { get => 8000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LongList(string value) : base(value) { }
        public static implicit operator LongList(string value) { return new LongList(value); }
        public static implicit operator LongList(DBNull value) { return new LongList(null); }
    }
    public class LongListType : StringType
    {
        public override int Length { get => 8000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LongListType(string value) : base(value) { }
        public static implicit operator LongListType(string value) { return new LongListType(value); }
        public static implicit operator LongListType(DBNull value) { return new LongListType(null); }
    }
    public class LongNameType : StringType
    {
        public override int Length { get => 240; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LongNameType(string value) : base(value) { }
        public static implicit operator LongNameType(string value) { return new LongNameType(value); }
        public static implicit operator LongNameType(DBNull value) { return new LongNameType(null); }
    }
    public class LongRowPointerType : StringType
    {
        public override int Length { get => 900; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LongRowPointerType(string value) : base(value) { }
        public static implicit operator LongRowPointerType(string value) { return new LongRowPointerType(value); }
        public static implicit operator LongRowPointerType(DBNull value) { return new LongRowPointerType(null); }
    }
    public class LongStringType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LongStringType(string value) : base(value) { }
        public static implicit operator LongStringType(string value) { return new LongStringType(value); }
        public static implicit operator LongStringType(DBNull value) { return new LongStringType(null); }
    }
    public class LotLengthType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LotLengthType(byte? value) : base(value) { }
        public static implicit operator LotLengthType(byte? value) { return new LotLengthType(value); }
        public static implicit operator LotLengthType(DBNull value) { return new LotLengthType(null); }
        private LotLengthType(int? value) : base(value) { }
        public static implicit operator LotLengthType(int? value) { return new LotLengthType(value); }
    }
    public class LotPrefixType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LotPrefixType(string value) : base(value) { }
        public static implicit operator LotPrefixType(string value) { return new LotPrefixType(value); }
        public static implicit operator LotPrefixType(DBNull value) { return new LotPrefixType(null); }
    }
    public class LotSizeType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private LotSizeType(decimal? value) : base(value) { }
        public static implicit operator LotSizeType(decimal? value) { return new LotSizeType(value); }
        public static implicit operator LotSizeType(DBNull value) { return new LotSizeType(null); }
    }
    public class LotType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LotType(string value) : base(value) { }
        public static implicit operator LotType(string value) { return new LotType(value); }
        public static implicit operator LotType(DBNull value) { return new LotType(null); }
    }
    public class LowLevelType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private LowLevelType(byte? value) : base(value) { }
        public static implicit operator LowLevelType(byte? value) { return new LowLevelType(value); }
        public static implicit operator LowLevelType(DBNull value) { return new LowLevelType(null); }
        private LowLevelType(int? value) : base(value) { }
        public static implicit operator LowLevelType(int? value) { return new LowLevelType(value); }
    }
    public class MachineDownType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private MachineDownType(decimal? value) : base(value) { }
        public static implicit operator MachineDownType(decimal? value) { return new MachineDownType(value); }
        public static implicit operator MachineDownType(DBNull value) { return new MachineDownType(null); }
    }
    public class MachineHourType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private MachineHourType(decimal? value) : base(value) { }
        public static implicit operator MachineHourType(decimal? value) { return new MachineHourType(value); }
        public static implicit operator MachineHourType(DBNull value) { return new MachineHourType(null); }
    }
    public class MachNumType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MachNumType(short? value) : base(value) { }
        public static implicit operator MachNumType(short? value) { return new MachNumType(value); }
        public static implicit operator MachNumType(DBNull value) { return new MachNumType(null); }
        private MachNumType(int? value) : base(value) { }
        public static implicit operator MachNumType(int? value) { return new MachNumType(value); }
    }
    public class MachType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MachType(int? value) : base(value) { }
        public static implicit operator MachType(int? value) { return new MachType(value); }
        public static implicit operator MachType(DBNull value) { return new MachType(null); }
        private MachType(long? value) : base(value) { }
        public static implicit operator MachType(long? value) { return new MachType(value); }
    }
    public class MajorType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MajorType(string value) : base(value) { }
        public static implicit operator MajorType(string value) { return new MajorType(value); }
        public static implicit operator MajorType(DBNull value) { return new MajorType(null); }
    }
    public class ManufacturerIdType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ManufacturerIdType(string value) : base(value) { }
        public static implicit operator ManufacturerIdType(string value) { return new ManufacturerIdType(value); }
        public static implicit operator ManufacturerIdType(DBNull value) { return new ManufacturerIdType(null); }
    }
    public class ManufacturerItemRankType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ManufacturerItemRankType(int? value) : base(value) { }
        public static implicit operator ManufacturerItemRankType(int? value) { return new ManufacturerItemRankType(value); }
        public static implicit operator ManufacturerItemRankType(DBNull value) { return new ManufacturerItemRankType(null); }
        private ManufacturerItemRankType(long? value) : base(value) { }
        public static implicit operator ManufacturerItemRankType(long? value) { return new ManufacturerItemRankType(value); }
    }
    public class ManufacturerItemType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ManufacturerItemType(string value) : base(value) { }
        public static implicit operator ManufacturerItemType(string value) { return new ManufacturerItemType(value); }
        public static implicit operator ManufacturerItemType(DBNull value) { return new ManufacturerItemType(null); }
    }
    public class MapAPIKeyType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MapAPIKeyType(string value) : base(value) { }
        public static implicit operator MapAPIKeyType(string value) { return new MapAPIKeyType(value); }
        public static implicit operator MapAPIKeyType(DBNull value) { return new MapAPIKeyType(null); }
    }
    public class MapDistanceUnitType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MapDistanceUnitType(string value) : base(value) { }
        public static implicit operator MapDistanceUnitType(string value) { return new MapDistanceUnitType(value); }
        public static implicit operator MapDistanceUnitType(DBNull value) { return new MapDistanceUnitType(null); }
    }
    public class MapProviderType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MapProviderType(string value) : base(value) { }
        public static implicit operator MapProviderType(string value) { return new MapProviderType(value); }
        public static implicit operator MapProviderType(DBNull value) { return new MapProviderType(null); }
    }
    public class MaritalStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MaritalStatusType(string value) : base(value) { }
        public static implicit operator MaritalStatusType(string value) { return new MaritalStatusType(value); }
        public static implicit operator MaritalStatusType(DBNull value) { return new MaritalStatusType(null); }
    }
    public class MarkupAttributeNameType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MarkupAttributeNameType(string value) : base(value) { }
        public static implicit operator MarkupAttributeNameType(string value) { return new MarkupAttributeNameType(value); }
        public static implicit operator MarkupAttributeNameType(DBNull value) { return new MarkupAttributeNameType(null); }
    }
    public class MarkupDocumentDocumentationClassType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MarkupDocumentDocumentationClassType(string value) : base(value) { }
        public static implicit operator MarkupDocumentDocumentationClassType(string value) { return new MarkupDocumentDocumentationClassType(value); }
        public static implicit operator MarkupDocumentDocumentationClassType(DBNull value) { return new MarkupDocumentDocumentationClassType(null); }
    }
    public class MarkupDocumentDocumentationType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MarkupDocumentDocumentationType(string value) : base(value) { }
        public static implicit operator MarkupDocumentDocumentationType(string value) { return new MarkupDocumentDocumentationType(value); }
        public static implicit operator MarkupDocumentDocumentationType(DBNull value) { return new MarkupDocumentDocumentationType(null); }
    }
    public class MarkupDocumentNameType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MarkupDocumentNameType(string value) : base(value) { }
        public static implicit operator MarkupDocumentNameType(string value) { return new MarkupDocumentNameType(value); }
        public static implicit operator MarkupDocumentNameType(DBNull value) { return new MarkupDocumentNameType(null); }
    }
    public class MarkupElementSequenceType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MarkupElementSequenceType(int? value) : base(value) { }
        public static implicit operator MarkupElementSequenceType(int? value) { return new MarkupElementSequenceType(value); }
        public static implicit operator MarkupElementSequenceType(DBNull value) { return new MarkupElementSequenceType(null); }
        private MarkupElementSequenceType(long? value) : base(value) { }
        public static implicit operator MarkupElementSequenceType(long? value) { return new MarkupElementSequenceType(value); }
    }
    public class MarkupElementTagNameType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MarkupElementTagNameType(string value) : base(value) { }
        public static implicit operator MarkupElementTagNameType(string value) { return new MarkupElementTagNameType(value); }
        public static implicit operator MarkupElementTagNameType(DBNull value) { return new MarkupElementTagNameType(null); }
    }
    public class MarkupElementValueType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MarkupElementValueType(string value) : base(value) { }
        public static implicit operator MarkupElementValueType(string value) { return new MarkupElementValueType(value); }
        public static implicit operator MarkupElementValueType(DBNull value) { return new MarkupElementValueType(null); }
    }
    public class MarkupElementValueTypeType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MarkupElementValueTypeType(string value) : base(value) { }
        public static implicit operator MarkupElementValueTypeType(string value) { return new MarkupElementValueTypeType(value); }
        public static implicit operator MarkupElementValueTypeType(DBNull value) { return new MarkupElementValueTypeType(null); }
    }
    public class MarkupType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 8; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private MarkupType(decimal? value) : base(value) { }
        public static implicit operator MarkupType(decimal? value) { return new MarkupType(value); }
        public static implicit operator MarkupType(DBNull value) { return new MarkupType(null); }
    }
    public class MatlTransNumType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MatlTransNumType(decimal? value) : base(value) { }
        public static implicit operator MatlTransNumType(decimal? value) { return new MatlTransNumType(value); }
        public static implicit operator MatlTransNumType(DBNull value) { return new MatlTransNumType(null); }
    }
    public class MatlTransTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MatlTransTypeType(string value) : base(value) { }
        public static implicit operator MatlTransTypeType(string value) { return new MatlTransTypeType(value); }
        public static implicit operator MatlTransTypeType(DBNull value) { return new MatlTransTypeType(null); }
    }
    public class MatlTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MatlTypeType(string value) : base(value) { }
        public static implicit operator MatlTypeType(string value) { return new MatlTypeType(value); }
        public static implicit operator MatlTypeType(DBNull value) { return new MatlTypeType(null); }
    }
    public class MaxBatchSizeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private MaxBatchSizeType(int? value) : base(value) { }
        public static implicit operator MaxBatchSizeType(int? value) { return new MaxBatchSizeType(value); }
        public static implicit operator MaxBatchSizeType(DBNull value) { return new MaxBatchSizeType(null); }
        private MaxBatchSizeType(long? value) : base(value) { }
        public static implicit operator MaxBatchSizeType(long? value) { return new MaxBatchSizeType(value); }
    }
    public class MaxConcurrentBGTasksType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MaxConcurrentBGTasksType(int? value) : base(value) { }
        public static implicit operator MaxConcurrentBGTasksType(int? value) { return new MaxConcurrentBGTasksType(value); }
        public static implicit operator MaxConcurrentBGTasksType(DBNull value) { return new MaxConcurrentBGTasksType(null); }
        private MaxConcurrentBGTasksType(long? value) : base(value) { }
        public static implicit operator MaxConcurrentBGTasksType(long? value) { return new MaxConcurrentBGTasksType(value); }
    }
    public class MaxDescriptionType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MaxDescriptionType(string value) : base(value) { }
        public static implicit operator MaxDescriptionType(string value) { return new MaxDescriptionType(value); }
        public static implicit operator MaxDescriptionType(DBNull value) { return new MaxDescriptionType(null); }
    }
    public class MaxRecordCapType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MaxRecordCapType(string value) : base(value) { }
        public static implicit operator MaxRecordCapType(string value) { return new MaxRecordCapType(value); }
        public static implicit operator MaxRecordCapType(DBNull value) { return new MaxRecordCapType(null); }
    }
    public class MdayHoursType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MdayHoursType(byte? value) : base(value) { }
        public static implicit operator MdayHoursType(byte? value) { return new MdayHoursType(value); }
        public static implicit operator MdayHoursType(DBNull value) { return new MdayHoursType(null); }
        private MdayHoursType(int? value) : base(value) { }
        public static implicit operator MdayHoursType(int? value) { return new MdayHoursType(value); }
    }
    public class MdayNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MdayNumType(int? value) : base(value) { }
        public static implicit operator MdayNumType(int? value) { return new MdayNumType(value); }
        public static implicit operator MdayNumType(DBNull value) { return new MdayNumType(null); }
        private MdayNumType(long? value) : base(value) { }
        public static implicit operator MdayNumType(long? value) { return new MdayNumType(value); }
    }
    public class MdaysType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MdaysType(int? value) : base(value) { }
        public static implicit operator MdaysType(int? value) { return new MdaysType(value); }
        public static implicit operator MdaysType(DBNull value) { return new MdaysType(null); }
        private MdaysType(long? value) : base(value) { }
        public static implicit operator MdaysType(long? value) { return new MdaysType(value); }
    }
    public class MediumDescType : StringType
    {
        public override int Length { get => 144; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MediumDescType(string value) : base(value) { }
        public static implicit operator MediumDescType(string value) { return new MediumDescType(value); }
        public static implicit operator MediumDescType(DBNull value) { return new MediumDescType(null); }
    }
    public class MemoNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MemoNumType(int? value) : base(value) { }
        public static implicit operator MemoNumType(int? value) { return new MemoNumType(value); }
        public static implicit operator MemoNumType(DBNull value) { return new MemoNumType(null); }
        private MemoNumType(long? value) : base(value) { }
        public static implicit operator MemoNumType(long? value) { return new MemoNumType(value); }
    }
    public class MenuCategoryType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MenuCategoryType(string value) : base(value) { }
        public static implicit operator MenuCategoryType(string value) { return new MenuCategoryType(value); }
        public static implicit operator MenuCategoryType(DBNull value) { return new MenuCategoryType(null); }
    }
    public class MenuItemIDType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MenuItemIDType(int? value) : base(value) { }
        public static implicit operator MenuItemIDType(int? value) { return new MenuItemIDType(value); }
        public static implicit operator MenuItemIDType(DBNull value) { return new MenuItemIDType(null); }
        private MenuItemIDType(long? value) : base(value) { }
        public static implicit operator MenuItemIDType(long? value) { return new MenuItemIDType(value); }
    }
    public class MenuItemRankType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MenuItemRankType(short? value) : base(value) { }
        public static implicit operator MenuItemRankType(short? value) { return new MenuItemRankType(value); }
        public static implicit operator MenuItemRankType(DBNull value) { return new MenuItemRankType(null); }
        private MenuItemRankType(int? value) : base(value) { }
        public static implicit operator MenuItemRankType(int? value) { return new MenuItemRankType(value); }
    }
    public class MessageBusIdType : StringType
    {
        public override int Length { get => 512; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MessageBusIdType(string value) : base(value) { }
        public static implicit operator MessageBusIdType(string value) { return new MessageBusIdType(value); }
        public static implicit operator MessageBusIdType(DBNull value) { return new MessageBusIdType(null); }
    }
    public class MessageCategoryType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MessageCategoryType(string value) : base(value) { }
        public static implicit operator MessageCategoryType(string value) { return new MessageCategoryType(value); }
        public static implicit operator MessageCategoryType(DBNull value) { return new MessageCategoryType(null); }
    }
    public class MessageLanguageType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MessageLanguageType(string value) : base(value) { }
        public static implicit operator MessageLanguageType(string value) { return new MessageLanguageType(value); }
        public static implicit operator MessageLanguageType(DBNull value) { return new MessageLanguageType(null); }
    }
    public class MessageNoPrefixType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MessageNoPrefixType(string value) : base(value) { }
        public static implicit operator MessageNoPrefixType(string value) { return new MessageNoPrefixType(value); }
        public static implicit operator MessageNoPrefixType(DBNull value) { return new MessageNoPrefixType(null); }
    }
    public class MessageNoType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MessageNoType(string value) : base(value) { }
        public static implicit operator MessageNoType(string value) { return new MessageNoType(value); }
        public static implicit operator MessageNoType(DBNull value) { return new MessageNoType(null); }
    }
    public class MessageRecipientListType : StringType
    {
        public override int Length { get => 1024; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MessageRecipientListType(string value) : base(value) { }
        public static implicit operator MessageRecipientListType(string value) { return new MessageRecipientListType(value); }
        public static implicit operator MessageRecipientListType(DBNull value) { return new MessageRecipientListType(null); }
    }
    public class MessageResponseChoicesType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MessageResponseChoicesType(string value) : base(value) { }
        public static implicit operator MessageResponseChoicesType(string value) { return new MessageResponseChoicesType(value); }
        public static implicit operator MessageResponseChoicesType(DBNull value) { return new MessageResponseChoicesType(null); }
    }
    public class MessageResponseChoiceType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MessageResponseChoiceType(string value) : base(value) { }
        public static implicit operator MessageResponseChoiceType(string value) { return new MessageResponseChoiceType(value); }
        public static implicit operator MessageResponseChoiceType(DBNull value) { return new MessageResponseChoiceType(null); }
    }
    public class MessageSubjectType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MessageSubjectType(string value) : base(value) { }
        public static implicit operator MessageSubjectType(string value) { return new MessageSubjectType(value); }
        public static implicit operator MessageSubjectType(DBNull value) { return new MessageSubjectType(null); }
    }
    public class MessageType : StringType
    {
        public override int Length { get => 800; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MessageType(string value) : base(value) { }
        public static implicit operator MessageType(string value) { return new MessageType(value); }
        public static implicit operator MessageType(DBNull value) { return new MessageType(null); }
    }
    public class MethodCallSpecType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MethodCallSpecType(string value) : base(value) { }
        public static implicit operator MethodCallSpecType(string value) { return new MethodCallSpecType(value); }
        public static implicit operator MethodCallSpecType(DBNull value) { return new MethodCallSpecType(null); }
    }
    public class MethodNameType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MethodNameType(string value) : base(value) { }
        public static implicit operator MethodNameType(string value) { return new MethodNameType(value); }
        public static implicit operator MethodNameType(DBNull value) { return new MethodNameType(null); }
    }
    public class MfClassType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MfClassType(string value) : base(value) { }
        public static implicit operator MfClassType(string value) { return new MfClassType(value); }
        public static implicit operator MfClassType(DBNull value) { return new MfClassType(null); }
    }
    public class MfSpecType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MfSpecType(string value) : base(value) { }
        public static implicit operator MfSpecType(string value) { return new MfSpecType(value); }
        public static implicit operator MfSpecType(DBNull value) { return new MfSpecType(null); }
    }
    public class MfSpecVerType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MfSpecVerType(string value) : base(value) { }
        public static implicit operator MfSpecVerType(string value) { return new MfSpecVerType(value); }
        public static implicit operator MfSpecVerType(DBNull value) { return new MfSpecVerType(null); }
    }
    public class MfSubClassType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MfSubClassType(string value) : base(value) { }
        public static implicit operator MfSubClassType(string value) { return new MfSubClassType(value); }
        public static implicit operator MfSubClassType(DBNull value) { return new MfSubClassType(null); }
    }
    public class MGCurrentDateTimeType : DateTimeType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 23; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => false; }
        private MGCurrentDateTimeType(DateTime? value) : base(value) { }
        public static implicit operator MGCurrentDateTimeType(DateTime? value) { return new MGCurrentDateTimeType(value); }
        public static implicit operator MGCurrentDateTimeType(DBNull value) { return new MGCurrentDateTimeType(null); }
    }
    public class MGGUIDRowPointerType : GuidType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private MGGUIDRowPointerType(Guid? value) : base(value) { }
        public static implicit operator MGGUIDRowPointerType(Guid? value) { return new MGGUIDRowPointerType(value); }
        public static implicit operator MGGUIDRowPointerType(DBNull value) { return new MGGUIDRowPointerType((Guid?)null); }
        private MGGUIDRowPointerType(string value) : base(value) { }
        public static implicit operator MGGUIDRowPointerType(string value) { return new MGGUIDRowPointerType(value); }
    }
    public class MGNoteExistsType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private MGNoteExistsType(byte? value) : base(value) { }
        public static implicit operator MGNoteExistsType(byte? value) { return new MGNoteExistsType(value); }
        public static implicit operator MGNoteExistsType(DBNull value) { return new MGNoteExistsType(null); }
        private MGNoteExistsType(int? value) : base(value) { }
        public static implicit operator MGNoteExistsType(int? value) { return new MGNoteExistsType(value); }
    }
    public class MGUserNameType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private MGUserNameType(string value) : base(value) { }
        public static implicit operator MGUserNameType(string value) { return new MGUserNameType(value); }
        public static implicit operator MGUserNameType(DBNull value) { return new MGUserNameType(null); }
    }
    public class MileageRateType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 4; }
        public override bool Nullable { get => true; }
        private MileageRateType(decimal? value) : base(value) { }
        public static implicit operator MileageRateType(decimal? value) { return new MileageRateType(value); }
        public static implicit operator MileageRateType(DBNull value) { return new MileageRateType(null); }
    }
    public class MilitaryType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MilitaryType(string value) : base(value) { }
        public static implicit operator MilitaryType(string value) { return new MilitaryType(value); }
        public static implicit operator MilitaryType(DBNull value) { return new MilitaryType(null); }
    }
    public class Min1099Type : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private Min1099Type(decimal? value) : base(value) { }
        public static implicit operator Min1099Type(decimal? value) { return new Min1099Type(value); }
        public static implicit operator Min1099Type(DBNull value) { return new Min1099Type(null); }
    }
    public class MinorityCertificationNumberType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MinorityCertificationNumberType(string value) : base(value) { }
        public static implicit operator MinorityCertificationNumberType(string value) { return new MinorityCertificationNumberType(value); }
        public static implicit operator MinorityCertificationNumberType(DBNull value) { return new MinorityCertificationNumberType(null); }
    }
    public class MinorityTypeDescriptionType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MinorityTypeDescriptionType(string value) : base(value) { }
        public static implicit operator MinorityTypeDescriptionType(string value) { return new MinorityTypeDescriptionType(value); }
        public static implicit operator MinorityTypeDescriptionType(DBNull value) { return new MinorityTypeDescriptionType(null); }
    }
    public class MinorityTypeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MinorityTypeType(string value) : base(value) { }
        public static implicit operator MinorityTypeType(string value) { return new MinorityTypeType(value); }
        public static implicit operator MinorityTypeType(DBNull value) { return new MinorityTypeType(null); }
    }
    public class MinutesGranularityType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MinutesGranularityType(short? value) : base(value) { }
        public static implicit operator MinutesGranularityType(short? value) { return new MinutesGranularityType(value); }
        public static implicit operator MinutesGranularityType(DBNull value) { return new MinutesGranularityType(null); }
        private MinutesGranularityType(int? value) : base(value) { }
        public static implicit operator MinutesGranularityType(int? value) { return new MinutesGranularityType(value); }
    }
    public class MinutesOffType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MinutesOffType(short? value) : base(value) { }
        public static implicit operator MinutesOffType(short? value) { return new MinutesOffType(value); }
        public static implicit operator MinutesOffType(DBNull value) { return new MinutesOffType(null); }
        private MinutesOffType(int? value) : base(value) { }
        public static implicit operator MinutesOffType(int? value) { return new MinutesOffType(value); }
    }
    public class MiscReportTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MiscReportTypeType(string value) : base(value) { }
        public static implicit operator MiscReportTypeType(string value) { return new MiscReportTypeType(value); }
        public static implicit operator MiscReportTypeType(DBNull value) { return new MiscReportTypeType(null); }
    }
    public class MiscTitleType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MiscTitleType(string value) : base(value) { }
        public static implicit operator MiscTitleType(string value) { return new MiscTitleType(value); }
        public static implicit operator MiscTitleType(DBNull value) { return new MiscTitleType(null); }
    }
    public class MMaintKeyType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MMaintKeyType(int? value) : base(value) { }
        public static implicit operator MMaintKeyType(int? value) { return new MMaintKeyType(value); }
        public static implicit operator MMaintKeyType(DBNull value) { return new MMaintKeyType(null); }
        private MMaintKeyType(long? value) : base(value) { }
        public static implicit operator MMaintKeyType(long? value) { return new MMaintKeyType(value); }
    }
    public class MMtest1Type : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MMtest1Type(short? value) : base(value) { }
        public static implicit operator MMtest1Type(short? value) { return new MMtest1Type(value); }
        public static implicit operator MMtest1Type(DBNull value) { return new MMtest1Type(null); }
        private MMtest1Type(int? value) : base(value) { }
        public static implicit operator MMtest1Type(int? value) { return new MMtest1Type(value); }
    }
    public class MO_BOMAlternateType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MO_BOMAlternateType(string value) : base(value) { }
        public static implicit operator MO_BOMAlternateType(string value) { return new MO_BOMAlternateType(value); }
        public static implicit operator MO_BOMAlternateType(DBNull value) { return new MO_BOMAlternateType(null); }
    }
    public class MO_CycleTimeType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 8; }
        public override byte Scale { get => 4; }
        public override bool Nullable { get => true; }
        private MO_CycleTimeType(decimal? value) : base(value) { }
        public static implicit operator MO_CycleTimeType(decimal? value) { return new MO_CycleTimeType(value); }
        public static implicit operator MO_CycleTimeType(DBNull value) { return new MO_CycleTimeType(null); }
    }
    public class MO_CycleType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MO_CycleType(decimal? value) : base(value) { }
        public static implicit operator MO_CycleType(decimal? value) { return new MO_CycleType(value); }
        public static implicit operator MO_CycleType(DBNull value) { return new MO_CycleType(null); }
    }
    public class MO_JobConfigTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MO_JobConfigTypeType(string value) : base(value) { }
        public static implicit operator MO_JobConfigTypeType(string value) { return new MO_JobConfigTypeType(value); }
        public static implicit operator MO_JobConfigTypeType(DBNull value) { return new MO_JobConfigTypeType(null); }
    }
    public class MO_LaborType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MO_LaborType(string value) : base(value) { }
        public static implicit operator MO_LaborType(string value) { return new MO_LaborType(value); }
        public static implicit operator MO_LaborType(DBNull value) { return new MO_LaborType(null); }
    }
    public class MO_MaintenanceIDPrefixType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MO_MaintenanceIDPrefixType(string value) : base(value) { }
        public static implicit operator MO_MaintenanceIDPrefixType(string value) { return new MO_MaintenanceIDPrefixType(value); }
        public static implicit operator MO_MaintenanceIDPrefixType(DBNull value) { return new MO_MaintenanceIDPrefixType(null); }
    }
    public class MO_MaintenanceIDType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MO_MaintenanceIDType(string value) : base(value) { }
        public static implicit operator MO_MaintenanceIDType(string value) { return new MO_MaintenanceIDType(value); }
        public static implicit operator MO_MaintenanceIDType(DBNull value) { return new MO_MaintenanceIDType(null); }
    }
    public class MO_MaintenanceStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MO_MaintenanceStatusType(string value) : base(value) { }
        public static implicit operator MO_MaintenanceStatusType(string value) { return new MO_MaintenanceStatusType(value); }
        public static implicit operator MO_MaintenanceStatusType(DBNull value) { return new MO_MaintenanceStatusType(null); }
    }
    public class MO_MaintenanceType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MO_MaintenanceType(string value) : base(value) { }
        public static implicit operator MO_MaintenanceType(string value) { return new MO_MaintenanceType(value); }
        public static implicit operator MO_MaintenanceType(DBNull value) { return new MO_MaintenanceType(null); }
    }
    public class MO_OperationWeightPercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private MO_OperationWeightPercentType(decimal? value) : base(value) { }
        public static implicit operator MO_OperationWeightPercentType(decimal? value) { return new MO_OperationWeightPercentType(value); }
        public static implicit operator MO_OperationWeightPercentType(DBNull value) { return new MO_OperationWeightPercentType(null); }
    }
    public class MO_ProductCycleType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MO_ProductCycleType(int? value) : base(value) { }
        public static implicit operator MO_ProductCycleType(int? value) { return new MO_ProductCycleType(value); }
        public static implicit operator MO_ProductCycleType(DBNull value) { return new MO_ProductCycleType(null); }
        private MO_ProductCycleType(long? value) : base(value) { }
        public static implicit operator MO_ProductCycleType(long? value) { return new MO_ProductCycleType(value); }
    }
    public class MO_ScheduleFrequencyType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MO_ScheduleFrequencyType(string value) : base(value) { }
        public static implicit operator MO_ScheduleFrequencyType(string value) { return new MO_ScheduleFrequencyType(value); }
        public static implicit operator MO_ScheduleFrequencyType(DBNull value) { return new MO_ScheduleFrequencyType(null); }
    }
    public class MO_ScheduleFrequencyTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MO_ScheduleFrequencyTypeType(string value) : base(value) { }
        public static implicit operator MO_ScheduleFrequencyTypeType(string value) { return new MO_ScheduleFrequencyTypeType(value); }
        public static implicit operator MO_ScheduleFrequencyTypeType(DBNull value) { return new MO_ScheduleFrequencyTypeType(null); }
    }
    public class MobileCustomerFilterType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MobileCustomerFilterType(int? value) : base(value) { }
        public static implicit operator MobileCustomerFilterType(int? value) { return new MobileCustomerFilterType(value); }
        public static implicit operator MobileCustomerFilterType(DBNull value) { return new MobileCustomerFilterType(null); }
        private MobileCustomerFilterType(long? value) : base(value) { }
        public static implicit operator MobileCustomerFilterType(long? value) { return new MobileCustomerFilterType(value); }
    }
    public class MobileDeviceInteractionType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MobileDeviceInteractionType(string value) : base(value) { }
        public static implicit operator MobileDeviceInteractionType(string value) { return new MobileDeviceInteractionType(value); }
        public static implicit operator MobileDeviceInteractionType(DBNull value) { return new MobileDeviceInteractionType(null); }
    }
    public class MobileFieldStyleType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MobileFieldStyleType(string value) : base(value) { }
        public static implicit operator MobileFieldStyleType(string value) { return new MobileFieldStyleType(value); }
        public static implicit operator MobileFieldStyleType(DBNull value) { return new MobileFieldStyleType(null); }
    }
    public class MobileFilterDataTypeType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MobileFilterDataTypeType(string value) : base(value) { }
        public static implicit operator MobileFilterDataTypeType(string value) { return new MobileFilterDataTypeType(value); }
        public static implicit operator MobileFilterDataTypeType(DBNull value) { return new MobileFilterDataTypeType(null); }
    }
    public class MobileFilterOperatorType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MobileFilterOperatorType(string value) : base(value) { }
        public static implicit operator MobileFilterOperatorType(string value) { return new MobileFilterOperatorType(value); }
        public static implicit operator MobileFilterOperatorType(DBNull value) { return new MobileFilterOperatorType(null); }
    }
    public class MobileItemFilterType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MobileItemFilterType(int? value) : base(value) { }
        public static implicit operator MobileItemFilterType(int? value) { return new MobileItemFilterType(value); }
        public static implicit operator MobileItemFilterType(DBNull value) { return new MobileItemFilterType(null); }
        private MobileItemFilterType(long? value) : base(value) { }
        public static implicit operator MobileItemFilterType(long? value) { return new MobileItemFilterType(value); }
    }
    public class MobileSyncResponseSizeType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 15; }
        public override byte Scale { get => 5; }
        public override bool Nullable { get => true; }
        private MobileSyncResponseSizeType(decimal? value) : base(value) { }
        public static implicit operator MobileSyncResponseSizeType(decimal? value) { return new MobileSyncResponseSizeType(value); }
        public static implicit operator MobileSyncResponseSizeType(DBNull value) { return new MobileSyncResponseSizeType(null); }
    }
    public class MobileUnitFilterType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MobileUnitFilterType(int? value) : base(value) { }
        public static implicit operator MobileUnitFilterType(int? value) { return new MobileUnitFilterType(value); }
        public static implicit operator MobileUnitFilterType(DBNull value) { return new MobileUnitFilterType(null); }
        private MobileUnitFilterType(long? value) : base(value) { }
        public static implicit operator MobileUnitFilterType(long? value) { return new MobileUnitFilterType(value); }
    }
    public class MonitoredResourceStatusType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MonitoredResourceStatusType(string value) : base(value) { }
        public static implicit operator MonitoredResourceStatusType(string value) { return new MonitoredResourceStatusType(value); }
        public static implicit operator MonitoredResourceStatusType(DBNull value) { return new MonitoredResourceStatusType(null); }
    }
    public class MonthlyCarAllowanceType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private MonthlyCarAllowanceType(decimal? value) : base(value) { }
        public static implicit operator MonthlyCarAllowanceType(decimal? value) { return new MonthlyCarAllowanceType(value); }
        public static implicit operator MonthlyCarAllowanceType(DBNull value) { return new MonthlyCarAllowanceType(null); }
    }
    public class MonthType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MonthType(byte? value) : base(value) { }
        public static implicit operator MonthType(byte? value) { return new MonthType(value); }
        public static implicit operator MonthType(DBNull value) { return new MonthType(null); }
        private MonthType(int? value) : base(value) { }
        public static implicit operator MonthType(int? value) { return new MonthType(value); }
    }
    public class MrpExceptCodeType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MrpExceptCodeType(byte? value) : base(value) { }
        public static implicit operator MrpExceptCodeType(byte? value) { return new MrpExceptCodeType(value); }
        public static implicit operator MrpExceptCodeType(DBNull value) { return new MrpExceptCodeType(null); }
        private MrpExceptCodeType(int? value) : base(value) { }
        public static implicit operator MrpExceptCodeType(int? value) { return new MrpExceptCodeType(value); }
    }
    public class MrpOrderLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MrpOrderLineType(short? value) : base(value) { }
        public static implicit operator MrpOrderLineType(short? value) { return new MrpOrderLineType(value); }
        public static implicit operator MrpOrderLineType(DBNull value) { return new MrpOrderLineType(null); }
        private MrpOrderLineType(int? value) : base(value) { }
        public static implicit operator MrpOrderLineType(int? value) { return new MrpOrderLineType(value); }
    }
    public class MrpOrderReleaseType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MrpOrderReleaseType(short? value) : base(value) { }
        public static implicit operator MrpOrderReleaseType(short? value) { return new MrpOrderReleaseType(value); }
        public static implicit operator MrpOrderReleaseType(DBNull value) { return new MrpOrderReleaseType(null); }
        private MrpOrderReleaseType(int? value) : base(value) { }
        public static implicit operator MrpOrderReleaseType(int? value) { return new MrpOrderReleaseType(value); }
    }
    public class MrpOrderType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MrpOrderType(string value) : base(value) { }
        public static implicit operator MrpOrderType(string value) { return new MrpOrderType(value); }
        public static implicit operator MrpOrderType(DBNull value) { return new MrpOrderType(null); }
    }
    public class MrpOrderTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MrpOrderTypeType(string value) : base(value) { }
        public static implicit operator MrpOrderTypeType(string value) { return new MrpOrderTypeType(value); }
        public static implicit operator MrpOrderTypeType(DBNull value) { return new MrpOrderTypeType(null); }
    }
    public class MrpPriorityType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MrpPriorityType(byte? value) : base(value) { }
        public static implicit operator MrpPriorityType(byte? value) { return new MrpPriorityType(value); }
        public static implicit operator MrpPriorityType(DBNull value) { return new MrpPriorityType(null); }
        private MrpPriorityType(int? value) : base(value) { }
        public static implicit operator MrpPriorityType(int? value) { return new MrpPriorityType(value); }
    }
    public class MrpReqSrcType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MrpReqSrcType(string value) : base(value) { }
        public static implicit operator MrpReqSrcType(string value) { return new MrpReqSrcType(value); }
        public static implicit operator MrpReqSrcType(DBNull value) { return new MrpReqSrcType(null); }
    }
    public class MrpTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MrpTypeType(string value) : base(value) { }
        public static implicit operator MrpTypeType(string value) { return new MrpTypeType(value); }
        public static implicit operator MrpTypeType(DBNull value) { return new MrpTypeType(null); }
    }
    public class MrpWbTabType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MrpWbTabType(string value) : base(value) { }
        public static implicit operator MrpWbTabType(string value) { return new MrpWbTabType(value); }
        public static implicit operator MrpWbTabType(DBNull value) { return new MrpWbTabType(null); }
    }
    public class MRUFormCaptionListType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MRUFormCaptionListType(string value) : base(value) { }
        public static implicit operator MRUFormCaptionListType(string value) { return new MRUFormCaptionListType(value); }
        public static implicit operator MRUFormCaptionListType(DBNull value) { return new MRUFormCaptionListType(null); }
    }
    public class MRUFormListType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MRUFormListType(string value) : base(value) { }
        public static implicit operator MRUFormListType(string value) { return new MRUFormListType(value); }
        public static implicit operator MRUFormListType(DBNull value) { return new MRUFormListType(null); }
    }
    public class MSDevEnvVersionIdType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MSDevEnvVersionIdType(string value) : base(value) { }
        public static implicit operator MSDevEnvVersionIdType(string value) { return new MSDevEnvVersionIdType(value); }
        public static implicit operator MSDevEnvVersionIdType(DBNull value) { return new MSDevEnvVersionIdType(null); }
    }
    public class MsgAnswerType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MsgAnswerType(string value) : base(value) { }
        public static implicit operator MsgAnswerType(string value) { return new MsgAnswerType(value); }
        public static implicit operator MsgAnswerType(DBNull value) { return new MsgAnswerType(null); }
    }
    public class MX_DIOTRateType : StringType
    {
        public override int Length { get => 10; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MX_DIOTRateType(string value) : base(value) { }
        public static implicit operator MX_DIOTRateType(string value) { return new MX_DIOTRateType(value); }
        public static implicit operator MX_DIOTRateType(DBNull value) { return new MX_DIOTRateType(null); }
    }
    public class MX_DIOTTransTypeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MX_DIOTTransTypeType(string value) : base(value) { }
        public static implicit operator MX_DIOTTransTypeType(string value) { return new MX_DIOTTransTypeType(value); }
        public static implicit operator MX_DIOTTransTypeType(DBNull value) { return new MX_DIOTTransTypeType(null); }
    }
    public class MX_DistSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MX_DistSeqType(short? value) : base(value) { }
        public static implicit operator MX_DistSeqType(short? value) { return new MX_DistSeqType(value); }
        public static implicit operator MX_DistSeqType(DBNull value) { return new MX_DistSeqType(null); }
        private MX_DistSeqType(int? value) : base(value) { }
        public static implicit operator MX_DistSeqType(int? value) { return new MX_DistSeqType(value); }
    }
    public class MX_IETUClassType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MX_IETUClassType(string value) : base(value) { }
        public static implicit operator MX_IETUClassType(string value) { return new MX_IETUClassType(value); }
        public static implicit operator MX_IETUClassType(DBNull value) { return new MX_IETUClassType(null); }
    }
    public class MX_NationalityType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MX_NationalityType(string value) : base(value) { }
        public static implicit operator MX_NationalityType(string value) { return new MX_NationalityType(value); }
        public static implicit operator MX_NationalityType(DBNull value) { return new MX_NationalityType(null); }
    }
    public class MX_TaxRegForeignType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MX_TaxRegForeignType(string value) : base(value) { }
        public static implicit operator MX_TaxRegForeignType(string value) { return new MX_TaxRegForeignType(value); }
        public static implicit operator MX_TaxRegForeignType(DBNull value) { return new MX_TaxRegForeignType(null); }
    }
    public class MX_TaxRegNumTypeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MX_TaxRegNumTypeType(string value) : base(value) { }
        public static implicit operator MX_TaxRegNumTypeType(string value) { return new MX_TaxRegNumTypeType(value); }
        public static implicit operator MX_TaxRegNumTypeType(DBNull value) { return new MX_TaxRegNumTypeType(null); }
    }
    public class MX_VendorDIOTType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MX_VendorDIOTType(string value) : base(value) { }
        public static implicit operator MX_VendorDIOTType(string value) { return new MX_VendorDIOTType(value); }
        public static implicit operator MX_VendorDIOTType(DBNull value) { return new MX_VendorDIOTType(null); }
    }
    public class MXTaxAuthoritySerialNumberType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MXTaxAuthoritySerialNumberType(string value) : base(value) { }
        public static implicit operator MXTaxAuthoritySerialNumberType(string value) { return new MXTaxAuthoritySerialNumberType(value); }
        public static implicit operator MXTaxAuthoritySerialNumberType(DBNull value) { return new MXTaxAuthoritySerialNumberType(null); }
    }
    public class MyCostCenterType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private MyCostCenterType(int? value) : base(value) { }
        public static implicit operator MyCostCenterType(int? value) { return new MyCostCenterType(value); }
        public static implicit operator MyCostCenterType(DBNull value) { return new MyCostCenterType(null); }
        private MyCostCenterType(long? value) : base(value) { }
        public static implicit operator MyCostCenterType(long? value) { return new MyCostCenterType(value); }
    }
    public class NAFTACountryOfOriginType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private NAFTACountryOfOriginType(string value) : base(value) { }
        public static implicit operator NAFTACountryOfOriginType(string value) { return new NAFTACountryOfOriginType(value); }
        public static implicit operator NAFTACountryOfOriginType(DBNull value) { return new NAFTACountryOfOriginType(null); }
    }
    public class NAFTAPreferenceCriterionType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private NAFTAPreferenceCriterionType(string value) : base(value) { }
        public static implicit operator NAFTAPreferenceCriterionType(string value) { return new NAFTAPreferenceCriterionType(value); }
        public static implicit operator NAFTAPreferenceCriterionType(DBNull value) { return new NAFTAPreferenceCriterionType(null); }
    }
    public class NameType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private NameType(string value) : base(value) { }
        public static implicit operator NameType(string value) { return new NameType(value); }
        public static implicit operator NameType(DBNull value) { return new NameType(null); }
    }
    public class NationalityType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private NationalityType(string value) : base(value) { }
        public static implicit operator NationalityType(string value) { return new NationalityType(value); }
        public static implicit operator NationalityType(DBNull value) { return new NationalityType(null); }
    }
    public class NetVatType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private NetVatType(decimal? value) : base(value) { }
        public static implicit operator NetVatType(decimal? value) { return new NetVatType(value); }
        public static implicit operator NetVatType(DBNull value) { return new NetVatType(null); }
    }
    public class NetworkDomainNameType : StringType
    {
        public override int Length { get => 512; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private NetworkDomainNameType(string value) : base(value) { }
        public static implicit operator NetworkDomainNameType(string value) { return new NetworkDomainNameType(value); }
        public static implicit operator NetworkDomainNameType(DBNull value) { return new NetworkDomainNameType(null); }
    }
    public class NetworkEncryptedPasswordType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private NetworkEncryptedPasswordType(string value) : base(value) { }
        public static implicit operator NetworkEncryptedPasswordType(string value) { return new NetworkEncryptedPasswordType(value); }
        public static implicit operator NetworkEncryptedPasswordType(DBNull value) { return new NetworkEncryptedPasswordType(null); }
    }
    public class NetworkUsernameType : StringType
    {
        public override int Length { get => 128; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private NetworkUsernameType(string value) : base(value) { }
        public static implicit operator NetworkUsernameType(string value) { return new NetworkUsernameType(value); }
        public static implicit operator NetworkUsernameType(DBNull value) { return new NetworkUsernameType(null); }
    }
    public class NextKeyLengthExprType : StringType
    {
        public override int Length { get => 130; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private NextKeyLengthExprType(string value) : base(value) { }
        public static implicit operator NextKeyLengthExprType(string value) { return new NextKeyLengthExprType(value); }
        public static implicit operator NextKeyLengthExprType(DBNull value) { return new NextKeyLengthExprType(null); }
    }
    public class NextKeyPrefixListType : StringType
    {
        public override int Length { get => 262; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private NextKeyPrefixListType(string value) : base(value) { }
        public static implicit operator NextKeyPrefixListType(string value) { return new NextKeyPrefixListType(value); }
        public static implicit operator NextKeyPrefixListType(DBNull value) { return new NextKeyPrefixListType(null); }
    }
    public class NoteType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private NoteType(string value) : base(value) { }
        public static implicit operator NoteType(string value) { return new NoteType(value); }
        public static implicit operator NoteType(DBNull value) { return new NoteType(null); }
    }
    public class NumberOfEmployeesType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private NumberOfEmployeesType(int? value) : base(value) { }
        public static implicit operator NumberOfEmployeesType(int? value) { return new NumberOfEmployeesType(value); }
        public static implicit operator NumberOfEmployeesType(DBNull value) { return new NumberOfEmployeesType(null); }
        private NumberOfEmployeesType(long? value) : base(value) { }
        public static implicit operator NumberOfEmployeesType(long? value) { return new NumberOfEmployeesType(value); }
    }
    public class NumberOfLinesType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private NumberOfLinesType(int? value) : base(value) { }
        public static implicit operator NumberOfLinesType(int? value) { return new NumberOfLinesType(value); }
        public static implicit operator NumberOfLinesType(DBNull value) { return new NumberOfLinesType(null); }
        private NumberOfLinesType(long? value) : base(value) { }
        public static implicit operator NumberOfLinesType(long? value) { return new NumberOfLinesType(value); }
    }
    public class NumberOfSalespersonsType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private NumberOfSalespersonsType(int? value) : base(value) { }
        public static implicit operator NumberOfSalespersonsType(int? value) { return new NumberOfSalespersonsType(value); }
        public static implicit operator NumberOfSalespersonsType(DBNull value) { return new NumberOfSalespersonsType(null); }
        private NumberOfSalespersonsType(long? value) : base(value) { }
        public static implicit operator NumberOfSalespersonsType(long? value) { return new NumberOfSalespersonsType(value); }
    }
    public class NumericFormatType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private NumericFormatType(string value) : base(value) { }
        public static implicit operator NumericFormatType(string value) { return new NumericFormatType(value); }
        public static implicit operator NumericFormatType(DBNull value) { return new NumericFormatType(null); }
    }
    public class NumFlagType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private NumFlagType(byte? value) : base(value) { }
        public static implicit operator NumFlagType(byte? value) { return new NumFlagType(value); }
        public static implicit operator NumFlagType(DBNull value) { return new NumFlagType(null); }
        private NumFlagType(int? value) : base(value) { }
        public static implicit operator NumFlagType(int? value) { return new NumFlagType(value); }
    }
    public class ObjectNameType : StringType
    {
        public override int Length { get => 256; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ObjectNameType(string value) : base(value) { }
        public static implicit operator ObjectNameType(string value) { return new ObjectNameType(value); }
        public static implicit operator ObjectNameType(DBNull value) { return new ObjectNameType(null); }
    }
    public class OCRNumModulusType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OCRNumModulusType(string value) : base(value) { }
        public static implicit operator OCRNumModulusType(string value) { return new OCRNumModulusType(value); }
        public static implicit operator OCRNumModulusType(DBNull value) { return new OCRNumModulusType(null); }
    }
    public class OfferOfCoverageCodeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OfferOfCoverageCodeType(string value) : base(value) { }
        public static implicit operator OfferOfCoverageCodeType(string value) { return new OfferOfCoverageCodeType(value); }
        public static implicit operator OfferOfCoverageCodeType(DBNull value) { return new OfferOfCoverageCodeType(null); }
    }
    public class OldNewType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OldNewType(string value) : base(value) { }
        public static implicit operator OldNewType(string value) { return new OldNewType(value); }
        public static implicit operator OldNewType(DBNull value) { return new OldNewType(null); }
    }
    public class OldTextKeyType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OldTextKeyType(int? value) : base(value) { }
        public static implicit operator OldTextKeyType(int? value) { return new OldTextKeyType(value); }
        public static implicit operator OldTextKeyType(DBNull value) { return new OldTextKeyType(null); }
        private OldTextKeyType(long? value) : base(value) { }
        public static implicit operator OldTextKeyType(long? value) { return new OldTextKeyType(value); }
    }
    public class OleObjectType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OleObjectType(string value) : base(value) { }
        public static implicit operator OleObjectType(string value) { return new OleObjectType(value); }
        public static implicit operator OleObjectType(DBNull value) { return new OleObjectType(null); }
    }
    public class OperationCounterType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 24; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OperationCounterType(decimal? value) : base(value) { }
        public static implicit operator OperationCounterType(decimal? value) { return new OperationCounterType(value); }
        public static implicit operator OperationCounterType(DBNull value) { return new OperationCounterType(null); }
    }
    public class OperNumPoReleaseType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OperNumPoReleaseType(short? value) : base(value) { }
        public static implicit operator OperNumPoReleaseType(short? value) { return new OperNumPoReleaseType(value); }
        public static implicit operator OperNumPoReleaseType(DBNull value) { return new OperNumPoReleaseType(null); }
        private OperNumPoReleaseType(int? value) : base(value) { }
        public static implicit operator OperNumPoReleaseType(int? value) { return new OperNumPoReleaseType(value); }
    }
    public class OperNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OperNumType(int? value) : base(value) { }
        public static implicit operator OperNumType(int? value) { return new OperNumType(value); }
        public static implicit operator OperNumType(DBNull value) { return new OperNumType(null); }
        private OperNumType(long? value) : base(value) { }
        public static implicit operator OperNumType(long? value) { return new OperNumType(value); }
    }
    public class OPMDueDateMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OPMDueDateMethodType(string value) : base(value) { }
        public static implicit operator OPMDueDateMethodType(string value) { return new OPMDueDateMethodType(value); }
        public static implicit operator OPMDueDateMethodType(DBNull value) { return new OPMDueDateMethodType(null); }
    }
    public class OPMPartialMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OPMPartialMethodType(string value) : base(value) { }
        public static implicit operator OPMPartialMethodType(string value) { return new OPMPartialMethodType(value); }
        public static implicit operator OPMPartialMethodType(DBNull value) { return new OPMPartialMethodType(null); }
    }
    public class OppItemCommentsType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OppItemCommentsType(string value) : base(value) { }
        public static implicit operator OppItemCommentsType(string value) { return new OppItemCommentsType(value); }
        public static implicit operator OppItemCommentsType(DBNull value) { return new OppItemCommentsType(null); }
    }
    public class OpportunityClosePercentType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OpportunityClosePercentType(byte? value) : base(value) { }
        public static implicit operator OpportunityClosePercentType(byte? value) { return new OpportunityClosePercentType(value); }
        public static implicit operator OpportunityClosePercentType(DBNull value) { return new OpportunityClosePercentType(null); }
        private OpportunityClosePercentType(int? value) : base(value) { }
        public static implicit operator OpportunityClosePercentType(int? value) { return new OpportunityClosePercentType(value); }
    }
    public class OpportunityIDType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OpportunityIDType(string value) : base(value) { }
        public static implicit operator OpportunityIDType(string value) { return new OpportunityIDType(value); }
        public static implicit operator OpportunityIDType(DBNull value) { return new OpportunityIDType(null); }
    }
    public class OpportunityPriorityType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OpportunityPriorityType(string value) : base(value) { }
        public static implicit operator OpportunityPriorityType(string value) { return new OpportunityPriorityType(value); }
        public static implicit operator OpportunityPriorityType(DBNull value) { return new OpportunityPriorityType(null); }
    }
    public class OpportunityRefNumType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OpportunityRefNumType(string value) : base(value) { }
        public static implicit operator OpportunityRefNumType(string value) { return new OpportunityRefNumType(value); }
        public static implicit operator OpportunityRefNumType(DBNull value) { return new OpportunityRefNumType(null); }
    }
    public class OpportunitySourceType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OpportunitySourceType(string value) : base(value) { }
        public static implicit operator OpportunitySourceType(string value) { return new OpportunitySourceType(value); }
        public static implicit operator OpportunitySourceType(DBNull value) { return new OpportunitySourceType(null); }
    }
    public class OpportunityStage2Type : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OpportunityStage2Type(string value) : base(value) { }
        public static implicit operator OpportunityStage2Type(string value) { return new OpportunityStage2Type(value); }
        public static implicit operator OpportunityStage2Type(DBNull value) { return new OpportunityStage2Type(null); }
    }
    public class OpportunityStageType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OpportunityStageType(string value) : base(value) { }
        public static implicit operator OpportunityStageType(string value) { return new OpportunityStageType(value); }
        public static implicit operator OpportunityStageType(DBNull value) { return new OpportunityStageType(null); }
    }
    public class OpportunityStatusType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OpportunityStatusType(string value) : base(value) { }
        public static implicit operator OpportunityStatusType(string value) { return new OpportunityStatusType(value); }
        public static implicit operator OpportunityStatusType(DBNull value) { return new OpportunityStatusType(null); }
    }
    public class OpportunityTaskNumType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OpportunityTaskNumType(short? value) : base(value) { }
        public static implicit operator OpportunityTaskNumType(short? value) { return new OpportunityTaskNumType(value); }
        public static implicit operator OpportunityTaskNumType(DBNull value) { return new OpportunityTaskNumType(null); }
        private OpportunityTaskNumType(int? value) : base(value) { }
        public static implicit operator OpportunityTaskNumType(int? value) { return new OpportunityTaskNumType(value); }
    }
    public class OpportunityTaskStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OpportunityTaskStatusType(string value) : base(value) { }
        public static implicit operator OpportunityTaskStatusType(string value) { return new OpportunityTaskStatusType(value); }
        public static implicit operator OpportunityTaskStatusType(DBNull value) { return new OpportunityTaskStatusType(null); }
    }
    public class OpportunityTaskTypeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OpportunityTaskTypeType(string value) : base(value) { }
        public static implicit operator OpportunityTaskTypeType(string value) { return new OpportunityTaskTypeType(value); }
        public static implicit operator OpportunityTaskTypeType(DBNull value) { return new OpportunityTaskTypeType(null); }
    }
    public class OptCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OptCodeType(string value) : base(value) { }
        public static implicit operator OptCodeType(string value) { return new OptCodeType(value); }
        public static implicit operator OptCodeType(DBNull value) { return new OptCodeType(null); }
    }
    public class OrderConfirmationRefType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OrderConfirmationRefType(string value) : base(value) { }
        public static implicit operator OrderConfirmationRefType(string value) { return new OrderConfirmationRefType(value); }
        public static implicit operator OrderConfirmationRefType(DBNull value) { return new OrderConfirmationRefType(null); }
    }
    public class OrderDiscType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private OrderDiscType(decimal? value) : base(value) { }
        public static implicit operator OrderDiscType(decimal? value) { return new OrderDiscType(value); }
        public static implicit operator OrderDiscType(DBNull value) { return new OrderDiscType(null); }
    }
    public class OrderLineReservationRefType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OrderLineReservationRefType(string value) : base(value) { }
        public static implicit operator OrderLineReservationRefType(string value) { return new OrderLineReservationRefType(value); }
        public static implicit operator OrderLineReservationRefType(DBNull value) { return new OrderLineReservationRefType(null); }
    }
    public class OrderNoType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OrderNoType(string value) : base(value) { }
        public static implicit operator OrderNoType(string value) { return new OrderNoType(value); }
        public static implicit operator OrderNoType(DBNull value) { return new OrderNoType(null); }
    }
    public class OrderPricePercentType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OrderPricePercentType(byte? value) : base(value) { }
        public static implicit operator OrderPricePercentType(byte? value) { return new OrderPricePercentType(value); }
        public static implicit operator OrderPricePercentType(DBNull value) { return new OrderPricePercentType(null); }
        private OrderPricePercentType(int? value) : base(value) { }
        public static implicit operator OrderPricePercentType(int? value) { return new OrderPricePercentType(value); }
    }

    public class OrderRefStrType: StringType
    {
        public override int Length { get => 130; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OrderRefStrType(string value) : base(value) { }
        public static implicit operator OrderRefStrType(string value) { return new OrderRefStrType(value); }
        public static implicit operator OrderRefStrType(DBNull value) { return new OrderRefStrType(null); }
    }

    public class OrderSourceType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OrderSourceType(string value) : base(value) { }
        public static implicit operator OrderSourceType(string value) { return new OrderSourceType(value); }
        public static implicit operator OrderSourceType(DBNull value) { return new OrderSourceType(null); }
    }
    public class OrigAmtType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private OrigAmtType(decimal? value) : base(value) { }
        public static implicit operator OrigAmtType(decimal? value) { return new OrigAmtType(value); }
        public static implicit operator OrigAmtType(DBNull value) { return new OrigAmtType(null); }
    }
    public class OSBaseNameType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OSBaseNameType(string value) : base(value) { }
        public static implicit operator OSBaseNameType(string value) { return new OSBaseNameType(value); }
        public static implicit operator OSBaseNameType(DBNull value) { return new OSBaseNameType(null); }
    }
    public class OSDomainLabelNameType : StringType
    {
        public override int Length { get => 126; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OSDomainLabelNameType(string value) : base(value) { }
        public static implicit operator OSDomainLabelNameType(string value) { return new OSDomainLabelNameType(value); }
        public static implicit operator OSDomainLabelNameType(DBNull value) { return new OSDomainLabelNameType(null); }
    }
    public class OSExtensionType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OSExtensionType(string value) : base(value) { }
        public static implicit operator OSExtensionType(string value) { return new OSExtensionType(value); }
        public static implicit operator OSExtensionType(DBNull value) { return new OSExtensionType(null); }
    }
    public class OSLocationType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OSLocationType(string value) : base(value) { }
        public static implicit operator OSLocationType(string value) { return new OSLocationType(value); }
        public static implicit operator OSLocationType(DBNull value) { return new OSLocationType(null); }
    }
    public class OSMachineNameType : StringType
    {
        public override int Length { get => 506; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OSMachineNameType(string value) : base(value) { }
        public static implicit operator OSMachineNameType(string value) { return new OSMachineNameType(value); }
        public static implicit operator OSMachineNameType(DBNull value) { return new OSMachineNameType(null); }
    }
    public class OSResourceNameType : StringType
    {
        public override int Length { get => 512; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OSResourceNameType(string value) : base(value) { }
        public static implicit operator OSResourceNameType(string value) { return new OSResourceNameType(value); }
        public static implicit operator OSResourceNameType(DBNull value) { return new OSResourceNameType(null); }
    }
    public class OSResourceTypeType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OSResourceTypeType(string value) : base(value) { }
        public static implicit operator OSResourceTypeType(string value) { return new OSResourceTypeType(value); }
        public static implicit operator OSResourceTypeType(DBNull value) { return new OSResourceTypeType(null); }
    }
    public class OtherNameType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OtherNameType(string value) : base(value) { }
        public static implicit operator OtherNameType(string value) { return new OtherNameType(value); }
        public static implicit operator OtherNameType(DBNull value) { return new OtherNameType(null); }
    }
    public class OutAmtType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private OutAmtType(decimal? value) : base(value) { }
        public static implicit operator OutAmtType(decimal? value) { return new OutAmtType(value); }
        public static implicit operator OutAmtType(DBNull value) { return new OutAmtType(null); }
    }
    public class OutputMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OutputMethodType(string value) : base(value) { }
        public static implicit operator OutputMethodType(string value) { return new OutputMethodType(value); }
        public static implicit operator OutputMethodType(DBNull value) { return new OutputMethodType(null); }
    }
    public class OverheadBasisType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OverheadBasisType(string value) : base(value) { }
        public static implicit operator OverheadBasisType(string value) { return new OverheadBasisType(value); }
        public static implicit operator OverheadBasisType(DBNull value) { return new OverheadBasisType(null); }
    }
    public class OverheadRateType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private OverheadRateType(decimal? value) : base(value) { }
        public static implicit operator OverheadRateType(decimal? value) { return new OverheadRateType(value); }
        public static implicit operator OverheadRateType(DBNull value) { return new OverheadRateType(null); }
    }
    public class OverrideLanguageIDType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private OverrideLanguageIDType(string value) : base(value) { }
        public static implicit operator OverrideLanguageIDType(string value) { return new OverrideLanguageIDType(value); }
        public static implicit operator OverrideLanguageIDType(DBNull value) { return new OverrideLanguageIDType(null); }
    }
    public class OvertimeLimitType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 4; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private OvertimeLimitType(decimal? value) : base(value) { }
        public static implicit operator OvertimeLimitType(decimal? value) { return new OvertimeLimitType(value); }
        public static implicit operator OvertimeLimitType(DBNull value) { return new OvertimeLimitType(null); }
    }
    public class PackageIDType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PackageIDType(int? value) : base(value) { }
        public static implicit operator PackageIDType(int? value) { return new PackageIDType(value); }
        public static implicit operator PackageIDType(DBNull value) { return new PackageIDType(null); }
        private PackageIDType(long? value) : base(value) { }
        public static implicit operator PackageIDType(long? value) { return new PackageIDType(value); }
    }
    public class PackagesType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PackagesType(short? value) : base(value) { }
        public static implicit operator PackagesType(short? value) { return new PackagesType(value); }
        public static implicit operator PackagesType(DBNull value) { return new PackagesType(null); }
        private PackagesType(int? value) : base(value) { }
        public static implicit operator PackagesType(int? value) { return new PackagesType(value); }
    }
    public class PackNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PackNumType(int? value) : base(value) { }
        public static implicit operator PackNumType(int? value) { return new PackNumType(value); }
        public static implicit operator PackNumType(DBNull value) { return new PackNumType(null); }
        private PackNumType(long? value) : base(value) { }
        public static implicit operator PackNumType(long? value) { return new PackNumType(value); }
    }
    public class ParmKeyType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ParmKeyType(byte? value) : base(value) { }
        public static implicit operator ParmKeyType(byte? value) { return new ParmKeyType(value); }
        public static implicit operator ParmKeyType(DBNull value) { return new ParmKeyType(null); }
        private ParmKeyType(int? value) : base(value) { }
        public static implicit operator ParmKeyType(int? value) { return new ParmKeyType(value); }
    }
    public class PartialDeprTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PartialDeprTypeType(string value) : base(value) { }
        public static implicit operator PartialDeprTypeType(string value) { return new PartialDeprTypeType(value); }
        public static implicit operator PartialDeprTypeType(DBNull value) { return new PartialDeprTypeType(null); }
    }
    public class PartNoType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PartNoType(string value) : base(value) { }
        public static implicit operator PartNoType(string value) { return new PartNoType(value); }
        public static implicit operator PartNoType(DBNull value) { return new PartNoType(null); }
    }
    public class PasswordExpirationType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PasswordExpirationType(int? value) : base(value) { }
        public static implicit operator PasswordExpirationType(int? value) { return new PasswordExpirationType(value); }
        public static implicit operator PasswordExpirationType(DBNull value) { return new PasswordExpirationType(null); }
        private PasswordExpirationType(long? value) : base(value) { }
        public static implicit operator PasswordExpirationType(long? value) { return new PasswordExpirationType(value); }
    }
    public class PasswordHistoryCountType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PasswordHistoryCountType(byte? value) : base(value) { }
        public static implicit operator PasswordHistoryCountType(byte? value) { return new PasswordHistoryCountType(value); }
        public static implicit operator PasswordHistoryCountType(DBNull value) { return new PasswordHistoryCountType(null); }
        private PasswordHistoryCountType(int? value) : base(value) { }
        public static implicit operator PasswordHistoryCountType(int? value) { return new PasswordHistoryCountType(value); }
    }
    public class PasswordLengthType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PasswordLengthType(int? value) : base(value) { }
        public static implicit operator PasswordLengthType(int? value) { return new PasswordLengthType(value); }
        public static implicit operator PasswordLengthType(DBNull value) { return new PasswordLengthType(null); }
        private PasswordLengthType(long? value) : base(value) { }
        public static implicit operator PasswordLengthType(long? value) { return new PasswordLengthType(value); }
    }
    public class PasswordRetriesType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PasswordRetriesType(short? value) : base(value) { }
        public static implicit operator PasswordRetriesType(short? value) { return new PasswordRetriesType(value); }
        public static implicit operator PasswordRetriesType(DBNull value) { return new PasswordRetriesType(null); }
        private PasswordRetriesType(int? value) : base(value) { }
        public static implicit operator PasswordRetriesType(int? value) { return new PasswordRetriesType(value); }
    }
    public class PasswordStatusType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PasswordStatusType(byte? value) : base(value) { }
        public static implicit operator PasswordStatusType(byte? value) { return new PasswordStatusType(value); }
        public static implicit operator PasswordStatusType(DBNull value) { return new PasswordStatusType(null); }
        private PasswordStatusType(int? value) : base(value) { }
        public static implicit operator PasswordStatusType(int? value) { return new PasswordStatusType(value); }
    }
    public class PasswordType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PasswordType(string value) : base(value) { }
        public static implicit operator PasswordType(string value) { return new PasswordType(value); }
        public static implicit operator PasswordType(DBNull value) { return new PasswordType(null); }
    }
    public class PatchLevelType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PatchLevelType(int? value) : base(value) { }
        public static implicit operator PatchLevelType(int? value) { return new PatchLevelType(value); }
        public static implicit operator PatchLevelType(DBNull value) { return new PatchLevelType(null); }
        private PatchLevelType(long? value) : base(value) { }
        public static implicit operator PatchLevelType(long? value) { return new PatchLevelType(value); }
    }
    public class PatchMessageType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PatchMessageType(string value) : base(value) { }
        public static implicit operator PatchMessageType(string value) { return new PatchMessageType(value); }
        public static implicit operator PatchMessageType(DBNull value) { return new PatchMessageType(null); }
    }
    public class PatchResultType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PatchResultType(string value) : base(value) { }
        public static implicit operator PatchResultType(string value) { return new PatchResultType(value); }
        public static implicit operator PatchResultType(DBNull value) { return new PatchResultType(null); }
    }
    public class PayBasisType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PayBasisType(string value) : base(value) { }
        public static implicit operator PayBasisType(string value) { return new PayBasisType(value); }
        public static implicit operator PayBasisType(DBNull value) { return new PayBasisType(null); }
    }
    public class PaymentMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PaymentMethodType(string value) : base(value) { }
        public static implicit operator PaymentMethodType(string value) { return new PaymentMethodType(value); }
        public static implicit operator PaymentMethodType(DBNull value) { return new PaymentMethodType(null); }
    }
    public class PaymentNumberType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PaymentNumberType(string value) : base(value) { }
        public static implicit operator PaymentNumberType(string value) { return new PaymentNumberType(value); }
        public static implicit operator PaymentNumberType(DBNull value) { return new PaymentNumberType(null); }
    }
    public class paymenttransnumtype : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private paymenttransnumtype(int? value) : base(value) { }
        public static implicit operator paymenttransnumtype(int? value) { return new paymenttransnumtype(value); }
        public static implicit operator paymenttransnumtype(DBNull value) { return new paymenttransnumtype(null); }
        private paymenttransnumtype(long? value) : base(value) { }
        public static implicit operator paymenttransnumtype(long? value) { return new paymenttransnumtype(value); }
    }
    public class PayRatePreciseType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 5; }
        public override bool Nullable { get => true; }
        private PayRatePreciseType(decimal? value) : base(value) { }
        public static implicit operator PayRatePreciseType(decimal? value) { return new PayRatePreciseType(value); }
        public static implicit operator PayRatePreciseType(DBNull value) { return new PayRatePreciseType(null); }
    }
    public class PayRateType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private PayRateType(decimal? value) : base(value) { }
        public static implicit operator PayRateType(decimal? value) { return new PayRateType(value); }
        public static implicit operator PayRateType(DBNull value) { return new PayRateType(null); }
    }
    public class PayrollConfigIDType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PayrollConfigIDType(string value) : base(value) { }
        public static implicit operator PayrollConfigIDType(string value) { return new PayrollConfigIDType(value); }
        public static implicit operator PayrollConfigIDType(DBNull value) { return new PayrollConfigIDType(null); }
    }
    public class PayrollConfigNameType : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PayrollConfigNameType(string value) : base(value) { }
        public static implicit operator PayrollConfigNameType(string value) { return new PayrollConfigNameType(value); }
        public static implicit operator PayrollConfigNameType(DBNull value) { return new PayrollConfigNameType(null); }
    }
    public class PcrReasonCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PcrReasonCodeType(string value) : base(value) { }
        public static implicit operator PcrReasonCodeType(string value) { return new PcrReasonCodeType(value); }
        public static implicit operator PcrReasonCodeType(DBNull value) { return new PcrReasonCodeType(null); }
    }
    public class PeriodsAveragedType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PeriodsAveragedType(short? value) : base(value) { }
        public static implicit operator PeriodsAveragedType(short? value) { return new PeriodsAveragedType(value); }
        public static implicit operator PeriodsAveragedType(DBNull value) { return new PeriodsAveragedType(null); }
        private PeriodsAveragedType(int? value) : base(value) { }
        public static implicit operator PeriodsAveragedType(int? value) { return new PeriodsAveragedType(value); }
    }
    public class PeriodStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PeriodStatusType(string value) : base(value) { }
        public static implicit operator PeriodStatusType(string value) { return new PeriodStatusType(value); }
        public static implicit operator PeriodStatusType(DBNull value) { return new PeriodStatusType(null); }
    }
    public class PermType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PermType(string value) : base(value) { }
        public static implicit operator PermType(string value) { return new PermType(value); }
        public static implicit operator PermType(DBNull value) { return new PermType(null); }
    }
    public class PersonalCarUsePctType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PersonalCarUsePctType(byte? value) : base(value) { }
        public static implicit operator PersonalCarUsePctType(byte? value) { return new PersonalCarUsePctType(value); }
        public static implicit operator PersonalCarUsePctType(DBNull value) { return new PersonalCarUsePctType(null); }
        private PersonalCarUsePctType(int? value) : base(value) { }
        public static implicit operator PersonalCarUsePctType(int? value) { return new PersonalCarUsePctType(value); }
    }
    public class PerSortTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PerSortTypeType(string value) : base(value) { }
        public static implicit operator PerSortTypeType(string value) { return new PerSortTypeType(value); }
        public static implicit operator PerSortTypeType(DBNull value) { return new PerSortTypeType(null); }
    }
    public class PertotSortFieldType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PertotSortFieldType(string value) : base(value) { }
        public static implicit operator PertotSortFieldType(string value) { return new PertotSortFieldType(value); }
        public static implicit operator PertotSortFieldType(DBNull value) { return new PertotSortFieldType(null); }
    }
    public class PettyCashNumberType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PettyCashNumberType(string value) : base(value) { }
        public static implicit operator PettyCashNumberType(string value) { return new PettyCashNumberType(value); }
        public static implicit operator PettyCashNumberType(DBNull value) { return new PettyCashNumberType(null); }
    }
    public class PhoneExtType : StringType
    {
        public override int Length { get => 26; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PhoneExtType(string value) : base(value) { }
        public static implicit operator PhoneExtType(string value) { return new PhoneExtType(value); }
        public static implicit operator PhoneExtType(DBNull value) { return new PhoneExtType(null); }
    }
    public class PhoneType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PhoneType(string value) : base(value) { }
        public static implicit operator PhoneType(string value) { return new PhoneType(value); }
        public static implicit operator PhoneType(DBNull value) { return new PhoneType(null); }
    }
    public class PhyinvCntStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PhyinvCntStatusType(string value) : base(value) { }
        public static implicit operator PhyinvCntStatusType(string value) { return new PhyinvCntStatusType(value); }
        public static implicit operator PhyinvCntStatusType(DBNull value) { return new PhyinvCntStatusType(null); }
    }
    public class PhyinvPostStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PhyinvPostStatusType(string value) : base(value) { }
        public static implicit operator PhyinvPostStatusType(string value) { return new PhyinvPostStatusType(value); }
        public static implicit operator PhyinvPostStatusType(DBNull value) { return new PhyinvPostStatusType(null); }
    }
    public class PhyinvStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PhyinvStatusType(string value) : base(value) { }
        public static implicit operator PhyinvStatusType(string value) { return new PhyinvStatusType(value); }
        public static implicit operator PhyinvStatusType(DBNull value) { return new PhyinvStatusType(null); }
    }
    public class PhyinvTransTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PhyinvTransTypeType(string value) : base(value) { }
        public static implicit operator PhyinvTransTypeType(string value) { return new PhyinvTransTypeType(value); }
        public static implicit operator PhyinvTransTypeType(DBNull value) { return new PhyinvTransTypeType(null); }
    }
    public class PhyinvTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PhyinvTypeType(string value) : base(value) { }
        public static implicit operator PhyinvTypeType(string value) { return new PhyinvTypeType(value); }
        public static implicit operator PhyinvTypeType(DBNull value) { return new PhyinvTypeType(null); }
    }
    public class PhyInvValCounterType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PhyInvValCounterType(string value) : base(value) { }
        public static implicit operator PhyInvValCounterType(string value) { return new PhyInvValCounterType(value); }
        public static implicit operator PhyInvValCounterType(DBNull value) { return new PhyInvValCounterType(null); }
    }
    public class PhytagsCountMethType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PhytagsCountMethType(string value) : base(value) { }
        public static implicit operator PhytagsCountMethType(string value) { return new PhytagsCountMethType(value); }
        public static implicit operator PhytagsCountMethType(DBNull value) { return new PhytagsCountMethType(null); }
    }
    public class PhytagsMatlTypesType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PhytagsMatlTypesType(string value) : base(value) { }
        public static implicit operator PhytagsMatlTypesType(string value) { return new PhytagsMatlTypesType(value); }
        public static implicit operator PhytagsMatlTypesType(DBNull value) { return new PhytagsMatlTypesType(null); }
    }
    public class PickGroupType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PickGroupType(short? value) : base(value) { }
        public static implicit operator PickGroupType(short? value) { return new PickGroupType(value); }
        public static implicit operator PickGroupType(DBNull value) { return new PickGroupType(null); }
        private PickGroupType(int? value) : base(value) { }
        public static implicit operator PickGroupType(int? value) { return new PickGroupType(value); }
    }
    public class PickListIDType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 19; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PickListIDType(decimal? value) : base(value) { }
        public static implicit operator PickListIDType(decimal? value) { return new PickListIDType(value); }
        public static implicit operator PickListIDType(DBNull value) { return new PickListIDType(null); }
    }
    public class PickListSequenceType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PickListSequenceType(int? value) : base(value) { }
        public static implicit operator PickListSequenceType(int? value) { return new PickListSequenceType(value); }
        public static implicit operator PickListSequenceType(DBNull value) { return new PickListSequenceType(null); }
        private PickListSequenceType(long? value) : base(value) { }
        public static implicit operator PickListSequenceType(long? value) { return new PickListSequenceType(value); }
    }
    public class PickListStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PickListStatusType(string value) : base(value) { }
        public static implicit operator PickListStatusType(string value) { return new PickListStatusType(value); }
        public static implicit operator PickListStatusType(DBNull value) { return new PickListStatusType(null); }
    }
    public class PieceCountType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PieceCountType(int? value) : base(value) { }
        public static implicit operator PieceCountType(int? value) { return new PieceCountType(value); }
        public static implicit operator PieceCountType(DBNull value) { return new PieceCountType(null); }
        private PieceCountType(long? value) : base(value) { }
        public static implicit operator PieceCountType(long? value) { return new PieceCountType(value); }
    }
    public class PlanFenceType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PlanFenceType(short? value) : base(value) { }
        public static implicit operator PlanFenceType(short? value) { return new PlanFenceType(value); }
        public static implicit operator PlanFenceType(DBNull value) { return new PlanFenceType(null); }
        private PlanFenceType(int? value) : base(value) { }
        public static implicit operator PlanFenceType(int? value) { return new PlanFenceType(value); }
    }
    public class PlannerTraceLevelType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PlannerTraceLevelType(string value) : base(value) { }
        public static implicit operator PlannerTraceLevelType(string value) { return new PlannerTraceLevelType(value); }
        public static implicit operator PlannerTraceLevelType(DBNull value) { return new PlannerTraceLevelType(null); }
    }
    public class PlanNumType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PlanNumType(string value) : base(value) { }
        public static implicit operator PlanNumType(string value) { return new PlanNumType(value); }
        public static implicit operator PlanNumType(DBNull value) { return new PlanNumType(null); }
    }
    public class PlantType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PlantType(string value) : base(value) { }
        public static implicit operator PlantType(string value) { return new PlantType(value); }
        public static implicit operator PlantType(DBNull value) { return new PlantType(null); }
    }
    public class PlnSupplyProductCodeSourceTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PlnSupplyProductCodeSourceTypeType(string value) : base(value) { }
        public static implicit operator PlnSupplyProductCodeSourceTypeType(string value) { return new PlnSupplyProductCodeSourceTypeType(value); }
        public static implicit operator PlnSupplyProductCodeSourceTypeType(DBNull value) { return new PlnSupplyProductCodeSourceTypeType(null); }
    }
    public class PlnSupplySourcePercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private PlnSupplySourcePercentType(decimal? value) : base(value) { }
        public static implicit operator PlnSupplySourcePercentType(decimal? value) { return new PlnSupplySourcePercentType(value); }
        public static implicit operator PlnSupplySourcePercentType(DBNull value) { return new PlnSupplySourcePercentType(null); }
    }
    public class PlnSupplySourceRuleIdType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PlnSupplySourceRuleIdType(string value) : base(value) { }
        public static implicit operator PlnSupplySourceRuleIdType(string value) { return new PlnSupplySourceRuleIdType(value); }
        public static implicit operator PlnSupplySourceRuleIdType(DBNull value) { return new PlnSupplySourceRuleIdType(null); }
    }
    public class PLVATDeclarationCodeType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PLVATDeclarationCodeType(string value) : base(value) { }
        public static implicit operator PLVATDeclarationCodeType(string value) { return new PLVATDeclarationCodeType(value); }
        public static implicit operator PLVATDeclarationCodeType(DBNull value) { return new PLVATDeclarationCodeType(null); }
    }
    public class PLVATDeclarationCommitType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PLVATDeclarationCommitType(string value) : base(value) { }
        public static implicit operator PLVATDeclarationCommitType(string value) { return new PLVATDeclarationCommitType(value); }
        public static implicit operator PLVATDeclarationCommitType(DBNull value) { return new PLVATDeclarationCommitType(null); }
    }
    public class PLVATDeclarationReturnToMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PLVATDeclarationReturnToMethodType(string value) : base(value) { }
        public static implicit operator PLVATDeclarationReturnToMethodType(string value) { return new PLVATDeclarationReturnToMethodType(value); }
        public static implicit operator PLVATDeclarationReturnToMethodType(DBNull value) { return new PLVATDeclarationReturnToMethodType(null); }
    }
    public class PLVATDeclarationStructureVersionType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PLVATDeclarationStructureVersionType(string value) : base(value) { }
        public static implicit operator PLVATDeclarationStructureVersionType(string value) { return new PLVATDeclarationStructureVersionType(value); }
        public static implicit operator PLVATDeclarationStructureVersionType(DBNull value) { return new PLVATDeclarationStructureVersionType(null); }
    }
    public class PLVATDeclarationSystemType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PLVATDeclarationSystemType(string value) : base(value) { }
        public static implicit operator PLVATDeclarationSystemType(string value) { return new PLVATDeclarationSystemType(value); }
        public static implicit operator PLVATDeclarationSystemType(DBNull value) { return new PLVATDeclarationSystemType(null); }
    }
    public class PLVATDeclarationTaxCodeType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PLVATDeclarationTaxCodeType(string value) : base(value) { }
        public static implicit operator PLVATDeclarationTaxCodeType(string value) { return new PLVATDeclarationTaxCodeType(value); }
        public static implicit operator PLVATDeclarationTaxCodeType(DBNull value) { return new PLVATDeclarationTaxCodeType(null); }
    }
    public class PLVATDeclarationVariantType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PLVATDeclarationVariantType(string value) : base(value) { }
        public static implicit operator PLVATDeclarationVariantType(string value) { return new PLVATDeclarationVariantType(value); }
        public static implicit operator PLVATDeclarationVariantType(DBNull value) { return new PLVATDeclarationVariantType(null); }
    }
    public class PLVATFormVariantType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PLVATFormVariantType(string value) : base(value) { }
        public static implicit operator PLVATFormVariantType(string value) { return new PLVATFormVariantType(value); }
        public static implicit operator PLVATFormVariantType(DBNull value) { return new PLVATFormVariantType(null); }
    }
    public class PLVATOfficeCodeType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PLVATOfficeCodeType(string value) : base(value) { }
        public static implicit operator PLVATOfficeCodeType(string value) { return new PLVATOfficeCodeType(value); }
        public static implicit operator PLVATOfficeCodeType(DBNull value) { return new PLVATOfficeCodeType(null); }
    }
    public class PLVATStructureVersionType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PLVATStructureVersionType(string value) : base(value) { }
        public static implicit operator PLVATStructureVersionType(string value) { return new PLVATStructureVersionType(value); }
        public static implicit operator PLVATStructureVersionType(DBNull value) { return new PLVATStructureVersionType(null); }
    }
    public class PLVATSystemCodeType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PLVATSystemCodeType(string value) : base(value) { }
        public static implicit operator PLVATSystemCodeType(string value) { return new PLVATSystemCodeType(value); }
        public static implicit operator PLVATSystemCodeType(DBNull value) { return new PLVATSystemCodeType(null); }
    }
    public class PmfCcpType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PmfCcpType(string value) : base(value) { }
        public static implicit operator PmfCcpType(string value) { return new PmfCcpType(value); }
        public static implicit operator PmfCcpType(DBNull value) { return new PmfCcpType(null); }
    }
    public class PmfCcpTypeType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PmfCcpTypeType(string value) : base(value) { }
        public static implicit operator PmfCcpTypeType(string value) { return new PmfCcpTypeType(value); }
        public static implicit operator PmfCcpTypeType(DBNull value) { return new PmfCcpTypeType(null); }
    }
    public class PmfCnvFactorType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 25; }
        public override byte Scale { get => 13; }
        public override bool Nullable { get => true; }
        private PmfCnvFactorType(decimal? value) : base(value) { }
        public static implicit operator PmfCnvFactorType(decimal? value) { return new PmfCnvFactorType(value); }
        public static implicit operator PmfCnvFactorType(DBNull value) { return new PmfCnvFactorType(null); }
    }
    public class PmfPctType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 5; }
        public override bool Nullable { get => true; }
        private PmfPctType(decimal? value) : base(value) { }
        public static implicit operator PmfPctType(decimal? value) { return new PmfPctType(value); }
        public static implicit operator PmfPctType(DBNull value) { return new PmfPctType(null); }
    }
    public class PmfQtyType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 25; }
        public override byte Scale { get => 13; }
        public override bool Nullable { get => true; }
        private PmfQtyType(decimal? value) : base(value) { }
        public static implicit operator PmfQtyType(decimal? value) { return new PmfQtyType(value); }
        public static implicit operator PmfQtyType(DBNull value) { return new PmfQtyType(null); }
    }
    public class PmfRptType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PmfRptType(string value) : base(value) { }
        public static implicit operator PmfRptType(string value) { return new PmfRptType(value); }
        public static implicit operator PmfRptType(DBNull value) { return new PmfRptType(null); }
    }
    public class PmfSampleType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PmfSampleType(string value) : base(value) { }
        public static implicit operator PmfSampleType(string value) { return new PmfSampleType(value); }
        public static implicit operator PmfSampleType(DBNull value) { return new PmfSampleType(null); }
    }
    public class PmfTotalType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 25; }
        public override byte Scale { get => 13; }
        public override bool Nullable { get => true; }
        private PmfTotalType(decimal? value) : base(value) { }
        public static implicit operator PmfTotalType(decimal? value) { return new PmfTotalType(value); }
        public static implicit operator PmfTotalType(DBNull value) { return new PmfTotalType(null); }
    }
    public class PMTCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PMTCodeType(string value) : base(value) { }
        public static implicit operator PMTCodeType(string value) { return new PMTCodeType(value); }
        public static implicit operator PMTCodeType(DBNull value) { return new PMTCodeType(null); }
    }
    public class PnType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PnType(string value) : base(value) { }
        public static implicit operator PnType(string value) { return new PnType(value); }
        public static implicit operator PnType(DBNull value) { return new PnType(null); }
    }
    public class PoChangeStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PoChangeStatusType(string value) : base(value) { }
        public static implicit operator PoChangeStatusType(string value) { return new PoChangeStatusType(value); }
        public static implicit operator PoChangeStatusType(DBNull value) { return new PoChangeStatusType(null); }
    }
    public class PoChgSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PoChgSeqType(short? value) : base(value) { }
        public static implicit operator PoChgSeqType(short? value) { return new PoChgSeqType(value); }
        public static implicit operator PoChgSeqType(DBNull value) { return new PoChgSeqType(null); }
        private PoChgSeqType(int? value) : base(value) { }
        public static implicit operator PoChgSeqType(int? value) { return new PoChgSeqType(value); }
    }
    public class PoitemStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PoitemStatType(string value) : base(value) { }
        public static implicit operator PoitemStatType(string value) { return new PoitemStatType(value); }
        public static implicit operator PoitemStatType(DBNull value) { return new PoitemStatType(null); }
    }
    public class PoitemStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PoitemStatusType(string value) : base(value) { }
        public static implicit operator PoitemStatusType(string value) { return new PoitemStatusType(value); }
        public static implicit operator PoitemStatusType(DBNull value) { return new PoitemStatusType(null); }
    }
    public class PoLineItemTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PoLineItemTypeType(string value) : base(value) { }
        public static implicit operator PoLineItemTypeType(string value) { return new PoLineItemTypeType(value); }
        public static implicit operator PoLineItemTypeType(DBNull value) { return new PoLineItemTypeType(null); }
    }
    public class PoLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PoLineType(short? value) : base(value) { }
        public static implicit operator PoLineType(short? value) { return new PoLineType(value); }
        public static implicit operator PoLineType(DBNull value) { return new PoLineType(null); }
        private PoLineType(int? value) : base(value) { }
        public static implicit operator PoLineType(int? value) { return new PoLineType(value); }
    }
    public class PollFreqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PollFreqType(int? value) : base(value) { }
        public static implicit operator PollFreqType(int? value) { return new PollFreqType(value); }
        public static implicit operator PollFreqType(DBNull value) { return new PollFreqType(null); }
        private PollFreqType(long? value) : base(value) { }
        public static implicit operator PollFreqType(long? value) { return new PollFreqType(value); }
    }
    public class PollingServiceType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PollingServiceType(byte? value) : base(value) { }
        public static implicit operator PollingServiceType(byte? value) { return new PollingServiceType(value); }
        public static implicit operator PollingServiceType(DBNull value) { return new PollingServiceType(null); }
        private PollingServiceType(int? value) : base(value) { }
        public static implicit operator PollingServiceType(int? value) { return new PollingServiceType(value); }
    }
    public class PoNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PoNumType(string value) : base(value) { }
        public static implicit operator PoNumType(string value) { return new PoNumType(value); }
        public static implicit operator PoNumType(DBNull value) { return new PoNumType(null); }
    }
    public class PoPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PoPrefixType(string value) : base(value) { }
        public static implicit operator PoPrefixType(string value) { return new PoPrefixType(value); }
        public static implicit operator PoPrefixType(DBNull value) { return new PoPrefixType(null); }
    }
    public class PoPsTrnNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PoPsTrnNumType(string value) : base(value) { }
        public static implicit operator PoPsTrnNumType(string value) { return new PoPsTrnNumType(value); }
        public static implicit operator PoPsTrnNumType(DBNull value) { return new PoPsTrnNumType(null); }
    }
    public class PopulationDepthType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PopulationDepthType(byte? value) : base(value) { }
        public static implicit operator PopulationDepthType(byte? value) { return new PopulationDepthType(value); }
        public static implicit operator PopulationDepthType(DBNull value) { return new PopulationDepthType(null); }
        private PopulationDepthType(int? value) : base(value) { }
        public static implicit operator PopulationDepthType(int? value) { return new PopulationDepthType(value); }
    }
    public class PoReleaseType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PoReleaseType(short? value) : base(value) { }
        public static implicit operator PoReleaseType(short? value) { return new PoReleaseType(value); }
        public static implicit operator PoReleaseType(DBNull value) { return new PoReleaseType(null); }
        private PoReleaseType(int? value) : base(value) { }
        public static implicit operator PoReleaseType(int? value) { return new PoReleaseType(value); }
    }
    public class PortalAccountStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PortalAccountStatusType(string value) : base(value) { }
        public static implicit operator PortalAccountStatusType(string value) { return new PortalAccountStatusType(value); }
        public static implicit operator PortalAccountStatusType(DBNull value) { return new PortalAccountStatusType(null); }
    }
    public class PortOfEntryType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PortOfEntryType(string value) : base(value) { }
        public static implicit operator PortOfEntryType(string value) { return new PortOfEntryType(value); }
        public static implicit operator PortOfEntryType(DBNull value) { return new PortOfEntryType(null); }
    }
    public class PosClassType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PosClassType(string value) : base(value) { }
        public static implicit operator PosClassType(string value) { return new PosClassType(value); }
        public static implicit operator PosClassType(DBNull value) { return new PosClassType(null); }
    }
    public class PosDetJobStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PosDetJobStatusType(string value) : base(value) { }
        public static implicit operator PosDetJobStatusType(string value) { return new PosDetJobStatusType(value); }
        public static implicit operator PosDetJobStatusType(DBNull value) { return new PosDetJobStatusType(null); }
    }
    public class PosHoursType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PosHoursType(byte? value) : base(value) { }
        public static implicit operator PosHoursType(byte? value) { return new PosHoursType(value); }
        public static implicit operator PosHoursType(DBNull value) { return new PosHoursType(null); }
        private PosHoursType(int? value) : base(value) { }
        public static implicit operator PosHoursType(int? value) { return new PosHoursType(value); }
    }
    public class PositivePayFieldDateFmtType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PositivePayFieldDateFmtType(int? value) : base(value) { }
        public static implicit operator PositivePayFieldDateFmtType(int? value) { return new PositivePayFieldDateFmtType(value); }
        public static implicit operator PositivePayFieldDateFmtType(DBNull value) { return new PositivePayFieldDateFmtType(null); }
        private PositivePayFieldDateFmtType(long? value) : base(value) { }
        public static implicit operator PositivePayFieldDateFmtType(long? value) { return new PositivePayFieldDateFmtType(value); }
    }
    public class PositivePayFieldFillerType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PositivePayFieldFillerType(string value) : base(value) { }
        public static implicit operator PositivePayFieldFillerType(string value) { return new PositivePayFieldFillerType(value); }
        public static implicit operator PositivePayFieldFillerType(DBNull value) { return new PositivePayFieldFillerType(null); }
    }
    public class PositivePayFieldJustificationType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PositivePayFieldJustificationType(string value) : base(value) { }
        public static implicit operator PositivePayFieldJustificationType(string value) { return new PositivePayFieldJustificationType(value); }
        public static implicit operator PositivePayFieldJustificationType(DBNull value) { return new PositivePayFieldJustificationType(null); }
    }
    public class PositivePayFieldLengthType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PositivePayFieldLengthType(int? value) : base(value) { }
        public static implicit operator PositivePayFieldLengthType(int? value) { return new PositivePayFieldLengthType(value); }
        public static implicit operator PositivePayFieldLengthType(DBNull value) { return new PositivePayFieldLengthType(null); }
        private PositivePayFieldLengthType(long? value) : base(value) { }
        public static implicit operator PositivePayFieldLengthType(long? value) { return new PositivePayFieldLengthType(value); }
    }
    public class PositivePayFieldTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PositivePayFieldTypeType(string value) : base(value) { }
        public static implicit operator PositivePayFieldTypeType(string value) { return new PositivePayFieldTypeType(value); }
        public static implicit operator PositivePayFieldTypeType(DBNull value) { return new PositivePayFieldTypeType(null); }
    }
    public class PositivePayFieldValueType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PositivePayFieldValueType(string value) : base(value) { }
        public static implicit operator PositivePayFieldValueType(string value) { return new PositivePayFieldValueType(value); }
        public static implicit operator PositivePayFieldValueType(DBNull value) { return new PositivePayFieldValueType(null); }
    }
    public class PositivePayFieldVoidIndicatorType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PositivePayFieldVoidIndicatorType(string value) : base(value) { }
        public static implicit operator PositivePayFieldVoidIndicatorType(string value) { return new PositivePayFieldVoidIndicatorType(value); }
        public static implicit operator PositivePayFieldVoidIndicatorType(DBNull value) { return new PositivePayFieldVoidIndicatorType(null); }
    }
    public class PositivePaySectionSequenceType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PositivePaySectionSequenceType(byte? value) : base(value) { }
        public static implicit operator PositivePaySectionSequenceType(byte? value) { return new PositivePaySectionSequenceType(value); }
        public static implicit operator PositivePaySectionSequenceType(DBNull value) { return new PositivePaySectionSequenceType(null); }
        private PositivePaySectionSequenceType(int? value) : base(value) { }
        public static implicit operator PositivePaySectionSequenceType(int? value) { return new PositivePaySectionSequenceType(value); }
    }
    public class POSMDrawerStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private POSMDrawerStatType(string value) : base(value) { }
        public static implicit operator POSMDrawerStatType(string value) { return new POSMDrawerStatType(value); }
        public static implicit operator POSMDrawerStatType(DBNull value) { return new POSMDrawerStatType(null); }
    }
    public class POSMDrawerType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private POSMDrawerType(string value) : base(value) { }
        public static implicit operator POSMDrawerType(string value) { return new POSMDrawerType(value); }
        public static implicit operator POSMDrawerType(DBNull value) { return new POSMDrawerType(null); }
    }
    public class POSMDriversLicenseType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private POSMDriversLicenseType(string value) : base(value) { }
        public static implicit operator POSMDriversLicenseType(string value) { return new POSMDriversLicenseType(value); }
        public static implicit operator POSMDriversLicenseType(DBNull value) { return new POSMDriversLicenseType(null); }
    }
    public class POSMNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private POSMNumType(string value) : base(value) { }
        public static implicit operator POSMNumType(string value) { return new POSMNumType(value); }
        public static implicit operator POSMNumType(DBNull value) { return new POSMNumType(null); }
    }
    public class POSMOrdTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private POSMOrdTypeType(string value) : base(value) { }
        public static implicit operator POSMOrdTypeType(string value) { return new POSMOrdTypeType(value); }
        public static implicit operator POSMOrdTypeType(DBNull value) { return new POSMOrdTypeType(null); }
    }
    public class POSMPayRefType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private POSMPayRefType(string value) : base(value) { }
        public static implicit operator POSMPayRefType(string value) { return new POSMPayRefType(value); }
        public static implicit operator POSMPayRefType(DBNull value) { return new POSMPayRefType(null); }
    }
    public class POSMPayTransTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private POSMPayTransTypeType(string value) : base(value) { }
        public static implicit operator POSMPayTransTypeType(string value) { return new POSMPayTransTypeType(value); }
        public static implicit operator POSMPayTransTypeType(DBNull value) { return new POSMPayTransTypeType(null); }
    }
    public class POSMPayTypeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private POSMPayTypeType(string value) : base(value) { }
        public static implicit operator POSMPayTypeType(string value) { return new POSMPayTypeType(value); }
        public static implicit operator POSMPayTypeType(DBNull value) { return new POSMPayTypeType(null); }
    }
    public class POSMRefNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private POSMRefNumType(string value) : base(value) { }
        public static implicit operator POSMRefNumType(string value) { return new POSMRefNumType(value); }
        public static implicit operator POSMRefNumType(DBNull value) { return new POSMRefNumType(null); }
    }
    public class POSMRefTypeCOSType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private POSMRefTypeCOSType(string value) : base(value) { }
        public static implicit operator POSMRefTypeCOSType(string value) { return new POSMRefTypeCOSType(value); }
        public static implicit operator POSMRefTypeCOSType(DBNull value) { return new POSMRefTypeCOSType(null); }
    }
    public class POSMTransNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private POSMTransNumType(int? value) : base(value) { }
        public static implicit operator POSMTransNumType(int? value) { return new POSMTransNumType(value); }
        public static implicit operator POSMTransNumType(DBNull value) { return new POSMTransNumType(null); }
        private POSMTransNumType(long? value) : base(value) { }
        public static implicit operator POSMTransNumType(long? value) { return new POSMTransNumType(value); }
    }
    public class PosReqTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PosReqTypeType(string value) : base(value) { }
        public static implicit operator PosReqTypeType(string value) { return new PosReqTypeType(value); }
        public static implicit operator PosReqTypeType(DBNull value) { return new PosReqTypeType(null); }
    }
    public class PosRequirementType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PosRequirementType(string value) : base(value) { }
        public static implicit operator PosRequirementType(string value) { return new PosRequirementType(value); }
        public static implicit operator PosRequirementType(DBNull value) { return new PosRequirementType(null); }
    }
    public class PostalCodeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PostalCodeType(string value) : base(value) { }
        public static implicit operator PostalCodeType(string value) { return new PostalCodeType(value); }
        public static implicit operator PostalCodeType(DBNull value) { return new PostalCodeType(null); }
    }
    public class PoStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PoStatType(string value) : base(value) { }
        public static implicit operator PoStatType(string value) { return new PoStatType(value); }
        public static implicit operator PoStatType(DBNull value) { return new PoStatType(null); }
    }
    public class PoStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PoStatusType(string value) : base(value) { }
        public static implicit operator PoStatusType(string value) { return new PoStatusType(value); }
        public static implicit operator PoStatusType(DBNull value) { return new PoStatusType(null); }
    }
    public class PoTrnNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PoTrnNumType(string value) : base(value) { }
        public static implicit operator PoTrnNumType(string value) { return new PoTrnNumType(value); }
        public static implicit operator PoTrnNumType(DBNull value) { return new PoTrnNumType(null); }
    }
    public class PoTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PoTypeType(string value) : base(value) { }
        public static implicit operator PoTypeType(string value) { return new PoTypeType(value); }
        public static implicit operator PoTypeType(DBNull value) { return new PoTypeType(null); }
    }
    public class PoVchTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PoVchTypeType(string value) : base(value) { }
        public static implicit operator PoVchTypeType(string value) { return new PoVchTypeType(value); }
        public static implicit operator PoVchTypeType(DBNull value) { return new PoVchTypeType(null); }
    }
    public class PP_AreaConstantType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_AreaConstantType(int? value) : base(value) { }
        public static implicit operator PP_AreaConstantType(int? value) { return new PP_AreaConstantType(value); }
        public static implicit operator PP_AreaConstantType(DBNull value) { return new PP_AreaConstantType(null); }
        private PP_AreaConstantType(long? value) : base(value) { }
        public static implicit operator PP_AreaConstantType(long? value) { return new PP_AreaConstantType(value); }
    }
    public class PP_CartonDimensionType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private PP_CartonDimensionType(decimal? value) : base(value) { }
        public static implicit operator PP_CartonDimensionType(decimal? value) { return new PP_CartonDimensionType(value); }
        public static implicit operator PP_CartonDimensionType(DBNull value) { return new PP_CartonDimensionType(null); }
    }
    public class PP_FactorType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 5; }
        public override bool Nullable { get => true; }
        private PP_FactorType(decimal? value) : base(value) { }
        public static implicit operator PP_FactorType(decimal? value) { return new PP_FactorType(value); }
        public static implicit operator PP_FactorType(DBNull value) { return new PP_FactorType(null); }
    }
    public class PP_FormulaDescriptionType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_FormulaDescriptionType(string value) : base(value) { }
        public static implicit operator PP_FormulaDescriptionType(string value) { return new PP_FormulaDescriptionType(value); }
        public static implicit operator PP_FormulaDescriptionType(DBNull value) { return new PP_FormulaDescriptionType(null); }
    }
    public class PP_FormulaType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_FormulaType(string value) : base(value) { }
        public static implicit operator PP_FormulaType(string value) { return new PP_FormulaType(value); }
        public static implicit operator PP_FormulaType(DBNull value) { return new PP_FormulaType(null); }
    }
    public class PP_FormulaTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_FormulaTypeType(string value) : base(value) { }
        public static implicit operator PP_FormulaTypeType(string value) { return new PP_FormulaTypeType(value); }
        public static implicit operator PP_FormulaTypeType(DBNull value) { return new PP_FormulaTypeType(null); }
    }
    public class PP_GradeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_GradeType(int? value) : base(value) { }
        public static implicit operator PP_GradeType(int? value) { return new PP_GradeType(value); }
        public static implicit operator PP_GradeType(DBNull value) { return new PP_GradeType(null); }
        private PP_GradeType(long? value) : base(value) { }
        public static implicit operator PP_GradeType(long? value) { return new PP_GradeType(value); }
    }
    public class PP_MaterialClassType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_MaterialClassType(string value) : base(value) { }
        public static implicit operator PP_MaterialClassType(string value) { return new PP_MaterialClassType(value); }
        public static implicit operator PP_MaterialClassType(DBNull value) { return new PP_MaterialClassType(null); }
    }
    public class PP_MatlPaperSourceType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_MatlPaperSourceType(string value) : base(value) { }
        public static implicit operator PP_MatlPaperSourceType(string value) { return new PP_MatlPaperSourceType(value); }
        public static implicit operator PP_MatlPaperSourceType(DBNull value) { return new PP_MatlPaperSourceType(null); }
    }
    public class PP_NumberOfColorsType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_NumberOfColorsType(int? value) : base(value) { }
        public static implicit operator PP_NumberOfColorsType(int? value) { return new PP_NumberOfColorsType(value); }
        public static implicit operator PP_NumberOfColorsType(DBNull value) { return new PP_NumberOfColorsType(null); }
        private PP_NumberOfColorsType(long? value) : base(value) { }
        public static implicit operator PP_NumberOfColorsType(long? value) { return new PP_NumberOfColorsType(value); }
    }
    public class PP_NumberOfDimensionsType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_NumberOfDimensionsType(byte? value) : base(value) { }
        public static implicit operator PP_NumberOfDimensionsType(byte? value) { return new PP_NumberOfDimensionsType(value); }
        public static implicit operator PP_NumberOfDimensionsType(DBNull value) { return new PP_NumberOfDimensionsType(null); }
        private PP_NumberOfDimensionsType(int? value) : base(value) { }
        public static implicit operator PP_NumberOfDimensionsType(int? value) { return new PP_NumberOfDimensionsType(value); }
    }
    public class PP_NumberOfHolesType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_NumberOfHolesType(short? value) : base(value) { }
        public static implicit operator PP_NumberOfHolesType(short? value) { return new PP_NumberOfHolesType(value); }
        public static implicit operator PP_NumberOfHolesType(DBNull value) { return new PP_NumberOfHolesType(null); }
        private PP_NumberOfHolesType(int? value) : base(value) { }
        public static implicit operator PP_NumberOfHolesType(int? value) { return new PP_NumberOfHolesType(value); }
    }
    public class PP_NumberOfJointsType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_NumberOfJointsType(int? value) : base(value) { }
        public static implicit operator PP_NumberOfJointsType(int? value) { return new PP_NumberOfJointsType(value); }
        public static implicit operator PP_NumberOfJointsType(DBNull value) { return new PP_NumberOfJointsType(null); }
        private PP_NumberOfJointsType(long? value) : base(value) { }
        public static implicit operator PP_NumberOfJointsType(long? value) { return new PP_NumberOfJointsType(value); }
    }
    public class PP_NumberOfManualHandlingStepsType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_NumberOfManualHandlingStepsType(int? value) : base(value) { }
        public static implicit operator PP_NumberOfManualHandlingStepsType(int? value) { return new PP_NumberOfManualHandlingStepsType(value); }
        public static implicit operator PP_NumberOfManualHandlingStepsType(DBNull value) { return new PP_NumberOfManualHandlingStepsType(null); }
        private PP_NumberOfManualHandlingStepsType(long? value) : base(value) { }
        public static implicit operator PP_NumberOfManualHandlingStepsType(long? value) { return new PP_NumberOfManualHandlingStepsType(value); }
    }
    public class PP_NumberOfSidesToPrintType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_NumberOfSidesToPrintType(int? value) : base(value) { }
        public static implicit operator PP_NumberOfSidesToPrintType(int? value) { return new PP_NumberOfSidesToPrintType(value); }
        public static implicit operator PP_NumberOfSidesToPrintType(DBNull value) { return new PP_NumberOfSidesToPrintType(null); }
        private PP_NumberOfSidesToPrintType(long? value) : base(value) { }
        public static implicit operator PP_NumberOfSidesToPrintType(long? value) { return new PP_NumberOfSidesToPrintType(value); }
    }
    public class PP_NumberOfWordsType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_NumberOfWordsType(int? value) : base(value) { }
        public static implicit operator PP_NumberOfWordsType(int? value) { return new PP_NumberOfWordsType(value); }
        public static implicit operator PP_NumberOfWordsType(DBNull value) { return new PP_NumberOfWordsType(null); }
        private PP_NumberOfWordsType(long? value) : base(value) { }
        public static implicit operator PP_NumberOfWordsType(long? value) { return new PP_NumberOfWordsType(value); }
    }
    public class PP_OperationDimensionType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private PP_OperationDimensionType(decimal? value) : base(value) { }
        public static implicit operator PP_OperationDimensionType(decimal? value) { return new PP_OperationDimensionType(value); }
        public static implicit operator PP_OperationDimensionType(DBNull value) { return new PP_OperationDimensionType(null); }
    }
    public class PP_OperationType2Type : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_OperationType2Type(string value) : base(value) { }
        public static implicit operator PP_OperationType2Type(string value) { return new PP_OperationType2Type(value); }
        public static implicit operator PP_OperationType2Type(DBNull value) { return new PP_OperationType2Type(null); }
    }
    public class PP_OperationTypeCodeType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_OperationTypeCodeType(string value) : base(value) { }
        public static implicit operator PP_OperationTypeCodeType(string value) { return new PP_OperationTypeCodeType(value); }
        public static implicit operator PP_OperationTypeCodeType(DBNull value) { return new PP_OperationTypeCodeType(null); }
    }
    public class PP_OperationTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_OperationTypeType(string value) : base(value) { }
        public static implicit operator PP_OperationTypeType(string value) { return new PP_OperationTypeType(value); }
        public static implicit operator PP_OperationTypeType(DBNull value) { return new PP_OperationTypeType(null); }
    }
    public class PP_OutNumberType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_OutNumberType(int? value) : base(value) { }
        public static implicit operator PP_OutNumberType(int? value) { return new PP_OutNumberType(value); }
        public static implicit operator PP_OutNumberType(DBNull value) { return new PP_OutNumberType(null); }
        private PP_OutNumberType(long? value) : base(value) { }
        public static implicit operator PP_OutNumberType(long? value) { return new PP_OutNumberType(value); }
    }
    public class PP_PaperCodeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_PaperCodeType(string value) : base(value) { }
        public static implicit operator PP_PaperCodeType(string value) { return new PP_PaperCodeType(value); }
        public static implicit operator PP_PaperCodeType(DBNull value) { return new PP_PaperCodeType(null); }
    }
    public class PP_PaperConsumptionMinConstant : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_PaperConsumptionMinConstant(int? value) : base(value) { }
        public static implicit operator PP_PaperConsumptionMinConstant(int? value) { return new PP_PaperConsumptionMinConstant(value); }
        public static implicit operator PP_PaperConsumptionMinConstant(DBNull value) { return new PP_PaperConsumptionMinConstant(null); }
        private PP_PaperConsumptionMinConstant(long? value) : base(value) { }
        public static implicit operator PP_PaperConsumptionMinConstant(long? value) { return new PP_PaperConsumptionMinConstant(value); }
    }
    public class PP_PaperMassBasisType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_PaperMassBasisType(string value) : base(value) { }
        public static implicit operator PP_PaperMassBasisType(string value) { return new PP_PaperMassBasisType(value); }
        public static implicit operator PP_PaperMassBasisType(DBNull value) { return new PP_PaperMassBasisType(null); }
    }
    public class PP_PriceConstantType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_PriceConstantType(int? value) : base(value) { }
        public static implicit operator PP_PriceConstantType(int? value) { return new PP_PriceConstantType(value); }
        public static implicit operator PP_PriceConstantType(DBNull value) { return new PP_PriceConstantType(null); }
        private PP_PriceConstantType(long? value) : base(value) { }
        public static implicit operator PP_PriceConstantType(long? value) { return new PP_PriceConstantType(value); }
    }
    public class PP_PrintModeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_PrintModeType(string value) : base(value) { }
        public static implicit operator PP_PrintModeType(string value) { return new PP_PrintModeType(value); }
        public static implicit operator PP_PrintModeType(DBNull value) { return new PP_PrintModeType(null); }
    }
    public class PP_PrintSheetConstantType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_PrintSheetConstantType(int? value) : base(value) { }
        public static implicit operator PP_PrintSheetConstantType(int? value) { return new PP_PrintSheetConstantType(value); }
        public static implicit operator PP_PrintSheetConstantType(DBNull value) { return new PP_PrintSheetConstantType(null); }
        private PP_PrintSheetConstantType(long? value) : base(value) { }
        public static implicit operator PP_PrintSheetConstantType(long? value) { return new PP_PrintSheetConstantType(value); }
    }
    public class PP_QuoteLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_QuoteLineType(short? value) : base(value) { }
        public static implicit operator PP_QuoteLineType(short? value) { return new PP_QuoteLineType(value); }
        public static implicit operator PP_QuoteLineType(DBNull value) { return new PP_QuoteLineType(null); }
        private PP_QuoteLineType(int? value) : base(value) { }
        public static implicit operator PP_QuoteLineType(int? value) { return new PP_QuoteLineType(value); }
    }
    public class PP_QuoteSectionType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_QuoteSectionType(short? value) : base(value) { }
        public static implicit operator PP_QuoteSectionType(short? value) { return new PP_QuoteSectionType(value); }
        public static implicit operator PP_QuoteSectionType(DBNull value) { return new PP_QuoteSectionType(null); }
        private PP_QuoteSectionType(int? value) : base(value) { }
        public static implicit operator PP_QuoteSectionType(int? value) { return new PP_QuoteSectionType(value); }
    }
    public class PP_QuoteTemplateSectionType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_QuoteTemplateSectionType(short? value) : base(value) { }
        public static implicit operator PP_QuoteTemplateSectionType(short? value) { return new PP_QuoteTemplateSectionType(value); }
        public static implicit operator PP_QuoteTemplateSectionType(DBNull value) { return new PP_QuoteTemplateSectionType(null); }
        private PP_QuoteTemplateSectionType(int? value) : base(value) { }
        public static implicit operator PP_QuoteTemplateSectionType(int? value) { return new PP_QuoteTemplateSectionType(value); }
    }
    public class PP_QuoteTemplateType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_QuoteTemplateType(string value) : base(value) { }
        public static implicit operator PP_QuoteTemplateType(string value) { return new PP_QuoteTemplateType(value); }
        public static implicit operator PP_QuoteTemplateType(DBNull value) { return new PP_QuoteTemplateType(null); }
    }
    public class PP_SectionsCountType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_SectionsCountType(short? value) : base(value) { }
        public static implicit operator PP_SectionsCountType(short? value) { return new PP_SectionsCountType(value); }
        public static implicit operator PP_SectionsCountType(DBNull value) { return new PP_SectionsCountType(null); }
        private PP_SectionsCountType(int? value) : base(value) { }
        public static implicit operator PP_SectionsCountType(int? value) { return new PP_SectionsCountType(value); }
    }
    public class PP_SheetCountType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 19; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private PP_SheetCountType(decimal? value) : base(value) { }
        public static implicit operator PP_SheetCountType(decimal? value) { return new PP_SheetCountType(value); }
        public static implicit operator PP_SheetCountType(DBNull value) { return new PP_SheetCountType(null); }
    }
    public class PP_StdConsumptionRateType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 5; }
        public override bool Nullable { get => true; }
        private PP_StdConsumptionRateType(decimal? value) : base(value) { }
        public static implicit operator PP_StdConsumptionRateType(decimal? value) { return new PP_StdConsumptionRateType(value); }
        public static implicit operator PP_StdConsumptionRateType(DBNull value) { return new PP_StdConsumptionRateType(null); }
    }
    public class PP_UpNumberType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PP_UpNumberType(int? value) : base(value) { }
        public static implicit operator PP_UpNumberType(int? value) { return new PP_UpNumberType(value); }
        public static implicit operator PP_UpNumberType(DBNull value) { return new PP_UpNumberType(null); }
        private PP_UpNumberType(long? value) : base(value) { }
        public static implicit operator PP_UpNumberType(long? value) { return new PP_UpNumberType(value); }
    }
    public class PrAmountType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 8; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private PrAmountType(decimal? value) : base(value) { }
        public static implicit operator PrAmountType(decimal? value) { return new PrAmountType(value); }
        public static implicit operator PrAmountType(DBNull value) { return new PrAmountType(null); }
    }
    public class PrCheckNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrCheckNumType(int? value) : base(value) { }
        public static implicit operator PrCheckNumType(int? value) { return new PrCheckNumType(value); }
        public static implicit operator PrCheckNumType(DBNull value) { return new PrCheckNumType(null); }
        private PrCheckNumType(long? value) : base(value) { }
        public static implicit operator PrCheckNumType(long? value) { return new PrCheckNumType(value); }
    }
    public class PrCommCommSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrCommCommSeqType(int? value) : base(value) { }
        public static implicit operator PrCommCommSeqType(int? value) { return new PrCommCommSeqType(value); }
        public static implicit operator PrCommCommSeqType(DBNull value) { return new PrCommCommSeqType(null); }
        private PrCommCommSeqType(long? value) : base(value) { }
        public static implicit operator PrCommCommSeqType(long? value) { return new PrCommCommSeqType(value); }
    }
    public class PrCommSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrCommSeqType(short? value) : base(value) { }
        public static implicit operator PrCommSeqType(short? value) { return new PrCommSeqType(value); }
        public static implicit operator PrCommSeqType(DBNull value) { return new PrCommSeqType(null); }
        private PrCommSeqType(int? value) : base(value) { }
        public static implicit operator PrCommSeqType(int? value) { return new PrCommSeqType(value); }
    }
    public class PrDeductionType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 8; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private PrDeductionType(decimal? value) : base(value) { }
        public static implicit operator PrDeductionType(decimal? value) { return new PrDeductionType(value); }
        public static implicit operator PrDeductionType(DBNull value) { return new PrDeductionType(null); }
    }
    public class PrenoteType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrenoteType(byte? value) : base(value) { }
        public static implicit operator PrenoteType(byte? value) { return new PrenoteType(value); }
        public static implicit operator PrenoteType(DBNull value) { return new PrenoteType(null); }
        private PrenoteType(int? value) : base(value) { }
        public static implicit operator PrenoteType(int? value) { return new PrenoteType(value); }
    }
    public class PreqitemStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PreqitemStatusType(string value) : base(value) { }
        public static implicit operator PreqitemStatusType(string value) { return new PreqitemStatusType(value); }
        public static implicit operator PreqitemStatusType(DBNull value) { return new PreqitemStatusType(null); }
    }
    public class PreqPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PreqPrefixType(string value) : base(value) { }
        public static implicit operator PreqPrefixType(string value) { return new PreqPrefixType(value); }
        public static implicit operator PreqPrefixType(DBNull value) { return new PreqPrefixType(null); }
    }
    public class PreqStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PreqStatusType(string value) : base(value) { }
        public static implicit operator PreqStatusType(string value) { return new PreqStatusType(value); }
        public static implicit operator PreqStatusType(DBNull value) { return new PreqStatusType(null); }
    }
    public class PreRegisterType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PreRegisterType(int? value) : base(value) { }
        public static implicit operator PreRegisterType(int? value) { return new PreRegisterType(value); }
        public static implicit operator PreRegisterType(DBNull value) { return new PreRegisterType(null); }
        private PreRegisterType(long? value) : base(value) { }
        public static implicit operator PreRegisterType(long? value) { return new PreRegisterType(value); }
    }
    public class PrGenerateFromType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrGenerateFromType(string value) : base(value) { }
        public static implicit operator PrGenerateFromType(string value) { return new PrGenerateFromType(value); }
        public static implicit operator PrGenerateFromType(DBNull value) { return new PrGenerateFromType(null); }
    }
    public class PrhrsHrTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrhrsHrTypeType(string value) : base(value) { }
        public static implicit operator PrhrsHrTypeType(string value) { return new PrhrsHrTypeType(value); }
        public static implicit operator PrhrsHrTypeType(DBNull value) { return new PrhrsHrTypeType(null); }
    }
    public class PriceBaseCodeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PriceBaseCodeType(string value) : base(value) { }
        public static implicit operator PriceBaseCodeType(string value) { return new PriceBaseCodeType(value); }
        public static implicit operator PriceBaseCodeType(DBNull value) { return new PriceBaseCodeType(null); }
    }
    public class PriceCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PriceCodeType(string value) : base(value) { }
        public static implicit operator PriceCodeType(string value) { return new PriceCodeType(value); }
        public static implicit operator PriceCodeType(DBNull value) { return new PriceCodeType(null); }
    }
    public class PriceFormulaType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PriceFormulaType(string value) : base(value) { }
        public static implicit operator PriceFormulaType(string value) { return new PriceFormulaType(value); }
        public static implicit operator PriceFormulaType(DBNull value) { return new PriceFormulaType(null); }
    }
    public class PriceMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PriceMethodType(string value) : base(value) { }
        public static implicit operator PriceMethodType(string value) { return new PriceMethodType(value); }
        public static implicit operator PriceMethodType(DBNull value) { return new PriceMethodType(null); }
    }
    public class PricingDisplayRuleType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PricingDisplayRuleType(string value) : base(value) { }
        public static implicit operator PricingDisplayRuleType(string value) { return new PricingDisplayRuleType(value); }
        public static implicit operator PricingDisplayRuleType(DBNull value) { return new PricingDisplayRuleType(null); }
    }
    public class PricingPrecalculationRuleType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PricingPrecalculationRuleType(string value) : base(value) { }
        public static implicit operator PricingPrecalculationRuleType(string value) { return new PricingPrecalculationRuleType(value); }
        public static implicit operator PricingPrecalculationRuleType(DBNull value) { return new PricingPrecalculationRuleType(null); }
    }
    public class PrinterControlType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrinterControlType(string value) : base(value) { }
        public static implicit operator PrinterControlType(string value) { return new PrinterControlType(value); }
        public static implicit operator PrinterControlType(DBNull value) { return new PrinterControlType(null); }
    }
    public class PrinterNameType : StringType
    {
        public override int Length { get => 510; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrinterNameType(string value) : base(value) { }
        public static implicit operator PrinterNameType(string value) { return new PrinterNameType(value); }
        public static implicit operator PrinterNameType(DBNull value) { return new PrinterNameType(null); }
    }
    public class PrinterTypeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrinterTypeType(string value) : base(value) { }
        public static implicit operator PrinterTypeType(string value) { return new PrinterTypeType(value); }
        public static implicit operator PrinterTypeType(DBNull value) { return new PrinterTypeType(null); }
    }
    public class PrintModeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrintModeType(string value) : base(value) { }
        public static implicit operator PrintModeType(string value) { return new PrintModeType(value); }
        public static implicit operator PrintModeType(DBNull value) { return new PrintModeType(null); }
    }
    public class PriorityType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private PriorityType(decimal? value) : base(value) { }
        public static implicit operator PriorityType(decimal? value) { return new PriorityType(value); }
        public static implicit operator PriorityType(DBNull value) { return new PriorityType(null); }
    }
    public class PrivilegeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrivilegeType(short? value) : base(value) { }
        public static implicit operator PrivilegeType(short? value) { return new PrivilegeType(value); }
        public static implicit operator PrivilegeType(DBNull value) { return new PrivilegeType(null); }
        private PrivilegeType(int? value) : base(value) { }
        public static implicit operator PrivilegeType(int? value) { return new PrivilegeType(value); }
    }
    public class PrlogHrTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrlogHrTypeType(string value) : base(value) { }
        public static implicit operator PrlogHrTypeType(string value) { return new PrlogHrTypeType(value); }
        public static implicit operator PrlogHrTypeType(DBNull value) { return new PrlogHrTypeType(null); }
    }
    public class PrlogPostedFromType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrlogPostedFromType(string value) : base(value) { }
        public static implicit operator PrlogPostedFromType(string value) { return new PrlogPostedFromType(value); }
        public static implicit operator PrlogPostedFromType(DBNull value) { return new PrlogPostedFromType(null); }
    }
    public class PrLogSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrLogSeqType(short? value) : base(value) { }
        public static implicit operator PrLogSeqType(short? value) { return new PrLogSeqType(value); }
        public static implicit operator PrLogSeqType(DBNull value) { return new PrLogSeqType(null); }
        private PrLogSeqType(int? value) : base(value) { }
        public static implicit operator PrLogSeqType(int? value) { return new PrLogSeqType(value); }
    }
    public class ProbableType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 4; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private ProbableType(decimal? value) : base(value) { }
        public static implicit operator ProbableType(decimal? value) { return new ProbableType(value); }
        public static implicit operator ProbableType(DBNull value) { return new ProbableType(null); }
    }
    public class ProbCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProbCodeType(string value) : base(value) { }
        public static implicit operator ProbCodeType(string value) { return new ProbCodeType(value); }
        public static implicit operator ProbCodeType(DBNull value) { return new ProbCodeType(null); }
    }
    public class ProcessFlowType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessFlowType(string value) : base(value) { }
        public static implicit operator ProcessFlowType(string value) { return new ProcessFlowType(value); }
        public static implicit operator ProcessFlowType(DBNull value) { return new ProcessFlowType(null); }
    }
    public class ProcessIndType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessIndType(string value) : base(value) { }
        public static implicit operator ProcessIndType(string value) { return new ProcessIndType(value); }
        public static implicit operator ProcessIndType(DBNull value) { return new ProcessIndType(null); }
    }
    public class ProcessManagerProcessIDType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessManagerProcessIDType(decimal? value) : base(value) { }
        public static implicit operator ProcessManagerProcessIDType(decimal? value) { return new ProcessManagerProcessIDType(value); }
        public static implicit operator ProcessManagerProcessIDType(DBNull value) { return new ProcessManagerProcessIDType(null); }
    }
    public class ProcessManagerProcessStatusType : StringType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessManagerProcessStatusType(string value) : base(value) { }
        public static implicit operator ProcessManagerProcessStatusType(string value) { return new ProcessManagerProcessStatusType(value); }
        public static implicit operator ProcessManagerProcessStatusType(DBNull value) { return new ProcessManagerProcessStatusType(null); }
    }
    public class ProcessManagerProcessTypeType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessManagerProcessTypeType(string value) : base(value) { }
        public static implicit operator ProcessManagerProcessTypeType(string value) { return new ProcessManagerProcessTypeType(value); }
        public static implicit operator ProcessManagerProcessTypeType(DBNull value) { return new ProcessManagerProcessTypeType(null); }
    }
    public class ProcessManagerTaskDescriptionType : StringType
    {
        public override int Length { get => 8000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessManagerTaskDescriptionType(string value) : base(value) { }
        public static implicit operator ProcessManagerTaskDescriptionType(string value) { return new ProcessManagerTaskDescriptionType(value); }
        public static implicit operator ProcessManagerTaskDescriptionType(DBNull value) { return new ProcessManagerTaskDescriptionType(null); }
    }
    public class ProcessManagerTaskNameType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessManagerTaskNameType(string value) : base(value) { }
        public static implicit operator ProcessManagerTaskNameType(string value) { return new ProcessManagerTaskNameType(value); }
        public static implicit operator ProcessManagerTaskNameType(DBNull value) { return new ProcessManagerTaskNameType(null); }
    }
    public class ProcessManagerTaskNumType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessManagerTaskNumType(short? value) : base(value) { }
        public static implicit operator ProcessManagerTaskNumType(short? value) { return new ProcessManagerTaskNumType(value); }
        public static implicit operator ProcessManagerTaskNumType(DBNull value) { return new ProcessManagerTaskNumType(null); }
        private ProcessManagerTaskNumType(int? value) : base(value) { }
        public static implicit operator ProcessManagerTaskNumType(int? value) { return new ProcessManagerTaskNumType(value); }
    }
    public class ProcessManagerTaskStatusType : StringType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessManagerTaskStatusType(string value) : base(value) { }
        public static implicit operator ProcessManagerTaskStatusType(string value) { return new ProcessManagerTaskStatusType(value); }
        public static implicit operator ProcessManagerTaskStatusType(DBNull value) { return new ProcessManagerTaskStatusType(null); }
    }
    public class ProcessManagerTaskTypeType : StringType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessManagerTaskTypeType(string value) : base(value) { }
        public static implicit operator ProcessManagerTaskTypeType(string value) { return new ProcessManagerTaskTypeType(value); }
        public static implicit operator ProcessManagerTaskTypeType(DBNull value) { return new ProcessManagerTaskTypeType(null); }
    }
    public class ProcessMfgBatchSizeMethodType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgBatchSizeMethodType(short? value) : base(value) { }
        public static implicit operator ProcessMfgBatchSizeMethodType(short? value) { return new ProcessMfgBatchSizeMethodType(value); }
        public static implicit operator ProcessMfgBatchSizeMethodType(DBNull value) { return new ProcessMfgBatchSizeMethodType(null); }
        private ProcessMfgBatchSizeMethodType(int? value) : base(value) { }
        public static implicit operator ProcessMfgBatchSizeMethodType(int? value) { return new ProcessMfgBatchSizeMethodType(value); }
    }
    public class ProcessMfgBatchStatusType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgBatchStatusType(short? value) : base(value) { }
        public static implicit operator ProcessMfgBatchStatusType(short? value) { return new ProcessMfgBatchStatusType(value); }
        public static implicit operator ProcessMfgBatchStatusType(DBNull value) { return new ProcessMfgBatchStatusType(null); }
        private ProcessMfgBatchStatusType(int? value) : base(value) { }
        public static implicit operator ProcessMfgBatchStatusType(int? value) { return new ProcessMfgBatchStatusType(value); }
    }
    public class ProcessMfgBoilerplateTextCodeType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgBoilerplateTextCodeType(string value) : base(value) { }
        public static implicit operator ProcessMfgBoilerplateTextCodeType(string value) { return new ProcessMfgBoilerplateTextCodeType(value); }
        public static implicit operator ProcessMfgBoilerplateTextCodeType(DBNull value) { return new ProcessMfgBoilerplateTextCodeType(null); }
    }
    public class ProcessMfgBOMItemSourceType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgBOMItemSourceType(short? value) : base(value) { }
        public static implicit operator ProcessMfgBOMItemSourceType(short? value) { return new ProcessMfgBOMItemSourceType(value); }
        public static implicit operator ProcessMfgBOMItemSourceType(DBNull value) { return new ProcessMfgBOMItemSourceType(null); }
        private ProcessMfgBOMItemSourceType(int? value) : base(value) { }
        public static implicit operator ProcessMfgBOMItemSourceType(int? value) { return new ProcessMfgBOMItemSourceType(value); }
    }
    public class ProcessMfgConversionFactorType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 25; }
        public override byte Scale { get => 13; }
        public override bool Nullable { get => true; }
        private ProcessMfgConversionFactorType(decimal? value) : base(value) { }
        public static implicit operator ProcessMfgConversionFactorType(decimal? value) { return new ProcessMfgConversionFactorType(value); }
        public static implicit operator ProcessMfgConversionFactorType(DBNull value) { return new ProcessMfgConversionFactorType(null); }
    }
    public class ProcessMfgFormulaIdType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgFormulaIdType(string value) : base(value) { }
        public static implicit operator ProcessMfgFormulaIdType(string value) { return new ProcessMfgFormulaIdType(value); }
        public static implicit operator ProcessMfgFormulaIdType(DBNull value) { return new ProcessMfgFormulaIdType(null); }
    }
    public class ProcessMfgFormulaLineTypeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgFormulaLineTypeType(short? value) : base(value) { }
        public static implicit operator ProcessMfgFormulaLineTypeType(short? value) { return new ProcessMfgFormulaLineTypeType(value); }
        public static implicit operator ProcessMfgFormulaLineTypeType(DBNull value) { return new ProcessMfgFormulaLineTypeType(null); }
        private ProcessMfgFormulaLineTypeType(int? value) : base(value) { }
        public static implicit operator ProcessMfgFormulaLineTypeType(int? value) { return new ProcessMfgFormulaLineTypeType(value); }
    }
    public class ProcessMfgFormulaRevisionTypeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgFormulaRevisionTypeType(short? value) : base(value) { }
        public static implicit operator ProcessMfgFormulaRevisionTypeType(short? value) { return new ProcessMfgFormulaRevisionTypeType(value); }
        public static implicit operator ProcessMfgFormulaRevisionTypeType(DBNull value) { return new ProcessMfgFormulaRevisionTypeType(null); }
        private ProcessMfgFormulaRevisionTypeType(int? value) : base(value) { }
        public static implicit operator ProcessMfgFormulaRevisionTypeType(int? value) { return new ProcessMfgFormulaRevisionTypeType(value); }
    }
    public class ProcessMfgFormulaStatusType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgFormulaStatusType(short? value) : base(value) { }
        public static implicit operator ProcessMfgFormulaStatusType(short? value) { return new ProcessMfgFormulaStatusType(value); }
        public static implicit operator ProcessMfgFormulaStatusType(DBNull value) { return new ProcessMfgFormulaStatusType(null); }
        private ProcessMfgFormulaStatusType(int? value) : base(value) { }
        public static implicit operator ProcessMfgFormulaStatusType(int? value) { return new ProcessMfgFormulaStatusType(value); }
    }
    public class ProcessMfgFormulaTypeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgFormulaTypeType(short? value) : base(value) { }
        public static implicit operator ProcessMfgFormulaTypeType(short? value) { return new ProcessMfgFormulaTypeType(value); }
        public static implicit operator ProcessMfgFormulaTypeType(DBNull value) { return new ProcessMfgFormulaTypeType(null); }
        private ProcessMfgFormulaTypeType(int? value) : base(value) { }
        public static implicit operator ProcessMfgFormulaTypeType(int? value) { return new ProcessMfgFormulaTypeType(value); }
    }
    public class ProcessMfgFormulaVersionType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgFormulaVersionType(string value) : base(value) { }
        public static implicit operator ProcessMfgFormulaVersionType(string value) { return new ProcessMfgFormulaVersionType(value); }
        public static implicit operator ProcessMfgFormulaVersionType(DBNull value) { return new ProcessMfgFormulaVersionType(null); }
    }
    public class ProcessMfgLossConstantType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 25; }
        public override byte Scale { get => 13; }
        public override bool Nullable { get => true; }
        private ProcessMfgLossConstantType(decimal? value) : base(value) { }
        public static implicit operator ProcessMfgLossConstantType(decimal? value) { return new ProcessMfgLossConstantType(value); }
        public static implicit operator ProcessMfgLossConstantType(DBNull value) { return new ProcessMfgLossConstantType(null); }
    }
    public class ProcessMfgLotLinkRefTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgLotLinkRefTypeType(string value) : base(value) { }
        public static implicit operator ProcessMfgLotLinkRefTypeType(string value) { return new ProcessMfgLotLinkRefTypeType(value); }
        public static implicit operator ProcessMfgLotLinkRefTypeType(DBNull value) { return new ProcessMfgLotLinkRefTypeType(null); }
    }
    public class ProcessMfgManufacturingClassType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgManufacturingClassType(string value) : base(value) { }
        public static implicit operator ProcessMfgManufacturingClassType(string value) { return new ProcessMfgManufacturingClassType(value); }
        public static implicit operator ProcessMfgManufacturingClassType(DBNull value) { return new ProcessMfgManufacturingClassType(null); }
    }
    public class ProcessMfgManufacturingSpecificationIdType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgManufacturingSpecificationIdType(string value) : base(value) { }
        public static implicit operator ProcessMfgManufacturingSpecificationIdType(string value) { return new ProcessMfgManufacturingSpecificationIdType(value); }
        public static implicit operator ProcessMfgManufacturingSpecificationIdType(DBNull value) { return new ProcessMfgManufacturingSpecificationIdType(null); }
    }
    public class ProcessMfgManufacturingSpecificationVersionType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgManufacturingSpecificationVersionType(string value) : base(value) { }
        public static implicit operator ProcessMfgManufacturingSpecificationVersionType(string value) { return new ProcessMfgManufacturingSpecificationVersionType(value); }
        public static implicit operator ProcessMfgManufacturingSpecificationVersionType(DBNull value) { return new ProcessMfgManufacturingSpecificationVersionType(null); }
    }
    public class ProcessMfgPercentType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 5; }
        public override bool Nullable { get => true; }
        private ProcessMfgPercentType(decimal? value) : base(value) { }
        public static implicit operator ProcessMfgPercentType(decimal? value) { return new ProcessMfgPercentType(value); }
        public static implicit operator ProcessMfgPercentType(DBNull value) { return new ProcessMfgPercentType(null); }
    }
    public class ProcessMfgProductionBatchJobType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgProductionBatchJobType(short? value) : base(value) { }
        public static implicit operator ProcessMfgProductionBatchJobType(short? value) { return new ProcessMfgProductionBatchJobType(value); }
        public static implicit operator ProcessMfgProductionBatchJobType(DBNull value) { return new ProcessMfgProductionBatchJobType(null); }
        private ProcessMfgProductionBatchJobType(int? value) : base(value) { }
        public static implicit operator ProcessMfgProductionBatchJobType(int? value) { return new ProcessMfgProductionBatchJobType(value); }
    }
    public class ProcessMfgProductionIdType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgProductionIdType(string value) : base(value) { }
        public static implicit operator ProcessMfgProductionIdType(string value) { return new ProcessMfgProductionIdType(value); }
        public static implicit operator ProcessMfgProductionIdType(DBNull value) { return new ProcessMfgProductionIdType(null); }
    }
    public class ProcessMfgQuantityType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 25; }
        public override byte Scale { get => 13; }
        public override bool Nullable { get => true; }
        private ProcessMfgQuantityType(decimal? value) : base(value) { }
        public static implicit operator ProcessMfgQuantityType(decimal? value) { return new ProcessMfgQuantityType(value); }
        public static implicit operator ProcessMfgQuantityType(DBNull value) { return new ProcessMfgQuantityType(null); }
    }
    public class ProcessMfgRecallDetLevelType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgRecallDetLevelType(int? value) : base(value) { }
        public static implicit operator ProcessMfgRecallDetLevelType(int? value) { return new ProcessMfgRecallDetLevelType(value); }
        public static implicit operator ProcessMfgRecallDetLevelType(DBNull value) { return new ProcessMfgRecallDetLevelType(null); }
        private ProcessMfgRecallDetLevelType(long? value) : base(value) { }
        public static implicit operator ProcessMfgRecallDetLevelType(long? value) { return new ProcessMfgRecallDetLevelType(value); }
    }
    public class ProcessMfgRecallDetRefLineSufType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgRecallDetRefLineSufType(int? value) : base(value) { }
        public static implicit operator ProcessMfgRecallDetRefLineSufType(int? value) { return new ProcessMfgRecallDetRefLineSufType(value); }
        public static implicit operator ProcessMfgRecallDetRefLineSufType(DBNull value) { return new ProcessMfgRecallDetRefLineSufType(null); }
        private ProcessMfgRecallDetRefLineSufType(long? value) : base(value) { }
        public static implicit operator ProcessMfgRecallDetRefLineSufType(long? value) { return new ProcessMfgRecallDetRefLineSufType(value); }
    }
    public class ProcessMfgRecallDetRefNumIdType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgRecallDetRefNumIdType(string value) : base(value) { }
        public static implicit operator ProcessMfgRecallDetRefNumIdType(string value) { return new ProcessMfgRecallDetRefNumIdType(value); }
        public static implicit operator ProcessMfgRecallDetRefNumIdType(DBNull value) { return new ProcessMfgRecallDetRefNumIdType(null); }
    }
    public class ProcessMfgRecallDetRefTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgRecallDetRefTypeType(string value) : base(value) { }
        public static implicit operator ProcessMfgRecallDetRefTypeType(string value) { return new ProcessMfgRecallDetRefTypeType(value); }
        public static implicit operator ProcessMfgRecallDetRefTypeType(DBNull value) { return new ProcessMfgRecallDetRefTypeType(null); }
    }
    public class ProcessMfgRecallDetReleaseType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgRecallDetReleaseType(short? value) : base(value) { }
        public static implicit operator ProcessMfgRecallDetReleaseType(short? value) { return new ProcessMfgRecallDetReleaseType(value); }
        public static implicit operator ProcessMfgRecallDetReleaseType(DBNull value) { return new ProcessMfgRecallDetReleaseType(null); }
        private ProcessMfgRecallDetReleaseType(int? value) : base(value) { }
        public static implicit operator ProcessMfgRecallDetReleaseType(int? value) { return new ProcessMfgRecallDetReleaseType(value); }
    }
    public class ProcessMfgRecallIDType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgRecallIDType(string value) : base(value) { }
        public static implicit operator ProcessMfgRecallIDType(string value) { return new ProcessMfgRecallIDType(value); }
        public static implicit operator ProcessMfgRecallIDType(DBNull value) { return new ProcessMfgRecallIDType(null); }
    }
    public class ProcessMfgRouteItemSourceType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgRouteItemSourceType(short? value) : base(value) { }
        public static implicit operator ProcessMfgRouteItemSourceType(short? value) { return new ProcessMfgRouteItemSourceType(value); }
        public static implicit operator ProcessMfgRouteItemSourceType(DBNull value) { return new ProcessMfgRouteItemSourceType(null); }
        private ProcessMfgRouteItemSourceType(int? value) : base(value) { }
        public static implicit operator ProcessMfgRouteItemSourceType(int? value) { return new ProcessMfgRouteItemSourceType(value); }
    }
    public class ProcessMfgSizeMethodType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgSizeMethodType(short? value) : base(value) { }
        public static implicit operator ProcessMfgSizeMethodType(short? value) { return new ProcessMfgSizeMethodType(value); }
        public static implicit operator ProcessMfgSizeMethodType(DBNull value) { return new ProcessMfgSizeMethodType(null); }
        private ProcessMfgSizeMethodType(int? value) : base(value) { }
        public static implicit operator ProcessMfgSizeMethodType(int? value) { return new ProcessMfgSizeMethodType(value); }
    }
    public class ProcessMfgSizeMultipleType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 25; }
        public override byte Scale { get => 13; }
        public override bool Nullable { get => true; }
        private ProcessMfgSizeMultipleType(decimal? value) : base(value) { }
        public static implicit operator ProcessMfgSizeMultipleType(decimal? value) { return new ProcessMfgSizeMultipleType(value); }
        public static implicit operator ProcessMfgSizeMultipleType(DBNull value) { return new ProcessMfgSizeMultipleType(null); }
    }
    public class ProcessMfgSubClassType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgSubClassType(string value) : base(value) { }
        public static implicit operator ProcessMfgSubClassType(string value) { return new ProcessMfgSubClassType(value); }
        public static implicit operator ProcessMfgSubClassType(DBNull value) { return new ProcessMfgSubClassType(null); }
    }
    public class ProcessMfgTotalType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 25; }
        public override byte Scale { get => 13; }
        public override bool Nullable { get => true; }
        private ProcessMfgTotalType(decimal? value) : base(value) { }
        public static implicit operator ProcessMfgTotalType(decimal? value) { return new ProcessMfgTotalType(value); }
        public static implicit operator ProcessMfgTotalType(DBNull value) { return new ProcessMfgTotalType(null); }
    }
    public class ProcessMfgUMClassType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgUMClassType(string value) : base(value) { }
        public static implicit operator ProcessMfgUMClassType(string value) { return new ProcessMfgUMClassType(value); }
        public static implicit operator ProcessMfgUMClassType(DBNull value) { return new ProcessMfgUMClassType(null); }
    }
    public class ProcessMfgUMFamilyType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessMfgUMFamilyType(short? value) : base(value) { }
        public static implicit operator ProcessMfgUMFamilyType(short? value) { return new ProcessMfgUMFamilyType(value); }
        public static implicit operator ProcessMfgUMFamilyType(DBNull value) { return new ProcessMfgUMFamilyType(null); }
        private ProcessMfgUMFamilyType(int? value) : base(value) { }
        public static implicit operator ProcessMfgUMFamilyType(int? value) { return new ProcessMfgUMFamilyType(value); }
    }
    public class ProcessMfgVolumeType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 25; }
        public override byte Scale { get => 13; }
        public override bool Nullable { get => true; }
        private ProcessMfgVolumeType(decimal? value) : base(value) { }
        public static implicit operator ProcessMfgVolumeType(decimal? value) { return new ProcessMfgVolumeType(value); }
        public static implicit operator ProcessMfgVolumeType(DBNull value) { return new ProcessMfgVolumeType(null); }
    }
    public class ProcessMfgWeightType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 25; }
        public override byte Scale { get => 13; }
        public override bool Nullable { get => true; }
        private ProcessMfgWeightType(decimal? value) : base(value) { }
        public static implicit operator ProcessMfgWeightType(decimal? value) { return new ProcessMfgWeightType(value); }
        public static implicit operator ProcessMfgWeightType(DBNull value) { return new ProcessMfgWeightType(null); }
    }
    public class ProcessMfgYieldPercentType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 25; }
        public override byte Scale { get => 13; }
        public override bool Nullable { get => true; }
        private ProcessMfgYieldPercentType(decimal? value) : base(value) { }
        public static implicit operator ProcessMfgYieldPercentType(decimal? value) { return new ProcessMfgYieldPercentType(value); }
        public static implicit operator ProcessMfgYieldPercentType(DBNull value) { return new ProcessMfgYieldPercentType(null); }
    }
    public class ProcessReqLineStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessReqLineStatType(string value) : base(value) { }
        public static implicit operator ProcessReqLineStatType(string value) { return new ProcessReqLineStatType(value); }
        public static implicit operator ProcessReqLineStatType(DBNull value) { return new ProcessReqLineStatType(null); }
    }
    public class ProcessReqStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProcessReqStatType(string value) : base(value) { }
        public static implicit operator ProcessReqStatType(string value) { return new ProcessReqStatType(value); }
        public static implicit operator ProcessReqStatType(DBNull value) { return new ProcessReqStatType(null); }
    }
    public class ProdMixPercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private ProdMixPercentType(decimal? value) : base(value) { }
        public static implicit operator ProdMixPercentType(decimal? value) { return new ProdMixPercentType(value); }
        public static implicit operator ProdMixPercentType(DBNull value) { return new ProdMixPercentType(null); }
    }
    public class ProdMixPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProdMixPrefixType(string value) : base(value) { }
        public static implicit operator ProdMixPrefixType(string value) { return new ProdMixPrefixType(value); }
        public static implicit operator ProdMixPrefixType(DBNull value) { return new ProdMixPrefixType(null); }
    }
    public class ProdMixQuantityType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProdMixQuantityType(short? value) : base(value) { }
        public static implicit operator ProdMixQuantityType(short? value) { return new ProdMixQuantityType(value); }
        public static implicit operator ProdMixQuantityType(DBNull value) { return new ProdMixQuantityType(null); }
        private ProdMixQuantityType(int? value) : base(value) { }
        public static implicit operator ProdMixQuantityType(int? value) { return new ProdMixQuantityType(value); }
    }
    public class ProdMixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProdMixType(string value) : base(value) { }
        public static implicit operator ProdMixType(string value) { return new ProdMixType(value); }
        public static implicit operator ProdMixType(DBNull value) { return new ProdMixType(null); }
    }
    public class ProdTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProdTypeType(string value) : base(value) { }
        public static implicit operator ProdTypeType(string value) { return new ProdTypeType(value); }
        public static implicit operator ProdTypeType(DBNull value) { return new ProdTypeType(null); }
    }
    public class ProductCodeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProductCodeType(string value) : base(value) { }
        public static implicit operator ProductCodeType(string value) { return new ProductCodeType(value); }
        public static implicit operator ProductCodeType(DBNull value) { return new ProductCodeType(null); }
    }
    public class ProductNameType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ProductNameType(string value) : base(value) { }
        public static implicit operator ProductNameType(string value) { return new ProductNameType(value); }
        public static implicit operator ProductNameType(DBNull value) { return new ProductNameType(null); }
    }
    public class ProductOverviewType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProductOverviewType(string value) : base(value) { }
        public static implicit operator ProductOverviewType(string value) { return new ProductOverviewType(value); }
        public static implicit operator ProductOverviewType(DBNull value) { return new ProductOverviewType(null); }
    }
    public class ProductVersionType : StringType
    {
        public override int Length { get => 320; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProductVersionType(string value) : base(value) { }
        public static implicit operator ProductVersionType(string value) { return new ProductVersionType(value); }
        public static implicit operator ProductVersionType(DBNull value) { return new ProductVersionType(null); }
    }
    public class ProfessionType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProfessionType(string value) : base(value) { }
        public static implicit operator ProfessionType(string value) { return new ProfessionType(value); }
        public static implicit operator ProfessionType(DBNull value) { return new ProfessionType(null); }
    }
    public class ProfileNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProfileNameType(string value) : base(value) { }
        public static implicit operator ProfileNameType(string value) { return new ProfileNameType(value); }
        public static implicit operator ProfileNameType(DBNull value) { return new ProfileNameType(null); }
    }
    public class ProFormaApprovalStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProFormaApprovalStatusType(string value) : base(value) { }
        public static implicit operator ProFormaApprovalStatusType(string value) { return new ProFormaApprovalStatusType(value); }
        public static implicit operator ProFormaApprovalStatusType(DBNull value) { return new ProFormaApprovalStatusType(null); }
    }
    public class ProFormaDocumentApprovalStampType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProFormaDocumentApprovalStampType(string value) : base(value) { }
        public static implicit operator ProFormaDocumentApprovalStampType(string value) { return new ProFormaDocumentApprovalStampType(value); }
        public static implicit operator ProFormaDocumentApprovalStampType(DBNull value) { return new ProFormaDocumentApprovalStampType(null); }
    }
    public class ProgBillInvoiceFlagType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProgBillInvoiceFlagType(string value) : base(value) { }
        public static implicit operator ProgBillInvoiceFlagType(string value) { return new ProgBillInvoiceFlagType(value); }
        public static implicit operator ProgBillInvoiceFlagType(DBNull value) { return new ProgBillInvoiceFlagType(null); }
    }
    public class ProgBillSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProgBillSeqType(short? value) : base(value) { }
        public static implicit operator ProgBillSeqType(short? value) { return new ProgBillSeqType(value); }
        public static implicit operator ProgBillSeqType(DBNull value) { return new ProgBillSeqType(null); }
        private ProgBillSeqType(int? value) : base(value) { }
        public static implicit operator ProgBillSeqType(int? value) { return new ProgBillSeqType(value); }
    }
    public class ProjBillMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjBillMethodType(string value) : base(value) { }
        public static implicit operator ProjBillMethodType(string value) { return new ProjBillMethodType(value); }
        public static implicit operator ProjBillMethodType(DBNull value) { return new ProjBillMethodType(null); }
    }
    public class ProjBolStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjBolStatusType(string value) : base(value) { }
        public static implicit operator ProjBolStatusType(string value) { return new ProjBolStatusType(value); }
        public static implicit operator ProjBolStatusType(DBNull value) { return new ProjBolStatusType(null); }
    }
    public class ProjCalcAmountType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private ProjCalcAmountType(decimal? value) : base(value) { }
        public static implicit operator ProjCalcAmountType(decimal? value) { return new ProjCalcAmountType(value); }
        public static implicit operator ProjCalcAmountType(DBNull value) { return new ProjCalcAmountType(null); }
    }
    public class ProjCalcPercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 4; }
        public override byte Scale { get => 1; }
        public override bool Nullable { get => true; }
        private ProjCalcPercentType(decimal? value) : base(value) { }
        public static implicit operator ProjCalcPercentType(decimal? value) { return new ProjCalcPercentType(value); }
        public static implicit operator ProjCalcPercentType(DBNull value) { return new ProjCalcPercentType(null); }
    }
    public class ProjchgSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjchgSeqType(int? value) : base(value) { }
        public static implicit operator ProjchgSeqType(int? value) { return new ProjchgSeqType(value); }
        public static implicit operator ProjchgSeqType(DBNull value) { return new ProjchgSeqType(null); }
        private ProjchgSeqType(long? value) : base(value) { }
        public static implicit operator ProjchgSeqType(long? value) { return new ProjchgSeqType(value); }
    }
    public class ProjCostCalcMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjCostCalcMethodType(string value) : base(value) { }
        public static implicit operator ProjCostCalcMethodType(string value) { return new ProjCostCalcMethodType(value); }
        public static implicit operator ProjCostCalcMethodType(DBNull value) { return new ProjCostCalcMethodType(null); }
    }
    public class ProjcostDetailPeriodType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjcostDetailPeriodType(byte? value) : base(value) { }
        public static implicit operator ProjcostDetailPeriodType(byte? value) { return new ProjcostDetailPeriodType(value); }
        public static implicit operator ProjcostDetailPeriodType(DBNull value) { return new ProjcostDetailPeriodType(null); }
        private ProjcostDetailPeriodType(int? value) : base(value) { }
        public static implicit operator ProjcostDetailPeriodType(int? value) { return new ProjcostDetailPeriodType(value); }
    }
    public class ProjCostTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjCostTypeType(string value) : base(value) { }
        public static implicit operator ProjCostTypeType(string value) { return new ProjCostTypeType(value); }
        public static implicit operator ProjCostTypeType(DBNull value) { return new ProjCostTypeType(null); }
    }
    public class ProjDistSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjDistSeqType(int? value) : base(value) { }
        public static implicit operator ProjDistSeqType(int? value) { return new ProjDistSeqType(value); }
        public static implicit operator ProjDistSeqType(DBNull value) { return new ProjDistSeqType(null); }
        private ProjDistSeqType(long? value) : base(value) { }
        public static implicit operator ProjDistSeqType(long? value) { return new ProjDistSeqType(value); }
    }
    public class ProjDurationType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 7; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private ProjDurationType(decimal? value) : base(value) { }
        public static implicit operator ProjDurationType(decimal? value) { return new ProjDurationType(value); }
        public static implicit operator ProjDurationType(DBNull value) { return new ProjDurationType(null); }
    }
    public class ProjectChangeStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjectChangeStatusType(string value) : base(value) { }
        public static implicit operator ProjectChangeStatusType(string value) { return new ProjectChangeStatusType(value); }
        public static implicit operator ProjectChangeStatusType(DBNull value) { return new ProjectChangeStatusType(null); }
    }
    public class ProjectNameType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjectNameType(string value) : base(value) { }
        public static implicit operator ProjectNameType(string value) { return new ProjectNameType(value); }
        public static implicit operator ProjectNameType(DBNull value) { return new ProjectNameType(null); }
    }
    public class ProjectResourceRefNameType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjectResourceRefNameType(string value) : base(value) { }
        public static implicit operator ProjectResourceRefNameType(string value) { return new ProjectResourceRefNameType(value); }
        public static implicit operator ProjectResourceRefNameType(DBNull value) { return new ProjectResourceRefNameType(null); }
    }
    public class ProjectResourceTypeType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjectResourceTypeType(string value) : base(value) { }
        public static implicit operator ProjectResourceTypeType(string value) { return new ProjectResourceTypeType(value); }
        public static implicit operator ProjectResourceTypeType(DBNull value) { return new ProjectResourceTypeType(null); }
    }
    public class ProjFeeRateType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 7; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private ProjFeeRateType(decimal? value) : base(value) { }
        public static implicit operator ProjFeeRateType(decimal? value) { return new ProjFeeRateType(value); }
        public static implicit operator ProjFeeRateType(DBNull value) { return new ProjFeeRateType(null); }
    }
    public class ProjInvFmtType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjInvFmtType(string value) : base(value) { }
        public static implicit operator ProjInvFmtType(string value) { return new ProjInvFmtType(value); }
        public static implicit operator ProjInvFmtType(DBNull value) { return new ProjInvFmtType(null); }
    }
    public class ProjInvHdrTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjInvHdrTypeType(string value) : base(value) { }
        public static implicit operator ProjInvHdrTypeType(string value) { return new ProjInvHdrTypeType(value); }
        public static implicit operator ProjInvHdrTypeType(DBNull value) { return new ProjInvHdrTypeType(null); }
    }
    public class ProjInvMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjInvMethodType(string value) : base(value) { }
        public static implicit operator ProjInvMethodType(string value) { return new ProjInvMethodType(value); }
        public static implicit operator ProjInvMethodType(DBNull value) { return new ProjInvMethodType(null); }
    }
    public class ProjmatlSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjmatlSeqType(int? value) : base(value) { }
        public static implicit operator ProjmatlSeqType(int? value) { return new ProjmatlSeqType(value); }
        public static implicit operator ProjmatlSeqType(DBNull value) { return new ProjmatlSeqType(null); }
        private ProjmatlSeqType(long? value) : base(value) { }
        public static implicit operator ProjmatlSeqType(long? value) { return new ProjmatlSeqType(value); }
    }
    public class ProjMilestoneGroupType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjMilestoneGroupType(string value) : base(value) { }
        public static implicit operator ProjMilestoneGroupType(string value) { return new ProjMilestoneGroupType(value); }
        public static implicit operator ProjMilestoneGroupType(DBNull value) { return new ProjMilestoneGroupType(null); }
    }
    public class ProjMilestoneTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjMilestoneTypeType(string value) : base(value) { }
        public static implicit operator ProjMilestoneTypeType(string value) { return new ProjMilestoneTypeType(value); }
        public static implicit operator ProjMilestoneTypeType(DBNull value) { return new ProjMilestoneTypeType(null); }
    }
    public class ProjMSNotificationTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjMSNotificationTypeType(string value) : base(value) { }
        public static implicit operator ProjMSNotificationTypeType(string value) { return new ProjMSNotificationTypeType(value); }
        public static implicit operator ProjMSNotificationTypeType(DBNull value) { return new ProjMSNotificationTypeType(null); }
    }
    public class ProjMsNumType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjMsNumType(string value) : base(value) { }
        public static implicit operator ProjMsNumType(string value) { return new ProjMsNumType(value); }
        public static implicit operator ProjMsNumType(DBNull value) { return new ProjMsNumType(null); }
    }
    public class ProjMsSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjMsSeqType(int? value) : base(value) { }
        public static implicit operator ProjMsSeqType(int? value) { return new ProjMsSeqType(value); }
        public static implicit operator ProjMsSeqType(DBNull value) { return new ProjMsSeqType(null); }
        private ProjMsSeqType(long? value) : base(value) { }
        public static implicit operator ProjMsSeqType(long? value) { return new ProjMsSeqType(value); }
    }
    public class ProjNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjNumType(string value) : base(value) { }
        public static implicit operator ProjNumType(string value) { return new ProjNumType(value); }
        public static implicit operator ProjNumType(DBNull value) { return new ProjNumType(null); }
    }
    public class ProjPercentCompleteType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private ProjPercentCompleteType(decimal? value) : base(value) { }
        public static implicit operator ProjPercentCompleteType(decimal? value) { return new ProjPercentCompleteType(value); }
        public static implicit operator ProjPercentCompleteType(DBNull value) { return new ProjPercentCompleteType(null); }
    }
    public class ProjPredecessorsType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjPredecessorsType(string value) : base(value) { }
        public static implicit operator ProjPredecessorsType(string value) { return new ProjPredecessorsType(value); }
        public static implicit operator ProjPredecessorsType(DBNull value) { return new ProjPredecessorsType(null); }
    }
    public class ProjPricingType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjPricingType(string value) : base(value) { }
        public static implicit operator ProjPricingType(string value) { return new ProjPricingType(value); }
        public static implicit operator ProjPricingType(DBNull value) { return new ProjPricingType(null); }
    }
    public class ProjProjTypeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjProjTypeType(string value) : base(value) { }
        public static implicit operator ProjProjTypeType(string value) { return new ProjProjTypeType(value); }
        public static implicit operator ProjProjTypeType(DBNull value) { return new ProjProjTypeType(null); }
    }
    public class ProjRateType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 7; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private ProjRateType(decimal? value) : base(value) { }
        public static implicit operator ProjRateType(decimal? value) { return new ProjRateType(value); }
        public static implicit operator ProjRateType(DBNull value) { return new ProjRateType(null); }
    }
    public class ProjRetPercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private ProjRetPercentType(decimal? value) : base(value) { }
        public static implicit operator ProjRetPercentType(decimal? value) { return new ProjRetPercentType(value); }
        public static implicit operator ProjRetPercentType(DBNull value) { return new ProjRetPercentType(null); }
    }
    public class ProjRevCalcMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjRevCalcMethodType(string value) : base(value) { }
        public static implicit operator ProjRevCalcMethodType(string value) { return new ProjRevCalcMethodType(value); }
        public static implicit operator ProjRevCalcMethodType(DBNull value) { return new ProjRevCalcMethodType(null); }
    }
    public class ProjRevSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjRevSeqType(short? value) : base(value) { }
        public static implicit operator ProjRevSeqType(short? value) { return new ProjRevSeqType(value); }
        public static implicit operator ProjRevSeqType(DBNull value) { return new ProjRevSeqType(null); }
        private ProjRevSeqType(int? value) : base(value) { }
        public static implicit operator ProjRevSeqType(int? value) { return new ProjRevSeqType(value); }
    }
    public class ProjShipSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjShipSeqType(int? value) : base(value) { }
        public static implicit operator ProjShipSeqType(int? value) { return new ProjShipSeqType(value); }
        public static implicit operator ProjShipSeqType(DBNull value) { return new ProjShipSeqType(null); }
        private ProjShipSeqType(long? value) : base(value) { }
        public static implicit operator ProjShipSeqType(long? value) { return new ProjShipSeqType(value); }
    }
    public class ProjStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjStatusType(string value) : base(value) { }
        public static implicit operator ProjStatusType(string value) { return new ProjStatusType(value); }
        public static implicit operator ProjStatusType(DBNull value) { return new ProjStatusType(null); }
    }
    public class ProjtaskDurUnitType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjtaskDurUnitType(string value) : base(value) { }
        public static implicit operator ProjtaskDurUnitType(string value) { return new ProjtaskDurUnitType(value); }
        public static implicit operator ProjtaskDurUnitType(DBNull value) { return new ProjtaskDurUnitType(null); }
    }
    public class ProjTransNumType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjTransNumType(decimal? value) : base(value) { }
        public static implicit operator ProjTransNumType(decimal? value) { return new ProjTransNumType(value); }
        public static implicit operator ProjTransNumType(DBNull value) { return new ProjTransNumType(null); }
    }
    public class ProjTransSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjTransSeqType(int? value) : base(value) { }
        public static implicit operator ProjTransSeqType(int? value) { return new ProjTransSeqType(value); }
        public static implicit operator ProjTransSeqType(DBNull value) { return new ProjTransSeqType(null); }
        private ProjTransSeqType(long? value) : base(value) { }
        public static implicit operator ProjTransSeqType(long? value) { return new ProjTransSeqType(value); }
    }
    public class ProjtranTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjtranTypeType(string value) : base(value) { }
        public static implicit operator ProjtranTypeType(string value) { return new ProjtranTypeType(value); }
        public static implicit operator ProjtranTypeType(DBNull value) { return new ProjtranTypeType(null); }
    }
    public class ProjTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjTypeType(string value) : base(value) { }
        public static implicit operator ProjTypeType(string value) { return new ProjTypeType(value); }
        public static implicit operator ProjTypeType(DBNull value) { return new ProjTypeType(null); }
    }
    public class ProjUnitsType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private ProjUnitsType(decimal? value) : base(value) { }
        public static implicit operator ProjUnitsType(decimal? value) { return new ProjUnitsType(value); }
        public static implicit operator ProjUnitsType(DBNull value) { return new ProjUnitsType(null); }
    }
    public class ProjVariancePriorityType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjVariancePriorityType(byte? value) : base(value) { }
        public static implicit operator ProjVariancePriorityType(byte? value) { return new ProjVariancePriorityType(value); }
        public static implicit operator ProjVariancePriorityType(DBNull value) { return new ProjVariancePriorityType(null); }
        private ProjVariancePriorityType(int? value) : base(value) { }
        public static implicit operator ProjVariancePriorityType(int? value) { return new ProjVariancePriorityType(value); }
    }
    public class ProjWbsNumType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjWbsNumType(string value) : base(value) { }
        public static implicit operator ProjWbsNumType(string value) { return new ProjWbsNumType(value); }
        public static implicit operator ProjWbsNumType(DBNull value) { return new ProjWbsNumType(null); }
    }
    public class ProjWipRelMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProjWipRelMethodType(string value) : base(value) { }
        public static implicit operator ProjWipRelMethodType(string value) { return new ProjWipRelMethodType(value); }
        public static implicit operator ProjWipRelMethodType(DBNull value) { return new ProjWipRelMethodType(null); }
    }
    public class PromotionCodeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PromotionCodeType(string value) : base(value) { }
        public static implicit operator PromotionCodeType(string value) { return new PromotionCodeType(value); }
        public static implicit operator PromotionCodeType(DBNull value) { return new PromotionCodeType(null); }
    }
    public class PromotionDiscountType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private PromotionDiscountType(decimal? value) : base(value) { }
        public static implicit operator PromotionDiscountType(decimal? value) { return new PromotionDiscountType(value); }
        public static implicit operator PromotionDiscountType(DBNull value) { return new PromotionDiscountType(null); }
    }
    public class PromotionTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PromotionTypeType(string value) : base(value) { }
        public static implicit operator PromotionTypeType(string value) { return new PromotionTypeType(value); }
        public static implicit operator PromotionTypeType(DBNull value) { return new PromotionTypeType(null); }
    }
    public class PropertyClassType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PropertyClassType(string value) : base(value) { }
        public static implicit operator PropertyClassType(string value) { return new PropertyClassType(value); }
        public static implicit operator PropertyClassType(DBNull value) { return new PropertyClassType(null); }
    }
    public class ProspectIDType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProspectIDType(string value) : base(value) { }
        public static implicit operator ProspectIDType(string value) { return new ProspectIDType(value); }
        public static implicit operator ProspectIDType(DBNull value) { return new ProspectIDType(null); }
    }
    public class ProspectLogRefNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProspectLogRefNumType(string value) : base(value) { }
        public static implicit operator ProspectLogRefNumType(string value) { return new ProspectLogRefNumType(value); }
        public static implicit operator ProspectLogRefNumType(DBNull value) { return new ProspectLogRefNumType(null); }
    }
    public class ProspectLogRefTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProspectLogRefTypeType(string value) : base(value) { }
        public static implicit operator ProspectLogRefTypeType(string value) { return new ProspectLogRefTypeType(value); }
        public static implicit operator ProspectLogRefTypeType(DBNull value) { return new ProspectLogRefTypeType(null); }
    }
    public class ProspectType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProspectType(string value) : base(value) { }
        public static implicit operator ProspectType(string value) { return new ProspectType(value); }
        public static implicit operator ProspectType(DBNull value) { return new ProspectType(null); }
    }
    public class ProxCodeType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProxCodeType(byte? value) : base(value) { }
        public static implicit operator ProxCodeType(byte? value) { return new ProxCodeType(value); }
        public static implicit operator ProxCodeType(DBNull value) { return new ProxCodeType(null); }
        private ProxCodeType(int? value) : base(value) { }
        public static implicit operator ProxCodeType(int? value) { return new ProxCodeType(value); }
    }
    public class ProxDayType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProxDayType(byte? value) : base(value) { }
        public static implicit operator ProxDayType(byte? value) { return new ProxDayType(value); }
        public static implicit operator ProxDayType(DBNull value) { return new ProxDayType(null); }
        private ProxDayType(int? value) : base(value) { }
        public static implicit operator ProxDayType(int? value) { return new ProxDayType(value); }
    }
    public class ProxDiscDayType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProxDiscDayType(byte? value) : base(value) { }
        public static implicit operator ProxDiscDayType(byte? value) { return new ProxDiscDayType(value); }
        public static implicit operator ProxDiscDayType(DBNull value) { return new ProxDiscDayType(null); }
        private ProxDiscDayType(int? value) : base(value) { }
        public static implicit operator ProxDiscDayType(int? value) { return new ProxDiscDayType(value); }
    }
    public class ProxDiscMonthToForwardType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProxDiscMonthToForwardType(short? value) : base(value) { }
        public static implicit operator ProxDiscMonthToForwardType(short? value) { return new ProxDiscMonthToForwardType(value); }
        public static implicit operator ProxDiscMonthToForwardType(DBNull value) { return new ProxDiscMonthToForwardType(null); }
        private ProxDiscMonthToForwardType(int? value) : base(value) { }
        public static implicit operator ProxDiscMonthToForwardType(int? value) { return new ProxDiscMonthToForwardType(value); }
    }
    public class ProxMonthToForwardType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ProxMonthToForwardType(short? value) : base(value) { }
        public static implicit operator ProxMonthToForwardType(short? value) { return new ProxMonthToForwardType(value); }
        public static implicit operator ProxMonthToForwardType(DBNull value) { return new ProxMonthToForwardType(null); }
        private ProxMonthToForwardType(int? value) : base(value) { }
        public static implicit operator ProxMonthToForwardType(int? value) { return new ProxMonthToForwardType(value); }
    }
    public class PrPayFreqsType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrPayFreqsType(string value) : base(value) { }
        public static implicit operator PrPayFreqsType(string value) { return new PrPayFreqsType(value); }
        public static implicit operator PrPayFreqsType(DBNull value) { return new PrPayFreqsType(null); }
    }
    public class PrPayFreqType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrPayFreqType(string value) : base(value) { }
        public static implicit operator PrPayFreqType(string value) { return new PrPayFreqType(value); }
        public static implicit operator PrPayFreqType(DBNull value) { return new PrPayFreqType(null); }
    }
    public class PrPercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 6; }
        public override bool Nullable { get => true; }
        private PrPercentType(decimal? value) : base(value) { }
        public static implicit operator PrPercentType(decimal? value) { return new PrPercentType(value); }
        public static implicit operator PrPercentType(DBNull value) { return new PrPercentType(null); }
    }
    public class PrTaxCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrTaxCodeType(string value) : base(value) { }
        public static implicit operator PrTaxCodeType(string value) { return new PrTaxCodeType(value); }
        public static implicit operator PrTaxCodeType(DBNull value) { return new PrTaxCodeType(null); }
    }
    public class PrTaxRptIdType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrTaxRptIdType(string value) : base(value) { }
        public static implicit operator PrTaxRptIdType(string value) { return new PrTaxRptIdType(value); }
        public static implicit operator PrTaxRptIdType(DBNull value) { return new PrTaxRptIdType(null); }
    }
    public class PrtaxtCalcBasisType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrtaxtCalcBasisType(string value) : base(value) { }
        public static implicit operator PrtaxtCalcBasisType(string value) { return new PrtaxtCalcBasisType(value); }
        public static implicit operator PrtaxtCalcBasisType(DBNull value) { return new PrtaxtCalcBasisType(null); }
    }
    public class PrtaxtTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrtaxtTypeType(string value) : base(value) { }
        public static implicit operator PrtaxtTypeType(string value) { return new PrtaxtTypeType(value); }
        public static implicit operator PrtaxtTypeType(DBNull value) { return new PrtaxtTypeType(null); }
    }
    public class PrtrxdTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrtrxdTypeType(string value) : base(value) { }
        public static implicit operator PrtrxdTypeType(string value) { return new PrtrxdTypeType(value); }
        public static implicit operator PrtrxdTypeType(DBNull value) { return new PrtrxdTypeType(null); }
    }
    public class PrtrxSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrtrxSeqType(short? value) : base(value) { }
        public static implicit operator PrtrxSeqType(short? value) { return new PrtrxSeqType(value); }
        public static implicit operator PrtrxSeqType(DBNull value) { return new PrtrxSeqType(null); }
        private PrtrxSeqType(int? value) : base(value) { }
        public static implicit operator PrtrxSeqType(int? value) { return new PrtrxSeqType(value); }
    }
    public class PrtrxTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrtrxTypeType(string value) : base(value) { }
        public static implicit operator PrtrxTypeType(string value) { return new PrtrxTypeType(value); }
        public static implicit operator PrtrxTypeType(DBNull value) { return new PrtrxTypeType(null); }
    }
    public class PrWithholdingTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrWithholdingTypeType(string value) : base(value) { }
        public static implicit operator PrWithholdingTypeType(string value) { return new PrWithholdingTypeType(value); }
        public static implicit operator PrWithholdingTypeType(DBNull value) { return new PrWithholdingTypeType(null); }
    }
    public class PrYearUnitsType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PrYearUnitsType(int? value) : base(value) { }
        public static implicit operator PrYearUnitsType(int? value) { return new PrYearUnitsType(value); }
        public static implicit operator PrYearUnitsType(DBNull value) { return new PrYearUnitsType(null); }
        private PrYearUnitsType(long? value) : base(value) { }
        public static implicit operator PrYearUnitsType(long? value) { return new PrYearUnitsType(value); }
    }
    public class PrYtdAmountType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private PrYtdAmountType(decimal? value) : base(value) { }
        public static implicit operator PrYtdAmountType(decimal? value) { return new PrYtdAmountType(value); }
        public static implicit operator PrYtdAmountType(DBNull value) { return new PrYtdAmountType(null); }
    }
    public class PsNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PsNumType(string value) : base(value) { }
        public static implicit operator PsNumType(string value) { return new PsNumType(value); }
        public static implicit operator PsNumType(DBNull value) { return new PsNumType(null); }
    }
    public class PsPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PsPrefixType(string value) : base(value) { }
        public static implicit operator PsPrefixType(string value) { return new PsPrefixType(value); }
        public static implicit operator PsPrefixType(DBNull value) { return new PsPrefixType(null); }
    }
    public class PsRelPrefixType : StringType
    {
        public override int Length { get => 32; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PsRelPrefixType(string value) : base(value) { }
        public static implicit operator PsRelPrefixType(string value) { return new PsRelPrefixType(value); }
        public static implicit operator PsRelPrefixType(DBNull value) { return new PsRelPrefixType(null); }
    }
    public class PsStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PsStatusType(string value) : base(value) { }
        public static implicit operator PsStatusType(string value) { return new PsStatusType(value); }
        public static implicit operator PsStatusType(DBNull value) { return new PsStatusType(null); }
    }
    public class PswdConsecIdenticalCharMaxType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PswdConsecIdenticalCharMaxType(short? value) : base(value) { }
        public static implicit operator PswdConsecIdenticalCharMaxType(short? value) { return new PswdConsecIdenticalCharMaxType(value); }
        public static implicit operator PswdConsecIdenticalCharMaxType(DBNull value) { return new PswdConsecIdenticalCharMaxType(null); }
        private PswdConsecIdenticalCharMaxType(int? value) : base(value) { }
        public static implicit operator PswdConsecIdenticalCharMaxType(int? value) { return new PswdConsecIdenticalCharMaxType(value); }
    }
    public class PublicationCategoryType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PublicationCategoryType(string value) : base(value) { }
        public static implicit operator PublicationCategoryType(string value) { return new PublicationCategoryType(value); }
        public static implicit operator PublicationCategoryType(DBNull value) { return new PublicationCategoryType(null); }
    }
    public class PurchasesType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PurchasesType(int? value) : base(value) { }
        public static implicit operator PurchasesType(int? value) { return new PurchasesType(value); }
        public static implicit operator PurchasesType(DBNull value) { return new PurchasesType(null); }
        private PurchasesType(long? value) : base(value) { }
        public static implicit operator PurchasesType(long? value) { return new PurchasesType(value); }
    }
    public class PurchOvhdType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private PurchOvhdType(string value) : base(value) { }
        public static implicit operator PurchOvhdType(string value) { return new PurchOvhdType(value); }
        public static implicit operator PurchOvhdType(DBNull value) { return new PurchOvhdType(null); }
    }
    public class PurExVatType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private PurExVatType(decimal? value) : base(value) { }
        public static implicit operator PurExVatType(decimal? value) { return new PurExVatType(value); }
        public static implicit operator PurExVatType(DBNull value) { return new PurExVatType(null); }
    }
    public class QCAcceptRejectHoldStatusType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCAcceptRejectHoldStatusType(string value) : base(value) { }
        public static implicit operator QCAcceptRejectHoldStatusType(string value) { return new QCAcceptRejectHoldStatusType(value); }
        public static implicit operator QCAcceptRejectHoldStatusType(DBNull value) { return new QCAcceptRejectHoldStatusType(null); }
    }
    public class QCActionCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCActionCodeType(string value) : base(value) { }
        public static implicit operator QCActionCodeType(string value) { return new QCActionCodeType(value); }
        public static implicit operator QCActionCodeType(DBNull value) { return new QCActionCodeType(null); }
    }
    public class QCCauseCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCCauseCodeType(string value) : base(value) { }
        public static implicit operator QCCauseCodeType(string value) { return new QCCauseCodeType(value); }
        public static implicit operator QCCauseCodeType(DBNull value) { return new QCCauseCodeType(null); }
    }
    public class QCCertificateOfConformanceNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCCertificateOfConformanceNumType(string value) : base(value) { }
        public static implicit operator QCCertificateOfConformanceNumType(string value) { return new QCCertificateOfConformanceNumType(value); }
        public static implicit operator QCCertificateOfConformanceNumType(DBNull value) { return new QCCertificateOfConformanceNumType(null); }
    }
    public class QCChangeMaterialRequestNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCChangeMaterialRequestNumType(string value) : base(value) { }
        public static implicit operator QCChangeMaterialRequestNumType(string value) { return new QCChangeMaterialRequestNumType(value); }
        public static implicit operator QCChangeMaterialRequestNumType(DBNull value) { return new QCChangeMaterialRequestNumType(null); }
    }
    public class QCCharType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCCharType(string value) : base(value) { }
        public static implicit operator QCCharType(string value) { return new QCCharType(value); }
        public static implicit operator QCCharType(DBNull value) { return new QCCharType(null); }
    }
    public class QCCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCCodeType(string value) : base(value) { }
        public static implicit operator QCCodeType(string value) { return new QCCodeType(value); }
        public static implicit operator QCCodeType(DBNull value) { return new QCCodeType(null); }
    }
    public class QCCorrectiveActionReportNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCCorrectiveActionReportNumType(string value) : base(value) { }
        public static implicit operator QCCorrectiveActionReportNumType(string value) { return new QCCorrectiveActionReportNumType(value); }
        public static implicit operator QCCorrectiveActionReportNumType(DBNull value) { return new QCCorrectiveActionReportNumType(null); }
    }
    public class QCCustomerComplaintReviewNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCCustomerComplaintReviewNumType(string value) : base(value) { }
        public static implicit operator QCCustomerComplaintReviewNumType(string value) { return new QCCustomerComplaintReviewNumType(value); }
        public static implicit operator QCCustomerComplaintReviewNumType(DBNull value) { return new QCCustomerComplaintReviewNumType(null); }
    }
    public class QCCustStatusType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCCustStatusType(string value) : base(value) { }
        public static implicit operator QCCustStatusType(string value) { return new QCCustStatusType(value); }
        public static implicit operator QCCustStatusType(DBNull value) { return new QCCustStatusType(null); }
    }
    public class QCDaysType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCDaysType(int? value) : base(value) { }
        public static implicit operator QCDaysType(int? value) { return new QCDaysType(value); }
        public static implicit operator QCDaysType(DBNull value) { return new QCDaysType(null); }
        private QCDaysType(long? value) : base(value) { }
        public static implicit operator QCDaysType(long? value) { return new QCDaysType(value); }
    }
    public class QCDescriptionType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCDescriptionType(string value) : base(value) { }
        public static implicit operator QCDescriptionType(string value) { return new QCDescriptionType(value); }
        public static implicit operator QCDescriptionType(DBNull value) { return new QCDescriptionType(null); }
    }
    public class QCDispositionCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCDispositionCodeType(string value) : base(value) { }
        public static implicit operator QCDispositionCodeType(string value) { return new QCDispositionCodeType(value); }
        public static implicit operator QCDispositionCodeType(DBNull value) { return new QCDispositionCodeType(null); }
    }
    public class QCDocNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCDocNumType(string value) : base(value) { }
        public static implicit operator QCDocNumType(string value) { return new QCDocNumType(value); }
        public static implicit operator QCDocNumType(DBNull value) { return new QCDocNumType(null); }
    }
    public class QCDocType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCDocType(string value) : base(value) { }
        public static implicit operator QCDocType(string value) { return new QCDocType(value); }
        public static implicit operator QCDocType(DBNull value) { return new QCDocType(null); }
    }
    public class QCEntityType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCEntityType(string value) : base(value) { }
        public static implicit operator QCEntityType(string value) { return new QCEntityType(value); }
        public static implicit operator QCEntityType(DBNull value) { return new QCEntityType(null); }
    }
    public class QCFailCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCFailCodeType(string value) : base(value) { }
        public static implicit operator QCFailCodeType(string value) { return new QCFailCodeType(value); }
        public static implicit operator QCFailCodeType(DBNull value) { return new QCFailCodeType(null); }
    }
    public class QCGageHistStatusType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCGageHistStatusType(string value) : base(value) { }
        public static implicit operator QCGageHistStatusType(string value) { return new QCGageHistStatusType(value); }
        public static implicit operator QCGageHistStatusType(DBNull value) { return new QCGageHistStatusType(null); }
    }
    public class QCGageStatusType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCGageStatusType(string value) : base(value) { }
        public static implicit operator QCGageStatusType(string value) { return new QCGageStatusType(value); }
        public static implicit operator QCGageStatusType(DBNull value) { return new QCGageStatusType(null); }
    }
    public class QCIntegerType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCIntegerType(int? value) : base(value) { }
        public static implicit operator QCIntegerType(int? value) { return new QCIntegerType(value); }
        public static implicit operator QCIntegerType(DBNull value) { return new QCIntegerType(null); }
        private QCIntegerType(long? value) : base(value) { }
        public static implicit operator QCIntegerType(long? value) { return new QCIntegerType(value); }
    }
    public class QCLongCharType : StringType
    {
        public override int Length { get => 2000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCLongCharType(string value) : base(value) { }
        public static implicit operator QCLongCharType(string value) { return new QCLongCharType(value); }
        public static implicit operator QCLongCharType(DBNull value) { return new QCLongCharType(null); }
    }
    public class QCMaterialReviewReportNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCMaterialReviewReportNumType(string value) : base(value) { }
        public static implicit operator QCMaterialReviewReportNumType(string value) { return new QCMaterialReviewReportNumType(value); }
        public static implicit operator QCMaterialReviewReportNumType(DBNull value) { return new QCMaterialReviewReportNumType(null); }
    }
    public class QCMedCharType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCMedCharType(string value) : base(value) { }
        public static implicit operator QCMedCharType(string value) { return new QCMedCharType(value); }
        public static implicit operator QCMedCharType(DBNull value) { return new QCMedCharType(null); }
    }
    public class QCOpenClosedStatusType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCOpenClosedStatusType(string value) : base(value) { }
        public static implicit operator QCOpenClosedStatusType(string value) { return new QCOpenClosedStatusType(value); }
        public static implicit operator QCOpenClosedStatusType(DBNull value) { return new QCOpenClosedStatusType(null); }
    }
    public class QCPointsType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 8; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private QCPointsType(decimal? value) : base(value) { }
        public static implicit operator QCPointsType(decimal? value) { return new QCPointsType(value); }
        public static implicit operator QCPointsType(DBNull value) { return new QCPointsType(null); }
    }
    public class QCPriorityType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCPriorityType(string value) : base(value) { }
        public static implicit operator QCPriorityType(string value) { return new QCPriorityType(value); }
        public static implicit operator QCPriorityType(DBNull value) { return new QCPriorityType(null); }
    }
    public class QCProcessRefType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCProcessRefType(string value) : base(value) { }
        public static implicit operator QCProcessRefType(string value) { return new QCProcessRefType(value); }
        public static implicit operator QCProcessRefType(DBNull value) { return new QCProcessRefType(null); }
    }
    public class QCProcessRefTypeType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCProcessRefTypeType(string value) : base(value) { }
        public static implicit operator QCProcessRefTypeType(string value) { return new QCProcessRefTypeType(value); }
        public static implicit operator QCProcessRefTypeType(DBNull value) { return new QCProcessRefTypeType(null); }
    }
    public class QCProcessTypeType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCProcessTypeType(string value) : base(value) { }
        public static implicit operator QCProcessTypeType(string value) { return new QCProcessTypeType(value); }
        public static implicit operator QCProcessTypeType(DBNull value) { return new QCProcessTypeType(null); }
    }
    public class QCRcvrNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCRcvrNumType(int? value) : base(value) { }
        public static implicit operator QCRcvrNumType(int? value) { return new QCRcvrNumType(value); }
        public static implicit operator QCRcvrNumType(DBNull value) { return new QCRcvrNumType(null); }
        private QCRcvrNumType(long? value) : base(value) { }
        public static implicit operator QCRcvrNumType(long? value) { return new QCRcvrNumType(value); }
    }
    public class QCReasonCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCReasonCodeType(string value) : base(value) { }
        public static implicit operator QCReasonCodeType(string value) { return new QCReasonCodeType(value); }
        public static implicit operator QCReasonCodeType(DBNull value) { return new QCReasonCodeType(null); }
    }
    public class QCRefLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCRefLineType(short? value) : base(value) { }
        public static implicit operator QCRefLineType(short? value) { return new QCRefLineType(value); }
        public static implicit operator QCRefLineType(DBNull value) { return new QCRefLineType(null); }
        private QCRefLineType(int? value) : base(value) { }
        public static implicit operator QCRefLineType(int? value) { return new QCRefLineType(value); }
    }
    public class QCRefNumType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCRefNumType(string value) : base(value) { }
        public static implicit operator QCRefNumType(string value) { return new QCRefNumType(value); }
        public static implicit operator QCRefNumType(DBNull value) { return new QCRefNumType(null); }
    }
    public class QCRefReleaseType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCRefReleaseType(short? value) : base(value) { }
        public static implicit operator QCRefReleaseType(short? value) { return new QCRefReleaseType(value); }
        public static implicit operator QCRefReleaseType(DBNull value) { return new QCRefReleaseType(null); }
        private QCRefReleaseType(int? value) : base(value) { }
        public static implicit operator QCRefReleaseType(int? value) { return new QCRefReleaseType(value); }
    }
    public class QCRefType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCRefType(string value) : base(value) { }
        public static implicit operator QCRefType(string value) { return new QCRefType(value); }
        public static implicit operator QCRefType(DBNull value) { return new QCRefType(null); }
    }
    public class QCSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCSeqType(int? value) : base(value) { }
        public static implicit operator QCSeqType(int? value) { return new QCSeqType(value); }
        public static implicit operator QCSeqType(DBNull value) { return new QCSeqType(null); }
        private QCSeqType(long? value) : base(value) { }
        public static implicit operator QCSeqType(long? value) { return new QCSeqType(value); }
    }
    public class QCSmallCharType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCSmallCharType(string value) : base(value) { }
        public static implicit operator QCSmallCharType(string value) { return new QCSmallCharType(value); }
        public static implicit operator QCSmallCharType(DBNull value) { return new QCSmallCharType(null); }
    }
    public class QCStatusListingType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCStatusListingType(string value) : base(value) { }
        public static implicit operator QCStatusListingType(string value) { return new QCStatusListingType(value); }
        public static implicit operator QCStatusListingType(DBNull value) { return new QCStatusListingType(null); }
    }
    public class QCTestFamilyType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCTestFamilyType(string value) : base(value) { }
        public static implicit operator QCTestFamilyType(string value) { return new QCTestFamilyType(value); }
        public static implicit operator QCTestFamilyType(DBNull value) { return new QCTestFamilyType(null); }
    }
    public class QCTestSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCTestSeqType(short? value) : base(value) { }
        public static implicit operator QCTestSeqType(short? value) { return new QCTestSeqType(value); }
        public static implicit operator QCTestSeqType(DBNull value) { return new QCTestSeqType(null); }
        private QCTestSeqType(int? value) : base(value) { }
        public static implicit operator QCTestSeqType(int? value) { return new QCTestSeqType(value); }
    }
    public class QCTestTypeType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCTestTypeType(string value) : base(value) { }
        public static implicit operator QCTestTypeType(string value) { return new QCTestTypeType(value); }
        public static implicit operator QCTestTypeType(DBNull value) { return new QCTestTypeType(null); }
    }
    public class QCTopicReviewReportNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCTopicReviewReportNumType(string value) : base(value) { }
        public static implicit operator QCTopicReviewReportNumType(string value) { return new QCTopicReviewReportNumType(value); }
        public static implicit operator QCTopicReviewReportNumType(DBNull value) { return new QCTopicReviewReportNumType(null); }
    }
    public class QCTopicStatusType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCTopicStatusType(string value) : base(value) { }
        public static implicit operator QCTopicStatusType(string value) { return new QCTopicStatusType(value); }
        public static implicit operator QCTopicStatusType(DBNull value) { return new QCTopicStatusType(null); }
    }
    public class QCTransNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCTransNumType(int? value) : base(value) { }
        public static implicit operator QCTransNumType(int? value) { return new QCTransNumType(value); }
        public static implicit operator QCTransNumType(DBNull value) { return new QCTransNumType(null); }
        private QCTransNumType(long? value) : base(value) { }
        public static implicit operator QCTransNumType(long? value) { return new QCTransNumType(value); }
    }
    public class QCTypeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCTypeType(string value) : base(value) { }
        public static implicit operator QCTypeType(string value) { return new QCTypeType(value); }
        public static implicit operator QCTypeType(DBNull value) { return new QCTypeType(null); }
    }
    public class QCVendorRMANumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCVendorRMANumType(int? value) : base(value) { }
        public static implicit operator QCVendorRMANumType(int? value) { return new QCVendorRMANumType(value); }
        public static implicit operator QCVendorRMANumType(DBNull value) { return new QCVendorRMANumType(null); }
        private QCVendorRMANumType(long? value) : base(value) { }
        public static implicit operator QCVendorRMANumType(long? value) { return new QCVendorRMANumType(value); }
    }
    public class QCVendorStatusType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCVendorStatusType(string value) : base(value) { }
        public static implicit operator QCVendorStatusType(string value) { return new QCVendorStatusType(value); }
        public static implicit operator QCVendorStatusType(DBNull value) { return new QCVendorStatusType(null); }
    }
    public class QCVRMAStatusType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QCVRMAStatusType(string value) : base(value) { }
        public static implicit operator QCVRMAStatusType(string value) { return new QCVRMAStatusType(value); }
        public static implicit operator QCVRMAStatusType(DBNull value) { return new QCVRMAStatusType(null); }
    }
    public class QtyCumuType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private QtyCumuType(decimal? value) : base(value) { }
        public static implicit operator QtyCumuType(decimal? value) { return new QtyCumuType(value); }
        public static implicit operator QtyCumuType(DBNull value) { return new QtyCumuType(null); }
    }
    public class QtyPerNoNegType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 18; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private QtyPerNoNegType(decimal? value) : base(value) { }
        public static implicit operator QtyPerNoNegType(decimal? value) { return new QtyPerNoNegType(value); }
        public static implicit operator QtyPerNoNegType(DBNull value) { return new QtyPerNoNegType(null); }
    }
    public class QtyPerType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 18; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private QtyPerType(decimal? value) : base(value) { }
        public static implicit operator QtyPerType(decimal? value) { return new QtyPerType(value); }
        public static implicit operator QtyPerType(DBNull value) { return new QtyPerType(null); }
    }
    public class QtyTotlNoNegType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private QtyTotlNoNegType(decimal? value) : base(value) { }
        public static implicit operator QtyTotlNoNegType(decimal? value) { return new QtyTotlNoNegType(value); }
        public static implicit operator QtyTotlNoNegType(DBNull value) { return new QtyTotlNoNegType(null); }
    }
    public class QtyTotlType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private QtyTotlType(decimal? value) : base(value) { }
        public static implicit operator QtyTotlType(decimal? value) { return new QtyTotlType(value); }
        public static implicit operator QtyTotlType(DBNull value) { return new QtyTotlType(null); }
    }
    public class QtyUnitNoNegType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 19; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private QtyUnitNoNegType(decimal? value) : base(value) { }
        public static implicit operator QtyUnitNoNegType(decimal? value) { return new QtyUnitNoNegType(value); }
        public static implicit operator QtyUnitNoNegType(DBNull value) { return new QtyUnitNoNegType(null); }
    }
    public class QtyUnitType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 19; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private QtyUnitType(decimal? value) : base(value) { }
        public static implicit operator QtyUnitType(decimal? value) { return new QtyUnitType(value); }
        public static implicit operator QtyUnitType(DBNull value) { return new QtyUnitType(null); }
    }
    public class QualCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QualCodeType(string value) : base(value) { }
        public static implicit operator QualCodeType(string value) { return new QualCodeType(value); }
        public static implicit operator QualCodeType(DBNull value) { return new QualCodeType(null); }
    }
    public class QuarterType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QuarterType(byte? value) : base(value) { }
        public static implicit operator QuarterType(byte? value) { return new QuarterType(value); }
        public static implicit operator QuarterType(DBNull value) { return new QuarterType(null); }
        private QuarterType(int? value) : base(value) { }
        public static implicit operator QuarterType(int? value) { return new QuarterType(value); }
    }
    public class QueryDisplaySeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QueryDisplaySeqType(int? value) : base(value) { }
        public static implicit operator QueryDisplaySeqType(int? value) { return new QueryDisplaySeqType(value); }
        public static implicit operator QueryDisplaySeqType(DBNull value) { return new QueryDisplaySeqType(null); }
        private QueryDisplaySeqType(long? value) : base(value) { }
        public static implicit operator QueryDisplaySeqType(long? value) { return new QueryDisplaySeqType(value); }
    }
    public class QueryExpressionType : StringType
    {
        public override int Length { get => 1440; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QueryExpressionType(string value) : base(value) { }
        public static implicit operator QueryExpressionType(string value) { return new QueryExpressionType(value); }
        public static implicit operator QueryExpressionType(DBNull value) { return new QueryExpressionType(null); }
    }
    public class QueryExprTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QueryExprTypeType(string value) : base(value) { }
        public static implicit operator QueryExprTypeType(string value) { return new QueryExprTypeType(value); }
        public static implicit operator QueryExprTypeType(DBNull value) { return new QueryExprTypeType(null); }
    }
    public class QueryFieldListType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QueryFieldListType(string value) : base(value) { }
        public static implicit operator QueryFieldListType(string value) { return new QueryFieldListType(value); }
        public static implicit operator QueryFieldListType(DBNull value) { return new QueryFieldListType(null); }
    }
    public class QueryJoinSeqType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QueryJoinSeqType(byte? value) : base(value) { }
        public static implicit operator QueryJoinSeqType(byte? value) { return new QueryJoinSeqType(value); }
        public static implicit operator QueryJoinSeqType(DBNull value) { return new QueryJoinSeqType(null); }
        private QueryJoinSeqType(int? value) : base(value) { }
        public static implicit operator QueryJoinSeqType(int? value) { return new QueryJoinSeqType(value); }
    }
    public class QueryNameType : StringType
    {
        public override int Length { get => 64; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QueryNameType(string value) : base(value) { }
        public static implicit operator QueryNameType(string value) { return new QueryNameType(value); }
        public static implicit operator QueryNameType(DBNull value) { return new QueryNameType(null); }
    }
    public class QueryOperatorType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QueryOperatorType(string value) : base(value) { }
        public static implicit operator QueryOperatorType(string value) { return new QueryOperatorType(value); }
        public static implicit operator QueryOperatorType(DBNull value) { return new QueryOperatorType(null); }
    }
    public class QueryRecordTypeType : StringType
    {
        public override int Length { get => 10; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QueryRecordTypeType(string value) : base(value) { }
        public static implicit operator QueryRecordTypeType(string value) { return new QueryRecordTypeType(value); }
        public static implicit operator QueryRecordTypeType(DBNull value) { return new QueryRecordTypeType(null); }
    }
    public class QueryRetrieveTypeType : StringType
    {
        public override int Length { get => 10; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QueryRetrieveTypeType(string value) : base(value) { }
        public static implicit operator QueryRetrieveTypeType(string value) { return new QueryRetrieveTypeType(value); }
        public static implicit operator QueryRetrieveTypeType(DBNull value) { return new QueryRetrieveTypeType(null); }
    }
    public class QuerySeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QuerySeqType(int? value) : base(value) { }
        public static implicit operator QuerySeqType(int? value) { return new QuerySeqType(value); }
        public static implicit operator QuerySeqType(DBNull value) { return new QuerySeqType(null); }
        private QuerySeqType(long? value) : base(value) { }
        public static implicit operator QuerySeqType(long? value) { return new QuerySeqType(value); }
    }
    public class QueueNameType : StringType
    {
        public override int Length { get => 512; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QueueNameType(string value) : base(value) { }
        public static implicit operator QueueNameType(string value) { return new QueueNameType(value); }
        public static implicit operator QueueNameType(DBNull value) { return new QueueNameType(null); }
    }
    public class QueueTransportType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private QueueTransportType(string value) : base(value) { }
        public static implicit operator QueueTransportType(string value) { return new QueueTransportType(value); }
        public static implicit operator QueueTransportType(DBNull value) { return new QueueTransportType(null); }
    }
    public class RateCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RateCodeType(string value) : base(value) { }
        public static implicit operator RateCodeType(string value) { return new RateCodeType(value); }
        public static implicit operator RateCodeType(DBNull value) { return new RateCodeType(null); }
    }
    public class RateFactorType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 4; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private RateFactorType(decimal? value) : base(value) { }
        public static implicit operator RateFactorType(decimal? value) { return new RateFactorType(value); }
        public static implicit operator RateFactorType(DBNull value) { return new RateFactorType(null); }
    }
    public class ReaderIdType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReaderIdType(string value) : base(value) { }
        public static implicit operator ReaderIdType(string value) { return new ReaderIdType(value); }
        public static implicit operator ReaderIdType(DBNull value) { return new ReaderIdType(null); }
    }
    public class ReasonClassType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReasonClassType(string value) : base(value) { }
        public static implicit operator ReasonClassType(string value) { return new ReasonClassType(value); }
        public static implicit operator ReasonClassType(DBNull value) { return new ReasonClassType(null); }
    }
    public class ReasonCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReasonCodeType(string value) : base(value) { }
        public static implicit operator ReasonCodeType(string value) { return new ReasonCodeType(value); }
        public static implicit operator ReasonCodeType(DBNull value) { return new ReasonCodeType(null); }
    }
    public class RebateFairValueType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private RebateFairValueType(decimal? value) : base(value) { }
        public static implicit operator RebateFairValueType(decimal? value) { return new RebateFairValueType(value); }
        public static implicit operator RebateFairValueType(DBNull value) { return new RebateFairValueType(null); }
    }
    public class RebateNumberOfPeriodsType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RebateNumberOfPeriodsType(short? value) : base(value) { }
        public static implicit operator RebateNumberOfPeriodsType(short? value) { return new RebateNumberOfPeriodsType(value); }
        public static implicit operator RebateNumberOfPeriodsType(DBNull value) { return new RebateNumberOfPeriodsType(null); }
        private RebateNumberOfPeriodsType(int? value) : base(value) { }
        public static implicit operator RebateNumberOfPeriodsType(int? value) { return new RebateNumberOfPeriodsType(value); }
    }
    public class RebateRedemptionRateType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 8; }
        public override byte Scale { get => 5; }
        public override bool Nullable { get => true; }
        private RebateRedemptionRateType(decimal? value) : base(value) { }
        public static implicit operator RebateRedemptionRateType(decimal? value) { return new RebateRedemptionRateType(value); }
        public static implicit operator RebateRedemptionRateType(DBNull value) { return new RebateRedemptionRateType(null); }
    }
    public class RecallNum : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RecallNum(string value) : base(value) { }
        public static implicit operator RecallNum(string value) { return new RecallNum(value); }
        public static implicit operator RecallNum(DBNull value) { return new RecallNum(null); }
    }
    public class RecordActionType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RecordActionType(string value) : base(value) { }
        public static implicit operator RecordActionType(string value) { return new RecordActionType(value); }
        public static implicit operator RecordActionType(DBNull value) { return new RecordActionType(null); }
    }
    public class RecVatType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private RecVatType(decimal? value) : base(value) { }
        public static implicit operator RecVatType(decimal? value) { return new RecVatType(value); }
        public static implicit operator RecVatType(DBNull value) { return new RecVatType(null); }
    }
    public class RefDayOffsetDurationType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefDayOffsetDurationType(byte? value) : base(value) { }
        public static implicit operator RefDayOffsetDurationType(byte? value) { return new RefDayOffsetDurationType(value); }
        public static implicit operator RefDayOffsetDurationType(DBNull value) { return new RefDayOffsetDurationType(null); }
        private RefDayOffsetDurationType(int? value) : base(value) { }
        public static implicit operator RefDayOffsetDurationType(int? value) { return new RefDayOffsetDurationType(value); }
    }
    public class RefDayOffsetIntervalType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefDayOffsetIntervalType(string value) : base(value) { }
        public static implicit operator RefDayOffsetIntervalType(string value) { return new RefDayOffsetIntervalType(value); }
        public static implicit operator RefDayOffsetIntervalType(DBNull value) { return new RefDayOffsetIntervalType(null); }
    }
    public class RefDayOffsetMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefDayOffsetMethodType(string value) : base(value) { }
        public static implicit operator RefDayOffsetMethodType(string value) { return new RefDayOffsetMethodType(value); }
        public static implicit operator RefDayOffsetMethodType(DBNull value) { return new RefDayOffsetMethodType(null); }
    }
    public class RefDayType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefDayType(string value) : base(value) { }
        public static implicit operator RefDayType(string value) { return new RefDayType(value); }
        public static implicit operator RefDayType(DBNull value) { return new RefDayType(null); }
    }
    public class RefDesignatorType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefDesignatorType(string value) : base(value) { }
        public static implicit operator RefDesignatorType(string value) { return new RefDesignatorType(value); }
        public static implicit operator RefDesignatorType(DBNull value) { return new RefDesignatorType(null); }
    }
    public class ReferenceObjectCaptionType : StringType
    {
        public override int Length { get => 256; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReferenceObjectCaptionType(string value) : base(value) { }
        public static implicit operator ReferenceObjectCaptionType(string value) { return new ReferenceObjectCaptionType(value); }
        public static implicit operator ReferenceObjectCaptionType(DBNull value) { return new ReferenceObjectCaptionType(null); }
    }
    public class ReferenceObjectType : StringType
    {
        public override int Length { get => 256; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReferenceObjectType(string value) : base(value) { }
        public static implicit operator ReferenceObjectType(string value) { return new ReferenceObjectType(value); }
        public static implicit operator ReferenceObjectType(DBNull value) { return new ReferenceObjectType(null); }
    }
    public class ReferenceType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReferenceType(string value) : base(value) { }
        public static implicit operator ReferenceType(string value) { return new ReferenceType(value); }
        public static implicit operator ReferenceType(DBNull value) { return new ReferenceType(null); }
    }
    public class RefNumIdType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefNumIdType(string value) : base(value) { }
        public static implicit operator RefNumIdType(string value) { return new RefNumIdType(value); }
        public static implicit operator RefNumIdType(DBNull value) { return new RefNumIdType(null); }
    }
    public class RefSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefSeqType(int? value) : base(value) { }
        public static implicit operator RefSeqType(int? value) { return new RefSeqType(value); }
        public static implicit operator RefSeqType(DBNull value) { return new RefSeqType(null); }
        private RefSeqType(long? value) : base(value) { }
        public static implicit operator RefSeqType(long? value) { return new RefSeqType(value); }
    }
    public class RefStrType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefStrType(string value) : base(value) { }
        public static implicit operator RefStrType(string value) { return new RefStrType(value); }
        public static implicit operator RefStrType(DBNull value) { return new RefStrType(null); }
    }
    public class RefType : StringType
    {
        public override int Length { get => 28; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefType(string value) : base(value) { }
        public static implicit operator RefType(string value) { return new RefType(value); }
        public static implicit operator RefType(DBNull value) { return new RefType(null); }
    }
    public class RefTypeCEIOPRVType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeCEIOPRVType(string value) : base(value) { }
        public static implicit operator RefTypeCEIOPRVType(string value) { return new RefTypeCEIOPRVType(value); }
        public static implicit operator RefTypeCEIOPRVType(DBNull value) { return new RefTypeCEIOPRVType(null); }
    }
    public class RefTypeCGPVType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeCGPVType(string value) : base(value) { }
        public static implicit operator RefTypeCGPVType(string value) { return new RefTypeCGPVType(value); }
        public static implicit operator RefTypeCGPVType(DBNull value) { return new RefTypeCGPVType(null); }
    }
    public class RefTypeIJKMNOTType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeIJKMNOTType(string value) : base(value) { }
        public static implicit operator RefTypeIJKMNOTType(string value) { return new RefTypeIJKMNOTType(value); }
        public static implicit operator RefTypeIJKMNOTType(DBNull value) { return new RefTypeIJKMNOTType(null); }
    }
    public class RefTypeIJKO : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeIJKO(string value) : base(value) { }
        public static implicit operator RefTypeIJKO(string value) { return new RefTypeIJKO(value); }
        public static implicit operator RefTypeIJKO(DBNull value) { return new RefTypeIJKO(null); }
    }
    public class RefTypeIJKOPRSTWType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeIJKOPRSTWType(string value) : base(value) { }
        public static implicit operator RefTypeIJKOPRSTWType(string value) { return new RefTypeIJKOPRSTWType(value); }
        public static implicit operator RefTypeIJKOPRSTWType(DBNull value) { return new RefTypeIJKOPRSTWType(null); }
    }
    public class RefTypeIJKOTType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeIJKOTType(string value) : base(value) { }
        public static implicit operator RefTypeIJKOTType(string value) { return new RefTypeIJKOTType(value); }
        public static implicit operator RefTypeIJKOTType(DBNull value) { return new RefTypeIJKOTType(null); }
    }
    public class RefTypeIJKPRTType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeIJKPRTType(string value) : base(value) { }
        public static implicit operator RefTypeIJKPRTType(string value) { return new RefTypeIJKPRTType(value); }
        public static implicit operator RefTypeIJKPRTType(DBNull value) { return new RefTypeIJKPRTType(null); }
    }
    public class RefTypeIJOPRSTType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeIJOPRSTType(string value) : base(value) { }
        public static implicit operator RefTypeIJOPRSTType(string value) { return new RefTypeIJOPRSTType(value); }
        public static implicit operator RefTypeIJOPRSTType(DBNull value) { return new RefTypeIJOPRSTType(null); }
    }
    public class RefTypeIJOType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeIJOType(string value) : base(value) { }
        public static implicit operator RefTypeIJOType(string value) { return new RefTypeIJOType(value); }
        public static implicit operator RefTypeIJOType(DBNull value) { return new RefTypeIJOType(null); }
    }
    public class RefTypeIJPRTType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeIJPRTType(string value) : base(value) { }
        public static implicit operator RefTypeIJPRTType(string value) { return new RefTypeIJPRTType(value); }
        public static implicit operator RefTypeIJPRTType(DBNull value) { return new RefTypeIJPRTType(null); }
    }
    public class RefTypeIJPRType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeIJPRType(string value) : base(value) { }
        public static implicit operator RefTypeIJPRType(string value) { return new RefTypeIJPRType(value); }
        public static implicit operator RefTypeIJPRType(DBNull value) { return new RefTypeIJPRType(null); }
    }
    public class RefTypeIKOTType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeIKOTType(string value) : base(value) { }
        public static implicit operator RefTypeIKOTType(string value) { return new RefTypeIKOTType(value); }
        public static implicit operator RefTypeIKOTType(DBNull value) { return new RefTypeIKOTType(null); }
    }
    public class RefTypeJKOType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeJKOType(string value) : base(value) { }
        public static implicit operator RefTypeJKOType(string value) { return new RefTypeJKOType(value); }
        public static implicit operator RefTypeJKOType(DBNull value) { return new RefTypeJKOType(null); }
    }
    public class RefTypeKOTType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeKOTType(string value) : base(value) { }
        public static implicit operator RefTypeKOTType(string value) { return new RefTypeKOTType(value); }
        public static implicit operator RefTypeKOTType(DBNull value) { return new RefTypeKOTType(null); }
    }
    public class RefTypeMNTType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeMNTType(string value) : base(value) { }
        public static implicit operator RefTypeMNTType(string value) { return new RefTypeMNTType(value); }
        public static implicit operator RefTypeMNTType(DBNull value) { return new RefTypeMNTType(null); }
    }
    public class RefTypeOTType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeOTType(string value) : base(value) { }
        public static implicit operator RefTypeOTType(string value) { return new RefTypeOTType(value); }
        public static implicit operator RefTypeOTType(DBNull value) { return new RefTypeOTType(null); }
    }
    public class RefTypeOType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypeOType(string value) : base(value) { }
        public static implicit operator RefTypeOType(string value) { return new RefTypeOType(value); }
        public static implicit operator RefTypeOType(DBNull value) { return new RefTypeOType(null); }
    }
    public class RefTypePTType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RefTypePTType(string value) : base(value) { }
        public static implicit operator RefTypePTType(string value) { return new RefTypePTType(value); }
        public static implicit operator RefTypePTType(DBNull value) { return new RefTypePTType(null); }
    }
    public class ReimbursementMaxMinType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReimbursementMaxMinType(int? value) : base(value) { }
        public static implicit operator ReimbursementMaxMinType(int? value) { return new ReimbursementMaxMinType(value); }
        public static implicit operator ReimbursementMaxMinType(DBNull value) { return new ReimbursementMaxMinType(null); }
        private ReimbursementMaxMinType(long? value) : base(value) { }
        public static implicit operator ReimbursementMaxMinType(long? value) { return new ReimbursementMaxMinType(value); }
    }
    public class RelationshipType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RelationshipType(string value) : base(value) { }
        public static implicit operator RelationshipType(string value) { return new RelationshipType(value); }
        public static implicit operator RelationshipType(DBNull value) { return new RelationshipType(null); }
    }
    public class ReleaseType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReleaseType(short? value) : base(value) { }
        public static implicit operator ReleaseType(short? value) { return new ReleaseType(value); }
        public static implicit operator ReleaseType(DBNull value) { return new ReleaseType(null); }
        private ReleaseType(int? value) : base(value) { }
        public static implicit operator ReleaseType(int? value) { return new ReleaseType(value); }
    }
    public class RepCategoryType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RepCategoryType(string value) : base(value) { }
        public static implicit operator RepCategoryType(string value) { return new RepCategoryType(value); }
        public static implicit operator RepCategoryType(DBNull value) { return new RepCategoryType(null); }
    }
    public class RepIntervalCountType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RepIntervalCountType(short? value) : base(value) { }
        public static implicit operator RepIntervalCountType(short? value) { return new RepIntervalCountType(value); }
        public static implicit operator RepIntervalCountType(DBNull value) { return new RepIntervalCountType(null); }
        private RepIntervalCountType(int? value) : base(value) { }
        public static implicit operator RepIntervalCountType(int? value) { return new RepIntervalCountType(value); }
    }
    public class RepIntervalTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RepIntervalTypeType(string value) : base(value) { }
        public static implicit operator RepIntervalTypeType(string value) { return new RepIntervalTypeType(value); }
        public static implicit operator RepIntervalTypeType(DBNull value) { return new RepIntervalTypeType(null); }
    }
    public class ReplicationOperationType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReplicationOperationType(byte? value) : base(value) { }
        public static implicit operator ReplicationOperationType(byte? value) { return new ReplicationOperationType(value); }
        public static implicit operator ReplicationOperationType(DBNull value) { return new ReplicationOperationType(null); }
        private ReplicationOperationType(int? value) : base(value) { }
        public static implicit operator ReplicationOperationType(int? value) { return new ReplicationOperationType(value); }
    }
    public class ReplTransferTypeType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReplTransferTypeType(byte? value) : base(value) { }
        public static implicit operator ReplTransferTypeType(byte? value) { return new ReplTransferTypeType(value); }
        public static implicit operator ReplTransferTypeType(DBNull value) { return new ReplTransferTypeType(null); }
        private ReplTransferTypeType(int? value) : base(value) { }
        public static implicit operator ReplTransferTypeType(int? value) { return new ReplTransferTypeType(value); }
    }
    public class RepObjectType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RepObjectType(byte? value) : base(value) { }
        public static implicit operator RepObjectType(byte? value) { return new RepObjectType(value); }
        public static implicit operator RepObjectType(DBNull value) { return new RepObjectType(null); }
        private RepObjectType(int? value) : base(value) { }
        public static implicit operator RepObjectType(int? value) { return new RepObjectType(value); }
    }
    public class ReportIdType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReportIdType(string value) : base(value) { }
        public static implicit operator ReportIdType(string value) { return new ReportIdType(value); }
        public static implicit operator ReportIdType(DBNull value) { return new ReportIdType(null); }
    }
    public class ReportLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReportLineType(short? value) : base(value) { }
        public static implicit operator ReportLineType(short? value) { return new ReportLineType(value); }
        public static implicit operator ReportLineType(DBNull value) { return new ReportLineType(null); }
        private ReportLineType(int? value) : base(value) { }
        public static implicit operator ReportLineType(int? value) { return new ReportLineType(value); }
    }
    public class ReportOrientationType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReportOrientationType(string value) : base(value) { }
        public static implicit operator ReportOrientationType(string value) { return new ReportOrientationType(value); }
        public static implicit operator ReportOrientationType(DBNull value) { return new ReportOrientationType(null); }
    }
    public class ReportPaperSizeType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReportPaperSizeType(string value) : base(value) { }
        public static implicit operator ReportPaperSizeType(string value) { return new ReportPaperSizeType(value); }
        public static implicit operator ReportPaperSizeType(DBNull value) { return new ReportPaperSizeType(null); }
    }
    public class ReportServerDeploymentModeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReportServerDeploymentModeType(string value) : base(value) { }
        public static implicit operator ReportServerDeploymentModeType(string value) { return new ReportServerDeploymentModeType(value); }
        public static implicit operator ReportServerDeploymentModeType(DBNull value) { return new ReportServerDeploymentModeType(null); }
    }
    public class ReportTemplateIdType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReportTemplateIdType(short? value) : base(value) { }
        public static implicit operator ReportTemplateIdType(short? value) { return new ReportTemplateIdType(value); }
        public static implicit operator ReportTemplateIdType(DBNull value) { return new ReportTemplateIdType(null); }
        private ReportTemplateIdType(int? value) : base(value) { }
        public static implicit operator ReportTemplateIdType(int? value) { return new ReportTemplateIdType(value); }
    }
    public class ReportTitleType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReportTitleType(string value) : base(value) { }
        public static implicit operator ReportTitleType(string value) { return new ReportTitleType(value); }
        public static implicit operator ReportTitleType(DBNull value) { return new ReportTitleType(null); }
    }
    public class ReportTxtType : StringType
    {
        public override int Length { get => 140; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReportTxtType(string value) : base(value) { }
        public static implicit operator ReportTxtType(string value) { return new ReportTxtType(value); }
        public static implicit operator ReportTxtType(DBNull value) { return new ReportTxtType(null); }
    }
    public class ReqCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReqCodeType(string value) : base(value) { }
        public static implicit operator ReqCodeType(string value) { return new ReqCodeType(value); }
        public static implicit operator ReqCodeType(DBNull value) { return new ReqCodeType(null); }
    }
    public class ReqLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReqLineType(short? value) : base(value) { }
        public static implicit operator ReqLineType(short? value) { return new ReqLineType(value); }
        public static implicit operator ReqLineType(DBNull value) { return new ReqLineType(null); }
        private ReqLineType(int? value) : base(value) { }
        public static implicit operator ReqLineType(int? value) { return new ReqLineType(value); }
    }
    public class ReqNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReqNumType(string value) : base(value) { }
        public static implicit operator ReqNumType(string value) { return new ReqNumType(value); }
        public static implicit operator ReqNumType(DBNull value) { return new ReqNumType(null); }
    }
    public class ResNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ResNumType(int? value) : base(value) { }
        public static implicit operator ResNumType(int? value) { return new ResNumType(value); }
        public static implicit operator ResNumType(DBNull value) { return new ResNumType(null); }
        private ResNumType(long? value) : base(value) { }
        public static implicit operator ResNumType(long? value) { return new ResNumType(value); }
    }
    public class ResourceSequenceType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ResourceSequenceType(short? value) : base(value) { }
        public static implicit operator ResourceSequenceType(short? value) { return new ResourceSequenceType(value); }
        public static implicit operator ResourceSequenceType(DBNull value) { return new ResourceSequenceType(null); }
        private ResourceSequenceType(int? value) : base(value) { }
        public static implicit operator ResourceSequenceType(int? value) { return new ResourceSequenceType(value); }
    }
    public class ResourcesType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ResourcesType(short? value) : base(value) { }
        public static implicit operator ResourcesType(short? value) { return new ResourcesType(value); }
        public static implicit operator ResourcesType(DBNull value) { return new ResourcesType(null); }
        private ResourcesType(int? value) : base(value) { }
        public static implicit operator ResourcesType(int? value) { return new ResourcesType(value); }
    }
    public class ResourceType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ResourceType(string value) : base(value) { }
        public static implicit operator ResourceType(string value) { return new ResourceType(value); }
        public static implicit operator ResourceType(DBNull value) { return new ResourceType(null); }
    }
    public class RestockFeePercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private RestockFeePercentType(decimal? value) : base(value) { }
        public static implicit operator RestockFeePercentType(decimal? value) { return new RestockFeePercentType(value); }
        public static implicit operator RestockFeePercentType(DBNull value) { return new RestockFeePercentType(null); }
    }
    public class RetBoxType : StringType
    {
        public override int Length { get => 36; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RetBoxType(string value) : base(value) { }
        public static implicit operator RetBoxType(string value) { return new RetBoxType(value); }
        public static implicit operator RetBoxType(DBNull value) { return new RetBoxType(null); }
    }
    public class RetCodeType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RetCodeType(string value) : base(value) { }
        public static implicit operator RetCodeType(string value) { return new RetCodeType(value); }
        public static implicit operator RetCodeType(DBNull value) { return new RetCodeType(null); }
    }
    public class RetentionDaysType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RetentionDaysType(short? value) : base(value) { }
        public static implicit operator RetentionDaysType(short? value) { return new RetentionDaysType(value); }
        public static implicit operator RetentionDaysType(DBNull value) { return new RetentionDaysType(null); }
        private RetentionDaysType(int? value) : base(value) { }
        public static implicit operator RetentionDaysType(int? value) { return new RetentionDaysType(value); }
    }
    public class RetireAmountType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 8; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private RetireAmountType(decimal? value) : base(value) { }
        public static implicit operator RetireAmountType(decimal? value) { return new RetireAmountType(value); }
        public static implicit operator RetireAmountType(DBNull value) { return new RetireAmountType(null); }
    }
    public class RetireBasisType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RetireBasisType(string value) : base(value) { }
        public static implicit operator RetireBasisType(string value) { return new RetireBasisType(value); }
        public static implicit operator RetireBasisType(DBNull value) { return new RetireBasisType(null); }
    }
    public class RetireEligibleType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RetireEligibleType(string value) : base(value) { }
        public static implicit operator RetireEligibleType(string value) { return new RetireEligibleType(value); }
        public static implicit operator RetireEligibleType(DBNull value) { return new RetireEligibleType(null); }
    }
    public class RetirePercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private RetirePercentType(decimal? value) : base(value) { }
        public static implicit operator RetirePercentType(decimal? value) { return new RetirePercentType(value); }
        public static implicit operator RetirePercentType(DBNull value) { return new RetirePercentType(null); }
    }
    public class ReviewDaysType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReviewDaysType(short? value) : base(value) { }
        public static implicit operator ReviewDaysType(short? value) { return new ReviewDaysType(value); }
        public static implicit operator ReviewDaysType(DBNull value) { return new ReviewDaysType(null); }
        private ReviewDaysType(int? value) : base(value) { }
        public static implicit operator ReviewDaysType(int? value) { return new ReviewDaysType(value); }
    }
    public class ReviewMonthsType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReviewMonthsType(byte? value) : base(value) { }
        public static implicit operator ReviewMonthsType(byte? value) { return new ReviewMonthsType(value); }
        public static implicit operator ReviewMonthsType(DBNull value) { return new ReviewMonthsType(null); }
        private ReviewMonthsType(int? value) : base(value) { }
        public static implicit operator ReviewMonthsType(int? value) { return new ReviewMonthsType(value); }
    }
    public class ReviewTypeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ReviewTypeType(string value) : base(value) { }
        public static implicit operator ReviewTypeType(string value) { return new ReviewTypeType(value); }
        public static implicit operator ReviewTypeType(DBNull value) { return new ReviewTypeType(null); }
    }
    public class RevisionIDType : StringType
    {
        public override int Length { get => 44; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RevisionIDType(string value) : base(value) { }
        public static implicit operator RevisionIDType(string value) { return new RevisionIDType(value); }
        public static implicit operator RevisionIDType(DBNull value) { return new RevisionIDType(null); }
    }
    public class RevisionNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RevisionNumType(int? value) : base(value) { }
        public static implicit operator RevisionNumType(int? value) { return new RevisionNumType(value); }
        public static implicit operator RevisionNumType(DBNull value) { return new RevisionNumType(null); }
        private RevisionNumType(long? value) : base(value) { }
        public static implicit operator RevisionNumType(long? value) { return new RevisionNumType(value); }
    }
    public class RevisionType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RevisionType(string value) : base(value) { }
        public static implicit operator RevisionType(string value) { return new RevisionType(value); }
        public static implicit operator RevisionType(DBNull value) { return new RevisionType(null); }
    }
    public class RfBellDelayType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfBellDelayType(short? value) : base(value) { }
        public static implicit operator RfBellDelayType(short? value) { return new RfBellDelayType(value); }
        public static implicit operator RfBellDelayType(DBNull value) { return new RfBellDelayType(null); }
        private RfBellDelayType(int? value) : base(value) { }
        public static implicit operator RfBellDelayType(int? value) { return new RfBellDelayType(value); }
    }
    public class RfBrowserFieldSeqType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfBrowserFieldSeqType(byte? value) : base(value) { }
        public static implicit operator RfBrowserFieldSeqType(byte? value) { return new RfBrowserFieldSeqType(value); }
        public static implicit operator RfBrowserFieldSeqType(DBNull value) { return new RfBrowserFieldSeqType(null); }
        private RfBrowserFieldSeqType(int? value) : base(value) { }
        public static implicit operator RfBrowserFieldSeqType(int? value) { return new RfBrowserFieldSeqType(value); }
    }
    public class RfBrowserFieldType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfBrowserFieldType(string value) : base(value) { }
        public static implicit operator RfBrowserFieldType(string value) { return new RfBrowserFieldType(value); }
        public static implicit operator RfBrowserFieldType(DBNull value) { return new RfBrowserFieldType(null); }
    }
    public class RfBrowserNameType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfBrowserNameType(string value) : base(value) { }
        public static implicit operator RfBrowserNameType(string value) { return new RfBrowserNameType(value); }
        public static implicit operator RfBrowserNameType(DBNull value) { return new RfBrowserNameType(null); }
    }
    public class RfButtonLabelType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfButtonLabelType(string value) : base(value) { }
        public static implicit operator RfButtonLabelType(string value) { return new RfButtonLabelType(value); }
        public static implicit operator RfButtonLabelType(DBNull value) { return new RfButtonLabelType(null); }
    }
    public class RfClassSuffixType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfClassSuffixType(string value) : base(value) { }
        public static implicit operator RfClassSuffixType(string value) { return new RfClassSuffixType(value); }
        public static implicit operator RfClassSuffixType(DBNull value) { return new RfClassSuffixType(null); }
    }
    public class RfClassType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfClassType(string value) : base(value) { }
        public static implicit operator RfClassType(string value) { return new RfClassType(value); }
        public static implicit operator RfClassType(DBNull value) { return new RfClassType(null); }
    }
    public class RfCodeType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfCodeType(string value) : base(value) { }
        public static implicit operator RfCodeType(string value) { return new RfCodeType(value); }
        public static implicit operator RfCodeType(DBNull value) { return new RfCodeType(null); }
    }
    public class RfColumnType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfColumnType(byte? value) : base(value) { }
        public static implicit operator RfColumnType(byte? value) { return new RfColumnType(value); }
        public static implicit operator RfColumnType(DBNull value) { return new RfColumnType(null); }
        private RfColumnType(int? value) : base(value) { }
        public static implicit operator RfColumnType(int? value) { return new RfColumnType(value); }
    }
    public class RfDefaultType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfDefaultType(string value) : base(value) { }
        public static implicit operator RfDefaultType(string value) { return new RfDefaultType(value); }
        public static implicit operator RfDefaultType(DBNull value) { return new RfDefaultType(null); }
    }
    public class RfFieldFormatType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfFieldFormatType(string value) : base(value) { }
        public static implicit operator RfFieldFormatType(string value) { return new RfFieldFormatType(value); }
        public static implicit operator RfFieldFormatType(DBNull value) { return new RfFieldFormatType(null); }
    }
    public class RfFieldLabelType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfFieldLabelType(string value) : base(value) { }
        public static implicit operator RfFieldLabelType(string value) { return new RfFieldLabelType(value); }
        public static implicit operator RfFieldLabelType(DBNull value) { return new RfFieldLabelType(null); }
    }
    public class RfFieldNameType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfFieldNameType(string value) : base(value) { }
        public static implicit operator RfFieldNameType(string value) { return new RfFieldNameType(value); }
        public static implicit operator RfFieldNameType(DBNull value) { return new RfFieldNameType(null); }
    }
    public class RfFieldTypeType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfFieldTypeType(string value) : base(value) { }
        public static implicit operator RfFieldTypeType(string value) { return new RfFieldTypeType(value); }
        public static implicit operator RfFieldTypeType(DBNull value) { return new RfFieldTypeType(null); }
    }
    public class RfFieldWidthType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfFieldWidthType(byte? value) : base(value) { }
        public static implicit operator RfFieldWidthType(byte? value) { return new RfFieldWidthType(value); }
        public static implicit operator RfFieldWidthType(DBNull value) { return new RfFieldWidthType(null); }
        private RfFieldWidthType(int? value) : base(value) { }
        public static implicit operator RfFieldWidthType(int? value) { return new RfFieldWidthType(value); }
    }
    public class RfHeightType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfHeightType(byte? value) : base(value) { }
        public static implicit operator RfHeightType(byte? value) { return new RfHeightType(value); }
        public static implicit operator RfHeightType(DBNull value) { return new RfHeightType(null); }
        private RfHeightType(int? value) : base(value) { }
        public static implicit operator RfHeightType(int? value) { return new RfHeightType(value); }
    }
    public class RfJumpFormatType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfJumpFormatType(byte? value) : base(value) { }
        public static implicit operator RfJumpFormatType(byte? value) { return new RfJumpFormatType(value); }
        public static implicit operator RfJumpFormatType(DBNull value) { return new RfJumpFormatType(null); }
        private RfJumpFormatType(int? value) : base(value) { }
        public static implicit operator RfJumpFormatType(int? value) { return new RfJumpFormatType(value); }
    }
    public class RfKeyType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfKeyType(string value) : base(value) { }
        public static implicit operator RfKeyType(string value) { return new RfKeyType(value); }
        public static implicit operator RfKeyType(DBNull value) { return new RfKeyType(null); }
    }
    public class RfLabelFormatType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfLabelFormatType(string value) : base(value) { }
        public static implicit operator RfLabelFormatType(string value) { return new RfLabelFormatType(value); }
        public static implicit operator RfLabelFormatType(DBNull value) { return new RfLabelFormatType(null); }
    }
    public class RfLabelType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfLabelType(string value) : base(value) { }
        public static implicit operator RfLabelType(string value) { return new RfLabelType(value); }
        public static implicit operator RfLabelType(DBNull value) { return new RfLabelType(null); }
    }
    public class RfMenuCodeType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfMenuCodeType(string value) : base(value) { }
        public static implicit operator RfMenuCodeType(string value) { return new RfMenuCodeType(value); }
        public static implicit operator RfMenuCodeType(DBNull value) { return new RfMenuCodeType(null); }
    }
    public class RfMenuItemType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfMenuItemType(string value) : base(value) { }
        public static implicit operator RfMenuItemType(string value) { return new RfMenuItemType(value); }
        public static implicit operator RfMenuItemType(DBNull value) { return new RfMenuItemType(null); }
    }
    public class RfMenuKeyType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfMenuKeyType(string value) : base(value) { }
        public static implicit operator RfMenuKeyType(string value) { return new RfMenuKeyType(value); }
        public static implicit operator RfMenuKeyType(DBNull value) { return new RfMenuKeyType(null); }
    }
    public class RfMenuSelLabelType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfMenuSelLabelType(string value) : base(value) { }
        public static implicit operator RfMenuSelLabelType(string value) { return new RfMenuSelLabelType(value); }
        public static implicit operator RfMenuSelLabelType(DBNull value) { return new RfMenuSelLabelType(null); }
    }
    public class RfMenuTextType : StringType
    {
        public override int Length { get => 146; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfMenuTextType(string value) : base(value) { }
        public static implicit operator RfMenuTextType(string value) { return new RfMenuTextType(value); }
        public static implicit operator RfMenuTextType(DBNull value) { return new RfMenuTextType(null); }
    }
    public class RfPagesType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfPagesType(byte? value) : base(value) { }
        public static implicit operator RfPagesType(byte? value) { return new RfPagesType(value); }
        public static implicit operator RfPagesType(DBNull value) { return new RfPagesType(null); }
        private RfPagesType(int? value) : base(value) { }
        public static implicit operator RfPagesType(int? value) { return new RfPagesType(value); }
    }
    public class RfPageType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfPageType(byte? value) : base(value) { }
        public static implicit operator RfPageType(byte? value) { return new RfPageType(value); }
        public static implicit operator RfPageType(DBNull value) { return new RfPageType(null); }
        private RfPageType(int? value) : base(value) { }
        public static implicit operator RfPageType(int? value) { return new RfPageType(value); }
    }
    public class RFQDistMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RFQDistMethodType(string value) : base(value) { }
        public static implicit operator RFQDistMethodType(string value) { return new RFQDistMethodType(value); }
        public static implicit operator RFQDistMethodType(DBNull value) { return new RFQDistMethodType(null); }
    }
    public class RFQEmailTypeType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RFQEmailTypeType(string value) : base(value) { }
        public static implicit operator RFQEmailTypeType(string value) { return new RFQEmailTypeType(value); }
        public static implicit operator RFQEmailTypeType(DBNull value) { return new RFQEmailTypeType(null); }
    }
    public class RFQFaxMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RFQFaxMethodType(string value) : base(value) { }
        public static implicit operator RFQFaxMethodType(string value) { return new RFQFaxMethodType(value); }
        public static implicit operator RFQFaxMethodType(DBNull value) { return new RFQFaxMethodType(null); }
    }
    public class RFQLineRespStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RFQLineRespStatType(string value) : base(value) { }
        public static implicit operator RFQLineRespStatType(string value) { return new RFQLineRespStatType(value); }
        public static implicit operator RFQLineRespStatType(DBNull value) { return new RFQLineRespStatType(null); }
    }
    public class RFQLineType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RFQLineType(int? value) : base(value) { }
        public static implicit operator RFQLineType(int? value) { return new RFQLineType(value); }
        public static implicit operator RFQLineType(DBNull value) { return new RFQLineType(null); }
        private RFQLineType(long? value) : base(value) { }
        public static implicit operator RFQLineType(long? value) { return new RFQLineType(value); }
    }
    public class RFQNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RFQNumType(string value) : base(value) { }
        public static implicit operator RFQNumType(string value) { return new RFQNumType(value); }
        public static implicit operator RFQNumType(DBNull value) { return new RFQNumType(null); }
    }
    public class RFQProfileType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RFQProfileType(string value) : base(value) { }
        public static implicit operator RFQProfileType(string value) { return new RFQProfileType(value); }
        public static implicit operator RFQProfileType(DBNull value) { return new RFQProfileType(null); }
    }
    public class RFQRefLineSufType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RFQRefLineSufType(int? value) : base(value) { }
        public static implicit operator RFQRefLineSufType(int? value) { return new RFQRefLineSufType(value); }
        public static implicit operator RFQRefLineSufType(DBNull value) { return new RFQRefLineSufType(null); }
        private RFQRefLineSufType(long? value) : base(value) { }
        public static implicit operator RFQRefLineSufType(long? value) { return new RFQRefLineSufType(value); }
    }
    public class RFQRefNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RFQRefNumType(string value) : base(value) { }
        public static implicit operator RFQRefNumType(string value) { return new RFQRefNumType(value); }
        public static implicit operator RFQRefNumType(DBNull value) { return new RFQRefNumType(null); }
    }
    public class RFQRefReleaseType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RFQRefReleaseType(int? value) : base(value) { }
        public static implicit operator RFQRefReleaseType(int? value) { return new RFQRefReleaseType(value); }
        public static implicit operator RFQRefReleaseType(DBNull value) { return new RFQRefReleaseType(null); }
        private RFQRefReleaseType(long? value) : base(value) { }
        public static implicit operator RFQRefReleaseType(long? value) { return new RFQRefReleaseType(value); }
    }
    public class RFQRefTypeIJKRType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RFQRefTypeIJKRType(string value) : base(value) { }
        public static implicit operator RFQRefTypeIJKRType(string value) { return new RFQRefTypeIJKRType(value); }
        public static implicit operator RFQRefTypeIJKRType(DBNull value) { return new RFQRefTypeIJKRType(null); }
    }
    public class RFQSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RFQSeqType(int? value) : base(value) { }
        public static implicit operator RFQSeqType(int? value) { return new RFQSeqType(value); }
        public static implicit operator RFQSeqType(DBNull value) { return new RFQSeqType(null); }
        private RFQSeqType(long? value) : base(value) { }
        public static implicit operator RFQSeqType(long? value) { return new RFQSeqType(value); }
    }
    public class RFQStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RFQStatType(string value) : base(value) { }
        public static implicit operator RFQStatType(string value) { return new RFQStatType(value); }
        public static implicit operator RFQStatType(DBNull value) { return new RFQStatType(null); }
    }
    public class RfRelatedSeqType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfRelatedSeqType(string value) : base(value) { }
        public static implicit operator RfRelatedSeqType(string value) { return new RfRelatedSeqType(value); }
        public static implicit operator RfRelatedSeqType(DBNull value) { return new RfRelatedSeqType(null); }
    }
    public class RfRowType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfRowType(byte? value) : base(value) { }
        public static implicit operator RfRowType(byte? value) { return new RfRowType(value); }
        public static implicit operator RfRowType(DBNull value) { return new RfRowType(null); }
        private RfRowType(int? value) : base(value) { }
        public static implicit operator RfRowType(int? value) { return new RfRowType(value); }
    }
    public class RfScreenNameType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfScreenNameType(string value) : base(value) { }
        public static implicit operator RfScreenNameType(string value) { return new RfScreenNameType(value); }
        public static implicit operator RfScreenNameType(DBNull value) { return new RfScreenNameType(null); }
    }
    public class RfSequenceType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfSequenceType(short? value) : base(value) { }
        public static implicit operator RfSequenceType(short? value) { return new RfSequenceType(value); }
        public static implicit operator RfSequenceType(DBNull value) { return new RfSequenceType(null); }
        private RfSequenceType(int? value) : base(value) { }
        public static implicit operator RfSequenceType(int? value) { return new RfSequenceType(value); }
    }
    public class RfTmModeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfTmModeType(string value) : base(value) { }
        public static implicit operator RfTmModeType(string value) { return new RfTmModeType(value); }
        public static implicit operator RfTmModeType(DBNull value) { return new RfTmModeType(null); }
    }
    public class RfWidthType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RfWidthType(byte? value) : base(value) { }
        public static implicit operator RfWidthType(byte? value) { return new RfWidthType(value); }
        public static implicit operator RfWidthType(DBNull value) { return new RfWidthType(null); }
        private RfWidthType(int? value) : base(value) { }
        public static implicit operator RfWidthType(int? value) { return new RfWidthType(value); }
    }
    public class RmaItemStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RmaItemStatusType(string value) : base(value) { }
        public static implicit operator RmaItemStatusType(string value) { return new RmaItemStatusType(value); }
        public static implicit operator RmaItemStatusType(DBNull value) { return new RmaItemStatusType(null); }
    }
    public class RmaLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RmaLineType(short? value) : base(value) { }
        public static implicit operator RmaLineType(short? value) { return new RmaLineType(value); }
        public static implicit operator RmaLineType(DBNull value) { return new RmaLineType(null); }
        private RmaLineType(int? value) : base(value) { }
        public static implicit operator RmaLineType(int? value) { return new RmaLineType(value); }
    }
    public class RmaNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RmaNumType(string value) : base(value) { }
        public static implicit operator RmaNumType(string value) { return new RmaNumType(value); }
        public static implicit operator RmaNumType(DBNull value) { return new RmaNumType(null); }
    }
    public class RmaStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RmaStatusType(string value) : base(value) { }
        public static implicit operator RmaStatusType(string value) { return new RmaStatusType(value); }
        public static implicit operator RmaStatusType(DBNull value) { return new RmaStatusType(null); }
    }
    public class RMXDispCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RMXDispCodeType(string value) : base(value) { }
        public static implicit operator RMXDispCodeType(string value) { return new RMXDispCodeType(value); }
        public static implicit operator RMXDispCodeType(DBNull value) { return new RMXDispCodeType(null); }
    }
    public class RMXPackLineType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RMXPackLineType(int? value) : base(value) { }
        public static implicit operator RMXPackLineType(int? value) { return new RMXPackLineType(value); }
        public static implicit operator RMXPackLineType(DBNull value) { return new RMXPackLineType(null); }
        private RMXPackLineType(long? value) : base(value) { }
        public static implicit operator RMXPackLineType(long? value) { return new RMXPackLineType(value); }
    }
    public class RMXRefLineSufType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RMXRefLineSufType(int? value) : base(value) { }
        public static implicit operator RMXRefLineSufType(int? value) { return new RMXRefLineSufType(value); }
        public static implicit operator RMXRefLineSufType(DBNull value) { return new RMXRefLineSufType(null); }
        private RMXRefLineSufType(long? value) : base(value) { }
        public static implicit operator RMXRefLineSufType(long? value) { return new RMXRefLineSufType(value); }
    }
    public class RMXRefNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RMXRefNumType(string value) : base(value) { }
        public static implicit operator RMXRefNumType(string value) { return new RMXRefNumType(value); }
        public static implicit operator RMXRefNumType(DBNull value) { return new RMXRefNumType(null); }
    }
    public class RMXRefReleaseType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RMXRefReleaseType(int? value) : base(value) { }
        public static implicit operator RMXRefReleaseType(int? value) { return new RMXRefReleaseType(value); }
        public static implicit operator RMXRefReleaseType(DBNull value) { return new RMXRefReleaseType(null); }
        private RMXRefReleaseType(long? value) : base(value) { }
        public static implicit operator RMXRefReleaseType(long? value) { return new RMXRefReleaseType(value); }
    }
    public class RMXRefTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RMXRefTypeType(string value) : base(value) { }
        public static implicit operator RMXRefTypeType(string value) { return new RMXRefTypeType(value); }
        public static implicit operator RMXRefTypeType(DBNull value) { return new RMXRefTypeType(null); }
    }
    public class RMXRtnTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RMXRtnTypeType(string value) : base(value) { }
        public static implicit operator RMXRtnTypeType(string value) { return new RMXRtnTypeType(value); }
        public static implicit operator RMXRtnTypeType(DBNull value) { return new RMXRtnTypeType(null); }
    }
    public class RMXSeqType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 18; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RMXSeqType(decimal? value) : base(value) { }
        public static implicit operator RMXSeqType(decimal? value) { return new RMXSeqType(value); }
        public static implicit operator RMXSeqType(DBNull value) { return new RMXSeqType(null); }
    }
    public class RMXTransNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RMXTransNumType(int? value) : base(value) { }
        public static implicit operator RMXTransNumType(int? value) { return new RMXTransNumType(value); }
        public static implicit operator RMXTransNumType(DBNull value) { return new RMXTransNumType(null); }
        private RMXTransNumType(long? value) : base(value) { }
        public static implicit operator RMXTransNumType(long? value) { return new RMXTransNumType(value); }
    }
    public class RMXVndRtnTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RMXVndRtnTypeType(string value) : base(value) { }
        public static implicit operator RMXVndRtnTypeType(string value) { return new RMXVndRtnTypeType(value); }
        public static implicit operator RMXVndRtnTypeType(DBNull value) { return new RMXVndRtnTypeType(null); }
    }
    public class RouteType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RouteType(string value) : base(value) { }
        public static implicit operator RouteType(string value) { return new RouteType(value); }
        public static implicit operator RouteType(DBNull value) { return new RouteType(null); }
    }
    public class RowPointer : GuidType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RowPointer(Guid? value) : base(value) { }
        public static implicit operator RowPointer(Guid? value) { return new RowPointer(value); }
        public static implicit operator RowPointer(DBNull value) { return new RowPointer((Guid?)null); }
        private RowPointer(string value) : base(value) { }
        public static implicit operator RowPointer(string value) { return new RowPointer(value); }
    }
    public class RowPointerType : GuidType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RowPointerType(Guid? value) : base(value) { }
        public static implicit operator RowPointerType(Guid? value) { return new RowPointerType(value); }
        public static implicit operator RowPointerType(DBNull value) { return new RowPointerType((Guid?)null); }
        private RowPointerType(string value) : base(value) { }
        public static implicit operator RowPointerType(string value) { return new RowPointerType(value); }
    }
    public class RptDestTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RptDestTypeType(string value) : base(value) { }
        public static implicit operator RptDestTypeType(string value) { return new RptDestTypeType(value); }
        public static implicit operator RptDestTypeType(DBNull value) { return new RptDestTypeType(null); }
    }
    public class RptIdType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RptIdType(string value) : base(value) { }
        public static implicit operator RptIdType(string value) { return new RptIdType(value); }
        public static implicit operator RptIdType(DBNull value) { return new RptIdType(null); }
    }
    public class RptLinesType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RptLinesType(short? value) : base(value) { }
        public static implicit operator RptLinesType(short? value) { return new RptLinesType(value); }
        public static implicit operator RptLinesType(DBNull value) { return new RptLinesType(null); }
        private RptLinesType(int? value) : base(value) { }
        public static implicit operator RptLinesType(int? value) { return new RptLinesType(value); }
    }
    public class RptOptIdType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RptOptIdType(string value) : base(value) { }
        public static implicit operator RptOptIdType(string value) { return new RptOptIdType(value); }
        public static implicit operator RptOptIdType(DBNull value) { return new RptOptIdType(null); }
    }
    public class RptOptValuesCompNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private RptOptValuesCompNameType(string value) : base(value) { }
        public static implicit operator RptOptValuesCompNameType(string value) { return new RptOptValuesCompNameType(value); }
        public static implicit operator RptOptValuesCompNameType(DBNull value) { return new RptOptValuesCompNameType(null); }
    }
    public class RptOptValuesValueType : StringType
    {
        public override int Length { get => 240; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RptOptValuesValueType(string value) : base(value) { }
        public static implicit operator RptOptValuesValueType(string value) { return new RptOptValuesValueType(value); }
        public static implicit operator RptOptValuesValueType(DBNull value) { return new RptOptValuesValueType(null); }
    }
    public class RsvdNumType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RsvdNumType(decimal? value) : base(value) { }
        public static implicit operator RsvdNumType(decimal? value) { return new RsvdNumType(value); }
        public static implicit operator RsvdNumType(DBNull value) { return new RsvdNumType(null); }
    }
    public class RunBasisLbrType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RunBasisLbrType(string value) : base(value) { }
        public static implicit operator RunBasisLbrType(string value) { return new RunBasisLbrType(value); }
        public static implicit operator RunBasisLbrType(DBNull value) { return new RunBasisLbrType(null); }
    }
    public class RunBasisMchType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RunBasisMchType(string value) : base(value) { }
        public static implicit operator RunBasisMchType(string value) { return new RunBasisMchType(value); }
        public static implicit operator RunBasisMchType(DBNull value) { return new RunBasisMchType(null); }
    }
    public class RunBasisType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RunBasisType(string value) : base(value) { }
        public static implicit operator RunBasisType(string value) { return new RunBasisType(value); }
        public static implicit operator RunBasisType(DBNull value) { return new RunBasisType(null); }
    }
    public class RunHoursPiecesType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 15; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private RunHoursPiecesType(decimal? value) : base(value) { }
        public static implicit operator RunHoursPiecesType(decimal? value) { return new RunHoursPiecesType(value); }
        public static implicit operator RunHoursPiecesType(DBNull value) { return new RunHoursPiecesType(null); }
    }
    public class RunHoursType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 5; }
        public override bool Nullable { get => true; }
        private RunHoursType(decimal? value) : base(value) { }
        public static implicit operator RunHoursType(decimal? value) { return new RunHoursType(value); }
        public static implicit operator RunHoursType(DBNull value) { return new RunHoursType(null); }
    }
    public class RunRateType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private RunRateType(decimal? value) : base(value) { }
        public static implicit operator RunRateType(decimal? value) { return new RunRateType(value); }
        public static implicit operator RunRateType(DBNull value) { return new RunRateType(null); }
    }
    public class RunTicksType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 19; }
        public override byte Scale { get => 10; }
        public override bool Nullable { get => true; }
        private RunTicksType(decimal? value) : base(value) { }
        public static implicit operator RunTicksType(decimal? value) { return new RunTicksType(value); }
        public static implicit operator RunTicksType(DBNull value) { return new RunTicksType(null); }
    }
    public class RuntimeInterceptNameType : StringType
    {
        public override int Length { get => 400; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private RuntimeInterceptNameType(string value) : base(value) { }
        public static implicit operator RuntimeInterceptNameType(string value) { return new RuntimeInterceptNameType(value); }
        public static implicit operator RuntimeInterceptNameType(DBNull value) { return new RuntimeInterceptNameType(null); }
    }
    public class SafeHarborCodeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SafeHarborCodeType(string value) : base(value) { }
        public static implicit operator SafeHarborCodeType(string value) { return new SafeHarborCodeType(value); }
        public static implicit operator SafeHarborCodeType(DBNull value) { return new SafeHarborCodeType(null); }
    }
    public class SafetyStockMultiplierType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 4; }
        public override bool Nullable { get => true; }
        private SafetyStockMultiplierType(decimal? value) : base(value) { }
        public static implicit operator SafetyStockMultiplierType(decimal? value) { return new SafetyStockMultiplierType(value); }
        public static implicit operator SafetyStockMultiplierType(DBNull value) { return new SafetyStockMultiplierType(null); }
    }
    public class SafetyStockPercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 1; }
        public override bool Nullable { get => true; }
        private SafetyStockPercentType(decimal? value) : base(value) { }
        public static implicit operator SafetyStockPercentType(decimal? value) { return new SafetyStockPercentType(value); }
        public static implicit operator SafetyStockPercentType(DBNull value) { return new SafetyStockPercentType(null); }
    }
    public class SafetyStockRuleType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SafetyStockRuleType(short? value) : base(value) { }
        public static implicit operator SafetyStockRuleType(short? value) { return new SafetyStockRuleType(value); }
        public static implicit operator SafetyStockRuleType(DBNull value) { return new SafetyStockRuleType(null); }
        private SafetyStockRuleType(int? value) : base(value) { }
        public static implicit operator SafetyStockRuleType(int? value) { return new SafetyStockRuleType(value); }
    }
    public class SalaryChangePercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private SalaryChangePercentType(decimal? value) : base(value) { }
        public static implicit operator SalaryChangePercentType(decimal? value) { return new SalaryChangePercentType(value); }
        public static implicit operator SalaryChangePercentType(DBNull value) { return new SalaryChangePercentType(null); }
    }
    public class SalePricePercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private SalePricePercentType(decimal? value) : base(value) { }
        public static implicit operator SalePricePercentType(decimal? value) { return new SalePricePercentType(value); }
        public static implicit operator SalePricePercentType(DBNull value) { return new SalePricePercentType(null); }
    }
    public class SalesExVatType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private SalesExVatType(decimal? value) : base(value) { }
        public static implicit operator SalesExVatType(decimal? value) { return new SalesExVatType(value); }
        public static implicit operator SalesExVatType(DBNull value) { return new SalesExVatType(null); }
    }
    public class SalesForecastIdType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SalesForecastIdType(string value) : base(value) { }
        public static implicit operator SalesForecastIdType(string value) { return new SalesForecastIdType(value); }
        public static implicit operator SalesForecastIdType(DBNull value) { return new SalesForecastIdType(null); }
    }
    public class SalesForecastStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SalesForecastStatusType(string value) : base(value) { }
        public static implicit operator SalesForecastStatusType(string value) { return new SalesForecastStatusType(value); }
        public static implicit operator SalesForecastStatusType(DBNull value) { return new SalesForecastStatusType(null); }
    }
    public class SalesPeriodIdType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SalesPeriodIdType(string value) : base(value) { }
        public static implicit operator SalesPeriodIdType(string value) { return new SalesPeriodIdType(value); }
        public static implicit operator SalesPeriodIdType(DBNull value) { return new SalesPeriodIdType(null); }
    }
    public class SalesPeriodStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SalesPeriodStatusType(string value) : base(value) { }
        public static implicit operator SalesPeriodStatusType(string value) { return new SalesPeriodStatusType(value); }
        public static implicit operator SalesPeriodStatusType(DBNull value) { return new SalesPeriodStatusType(null); }
    }
    public class SalesTeamIDType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SalesTeamIDType(string value) : base(value) { }
        public static implicit operator SalesTeamIDType(string value) { return new SalesTeamIDType(value); }
        public static implicit operator SalesTeamIDType(DBNull value) { return new SalesTeamIDType(null); }
    }
    public class SaleSumBucketType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SaleSumBucketType(byte? value) : base(value) { }
        public static implicit operator SaleSumBucketType(byte? value) { return new SaleSumBucketType(value); }
        public static implicit operator SaleSumBucketType(DBNull value) { return new SaleSumBucketType(null); }
        private SaleSumBucketType(int? value) : base(value) { }
        public static implicit operator SaleSumBucketType(int? value) { return new SaleSumBucketType(value); }
    }
    public class SalesVatType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private SalesVatType(decimal? value) : base(value) { }
        public static implicit operator SalesVatType(decimal? value) { return new SalesVatType(value); }
        public static implicit operator SalesVatType(DBNull value) { return new SalesVatType(null); }
    }
    public class SalPeriodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SalPeriodType(string value) : base(value) { }
        public static implicit operator SalPeriodType(string value) { return new SalPeriodType(value); }
        public static implicit operator SalPeriodType(DBNull value) { return new SalPeriodType(null); }
    }
    public class ScalDurHoursType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 4; }
        public override byte Scale { get => 1; }
        public override bool Nullable { get => true; }
        private ScalDurHoursType(decimal? value) : base(value) { }
        public static implicit operator ScalDurHoursType(decimal? value) { return new ScalDurHoursType(value); }
        public static implicit operator ScalDurHoursType(DBNull value) { return new ScalDurHoursType(null); }
    }
    public class SchedBNumType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SchedBNumType(string value) : base(value) { }
        public static implicit operator SchedBNumType(string value) { return new SchedBNumType(value); }
        public static implicit operator SchedBNumType(DBNull value) { return new SchedBNumType(null); }
    }
    public class SchedDriverType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private SchedDriverType(string value) : base(value) { }
        public static implicit operator SchedDriverType(string value) { return new SchedDriverType(value); }
        public static implicit operator SchedDriverType(DBNull value) { return new SchedDriverType(null); }
    }
    public class SchedFreqIntervalType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SchedFreqIntervalType(byte? value) : base(value) { }
        public static implicit operator SchedFreqIntervalType(byte? value) { return new SchedFreqIntervalType(value); }
        public static implicit operator SchedFreqIntervalType(DBNull value) { return new SchedFreqIntervalType(null); }
        private SchedFreqIntervalType(int? value) : base(value) { }
        public static implicit operator SchedFreqIntervalType(int? value) { return new SchedFreqIntervalType(value); }
    }
    public class SchedFreqRecurrenceFactorType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SchedFreqRecurrenceFactorType(int? value) : base(value) { }
        public static implicit operator SchedFreqRecurrenceFactorType(int? value) { return new SchedFreqRecurrenceFactorType(value); }
        public static implicit operator SchedFreqRecurrenceFactorType(DBNull value) { return new SchedFreqRecurrenceFactorType(null); }
        private SchedFreqRecurrenceFactorType(long? value) : base(value) { }
        public static implicit operator SchedFreqRecurrenceFactorType(long? value) { return new SchedFreqRecurrenceFactorType(value); }
    }
    public class SchedFreqRelativeIntervalType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SchedFreqRelativeIntervalType(byte? value) : base(value) { }
        public static implicit operator SchedFreqRelativeIntervalType(byte? value) { return new SchedFreqRelativeIntervalType(value); }
        public static implicit operator SchedFreqRelativeIntervalType(DBNull value) { return new SchedFreqRelativeIntervalType(null); }
        private SchedFreqRelativeIntervalType(int? value) : base(value) { }
        public static implicit operator SchedFreqRelativeIntervalType(int? value) { return new SchedFreqRelativeIntervalType(value); }
    }
    public class SchedFreqSubDayIntervalType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SchedFreqSubDayIntervalType(int? value) : base(value) { }
        public static implicit operator SchedFreqSubDayIntervalType(int? value) { return new SchedFreqSubDayIntervalType(value); }
        public static implicit operator SchedFreqSubDayIntervalType(DBNull value) { return new SchedFreqSubDayIntervalType(null); }
        private SchedFreqSubDayIntervalType(long? value) : base(value) { }
        public static implicit operator SchedFreqSubDayIntervalType(long? value) { return new SchedFreqSubDayIntervalType(value); }
    }
    public class SchedFreqSubDayTypeType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SchedFreqSubDayTypeType(byte? value) : base(value) { }
        public static implicit operator SchedFreqSubDayTypeType(byte? value) { return new SchedFreqSubDayTypeType(value); }
        public static implicit operator SchedFreqSubDayTypeType(DBNull value) { return new SchedFreqSubDayTypeType(null); }
        private SchedFreqSubDayTypeType(int? value) : base(value) { }
        public static implicit operator SchedFreqSubDayTypeType(int? value) { return new SchedFreqSubDayTypeType(value); }
    }
    public class SchedFreqTypeType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SchedFreqTypeType(byte? value) : base(value) { }
        public static implicit operator SchedFreqTypeType(byte? value) { return new SchedFreqTypeType(value); }
        public static implicit operator SchedFreqTypeType(DBNull value) { return new SchedFreqTypeType(null); }
        private SchedFreqTypeType(int? value) : base(value) { }
        public static implicit operator SchedFreqTypeType(int? value) { return new SchedFreqTypeType(value); }
    }
    public class SchedHoursType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 7; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private SchedHoursType(decimal? value) : base(value) { }
        public static implicit operator SchedHoursType(decimal? value) { return new SchedHoursType(value); }
        public static implicit operator SchedHoursType(DBNull value) { return new SchedHoursType(null); }
    }
    public class SchedMethodType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SchedMethodType(string value) : base(value) { }
        public static implicit operator SchedMethodType(string value) { return new SchedMethodType(value); }
        public static implicit operator SchedMethodType(DBNull value) { return new SchedMethodType(null); }
    }
    public class SchedSequenceType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SchedSequenceType(string value) : base(value) { }
        public static implicit operator SchedSequenceType(string value) { return new SchedSequenceType(value); }
        public static implicit operator SchedSequenceType(DBNull value) { return new SchedSequenceType(null); }
    }
    public class ScheduleDaysType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private ScheduleDaysType(short? value) : base(value) { }
        public static implicit operator ScheduleDaysType(short? value) { return new ScheduleDaysType(value); }
        public static implicit operator ScheduleDaysType(DBNull value) { return new ScheduleDaysType(null); }
        private ScheduleDaysType(int? value) : base(value) { }
        public static implicit operator ScheduleDaysType(int? value) { return new ScheduleDaysType(value); }
    }
    public class SchemaLevelType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private SchemaLevelType(int? value) : base(value) { }
        public static implicit operator SchemaLevelType(int? value) { return new SchemaLevelType(value); }
        public static implicit operator SchemaLevelType(DBNull value) { return new SchemaLevelType(null); }
        private SchemaLevelType(long? value) : base(value) { }
        public static implicit operator SchemaLevelType(long? value) { return new SchemaLevelType(value); }
    }
    public class SchemaNameType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => false; }
        private SchemaNameType(string value) : base(value) { }
        public static implicit operator SchemaNameType(string value) { return new SchemaNameType(value); }
        public static implicit operator SchemaNameType(DBNull value) { return new SchemaNameType(null); }
    }
    public class SchToleranceType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 4; }
        public override bool Nullable { get => true; }
        private SchToleranceType(decimal? value) : base(value) { }
        public static implicit operator SchToleranceType(decimal? value) { return new SchToleranceType(value); }
        public static implicit operator SchToleranceType(DBNull value) { return new SchToleranceType(null); }
    }
    public class ScopeNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ScopeNameType(string value) : base(value) { }
        public static implicit operator ScopeNameType(string value) { return new ScopeNameType(value); }
        public static implicit operator ScopeNameType(DBNull value) { return new ScopeNameType(null); }
    }
    public class ScrapFactorType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 4; }
        public override bool Nullable { get => true; }
        private ScrapFactorType(decimal? value) : base(value) { }
        public static implicit operator ScrapFactorType(decimal? value) { return new ScrapFactorType(value); }
        public static implicit operator ScrapFactorType(DBNull value) { return new ScrapFactorType(null); }
    }
    public class SearchGroupType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SearchGroupType(string value) : base(value) { }
        public static implicit operator SearchGroupType(string value) { return new SearchGroupType(value); }
        public static implicit operator SearchGroupType(DBNull value) { return new SearchGroupType(null); }
    }
    public class SearchItemNameType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SearchItemNameType(string value) : base(value) { }
        public static implicit operator SearchItemNameType(string value) { return new SearchItemNameType(value); }
        public static implicit operator SearchItemNameType(DBNull value) { return new SearchItemNameType(null); }
    }
    public class SecurityFunctionType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SecurityFunctionType(string value) : base(value) { }
        public static implicit operator SecurityFunctionType(string value) { return new SecurityFunctionType(value); }
        public static implicit operator SecurityFunctionType(DBNull value) { return new SecurityFunctionType(null); }
    }
    public class SepaCreditorIdType : StringType
    {
        public override int Length { get => 70; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SepaCreditorIdType(string value) : base(value) { }
        public static implicit operator SepaCreditorIdType(string value) { return new SepaCreditorIdType(value); }
        public static implicit operator SepaCreditorIdType(DBNull value) { return new SepaCreditorIdType(null); }
    }
    public class SepaMandateRefType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SepaMandateRefType(string value) : base(value) { }
        public static implicit operator SepaMandateRefType(string value) { return new SepaMandateRefType(value); }
        public static implicit operator SepaMandateRefType(DBNull value) { return new SepaMandateRefType(null); }
    }
    public class SequenceType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SequenceType(decimal? value) : base(value) { }
        public static implicit operator SequenceType(decimal? value) { return new SequenceType(value); }
        public static implicit operator SequenceType(DBNull value) { return new SequenceType(null); }
    }
    public class SerialLengthType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SerialLengthType(byte? value) : base(value) { }
        public static implicit operator SerialLengthType(byte? value) { return new SerialLengthType(value); }
        public static implicit operator SerialLengthType(DBNull value) { return new SerialLengthType(null); }
        private SerialLengthType(int? value) : base(value) { }
        public static implicit operator SerialLengthType(int? value) { return new SerialLengthType(value); }
    }
    public class SerialPrefixType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SerialPrefixType(string value) : base(value) { }
        public static implicit operator SerialPrefixType(string value) { return new SerialPrefixType(value); }
        public static implicit operator SerialPrefixType(DBNull value) { return new SerialPrefixType(null); }
    }
    public class SerialStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SerialStatusType(string value) : base(value) { }
        public static implicit operator SerialStatusType(string value) { return new SerialStatusType(value); }
        public static implicit operator SerialStatusType(DBNull value) { return new SerialStatusType(null); }
    }
    public class SerKeyType : StringType
    {
        public override int Length { get => 32; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SerKeyType(string value) : base(value) { }
        public static implicit operator SerKeyType(string value) { return new SerKeyType(value); }
        public static implicit operator SerKeyType(DBNull value) { return new SerKeyType(null); }
    }
    public class SerNumType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SerNumType(string value) : base(value) { }
        public static implicit operator SerNumType(string value) { return new SerNumType(value); }
        public static implicit operator SerNumType(DBNull value) { return new SerNumType(null); }
    }
    public class ServiceDurationType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 7; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private ServiceDurationType(decimal? value) : base(value) { }
        public static implicit operator ServiceDurationType(decimal? value) { return new ServiceDurationType(value); }
        public static implicit operator ServiceDurationType(DBNull value) { return new ServiceDurationType(null); }
    }
    public class ServiceDurationUnitType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ServiceDurationUnitType(string value) : base(value) { }
        public static implicit operator ServiceDurationUnitType(string value) { return new ServiceDurationUnitType(value); }
        public static implicit operator ServiceDurationUnitType(DBNull value) { return new ServiceDurationUnitType(null); }
    }
    public class SessionTypeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SessionTypeType(short? value) : base(value) { }
        public static implicit operator SessionTypeType(short? value) { return new SessionTypeType(value); }
        public static implicit operator SessionTypeType(DBNull value) { return new SessionTypeType(null); }
        private SessionTypeType(int? value) : base(value) { }
        public static implicit operator SessionTypeType(int? value) { return new SessionTypeType(value); }
    }
    public class SetupGroupType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SetupGroupType(string value) : base(value) { }
        public static implicit operator SetupGroupType(string value) { return new SetupGroupType(value); }
        public static implicit operator SetupGroupType(DBNull value) { return new SetupGroupType(null); }
    }
    public class SetupHoursType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private SetupHoursType(decimal? value) : base(value) { }
        public static implicit operator SetupHoursType(decimal? value) { return new SetupHoursType(value); }
        public static implicit operator SetupHoursType(DBNull value) { return new SetupHoursType(null); }
    }
    public class SexType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SexType(string value) : base(value) { }
        public static implicit operator SexType(string value) { return new SexType(value); }
        public static implicit operator SexType(DBNull value) { return new SexType(null); }
    }
    public class SfModeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SfModeType(string value) : base(value) { }
        public static implicit operator SfModeType(string value) { return new SfModeType(value); }
        public static implicit operator SfModeType(DBNull value) { return new SfModeType(null); }
    }
    public class SfOutputType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SfOutputType(string value) : base(value) { }
        public static implicit operator SfOutputType(string value) { return new SfOutputType(value); }
        public static implicit operator SfOutputType(DBNull value) { return new SfOutputType(null); }
    }
    public class SfReaderSnType : StringType
    {
        public override int Length { get => 72; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SfReaderSnType(string value) : base(value) { }
        public static implicit operator SfReaderSnType(string value) { return new SfReaderSnType(value); }
        public static implicit operator SfReaderSnType(DBNull value) { return new SfReaderSnType(null); }
    }
    public class SheetTagIncrementType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SheetTagIncrementType(short? value) : base(value) { }
        public static implicit operator SheetTagIncrementType(short? value) { return new SheetTagIncrementType(value); }
        public static implicit operator SheetTagIncrementType(DBNull value) { return new SheetTagIncrementType(null); }
        private SheetTagIncrementType(int? value) : base(value) { }
        public static implicit operator SheetTagIncrementType(int? value) { return new SheetTagIncrementType(value); }
    }
    public class SheetTagNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SheetTagNumType(int? value) : base(value) { }
        public static implicit operator SheetTagNumType(int? value) { return new SheetTagNumType(value); }
        public static implicit operator SheetTagNumType(DBNull value) { return new SheetTagNumType(null); }
        private SheetTagNumType(long? value) : base(value) { }
        public static implicit operator SheetTagNumType(long? value) { return new SheetTagNumType(value); }
    }
    public class ShelfLifeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShelfLifeType(short? value) : base(value) { }
        public static implicit operator ShelfLifeType(short? value) { return new ShelfLifeType(value); }
        public static implicit operator ShelfLifeType(DBNull value) { return new ShelfLifeType(null); }
        private ShelfLifeType(int? value) : base(value) { }
        public static implicit operator ShelfLifeType(int? value) { return new ShelfLifeType(value); }
    }
    public class ShiftPremiumType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private ShiftPremiumType(decimal? value) : base(value) { }
        public static implicit operator ShiftPremiumType(decimal? value) { return new ShiftPremiumType(value); }
        public static implicit operator ShiftPremiumType(DBNull value) { return new ShiftPremiumType(null); }
    }
    public class ShiftPremiumTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShiftPremiumTypeType(string value) : base(value) { }
        public static implicit operator ShiftPremiumTypeType(string value) { return new ShiftPremiumTypeType(value); }
        public static implicit operator ShiftPremiumTypeType(DBNull value) { return new ShiftPremiumTypeType(null); }
    }
    public class ShiftTimeType : DateTimeType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 23; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private ShiftTimeType(DateTime? value) : base(value) { }
        public static implicit operator ShiftTimeType(DateTime? value) { return new ShiftTimeType(value); }
        public static implicit operator ShiftTimeType(DBNull value) { return new ShiftTimeType(null); }
    }
    public class ShiftType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShiftType(string value) : base(value) { }
        public static implicit operator ShiftType(string value) { return new ShiftType(value); }
        public static implicit operator ShiftType(DBNull value) { return new ShiftType(null); }
    }
    public class ShipCodeType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShipCodeType(string value) : base(value) { }
        public static implicit operator ShipCodeType(string value) { return new ShipCodeType(value); }
        public static implicit operator ShipCodeType(DBNull value) { return new ShipCodeType(null); }
    }
    public class ShipmentDocIdType : StringType
    {
        public override int Length { get => 70; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShipmentDocIdType(string value) : base(value) { }
        public static implicit operator ShipmentDocIdType(string value) { return new ShipmentDocIdType(value); }
        public static implicit operator ShipmentDocIdType(DBNull value) { return new ShipmentDocIdType(null); }
    }
    public class ShipmentIDType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 19; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShipmentIDType(decimal? value) : base(value) { }
        public static implicit operator ShipmentIDType(decimal? value) { return new ShipmentIDType(value); }
        public static implicit operator ShipmentIDType(DBNull value) { return new ShipmentIDType(null); }
    }
    public class ShipmentLineIDType : StringType
    {
        public override int Length { get => 44; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShipmentLineIDType(string value) : base(value) { }
        public static implicit operator ShipmentLineIDType(string value) { return new ShipmentLineIDType(value); }
        public static implicit operator ShipmentLineIDType(DBNull value) { return new ShipmentLineIDType(null); }
    }
    public class ShipmentLineType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShipmentLineType(int? value) : base(value) { }
        public static implicit operator ShipmentLineType(int? value) { return new ShipmentLineType(value); }
        public static implicit operator ShipmentLineType(DBNull value) { return new ShipmentLineType(null); }
        private ShipmentLineType(long? value) : base(value) { }
        public static implicit operator ShipmentLineType(long? value) { return new ShipmentLineType(value); }
    }
    public class ShipmentSequenceType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShipmentSequenceType(int? value) : base(value) { }
        public static implicit operator ShipmentSequenceType(int? value) { return new ShipmentSequenceType(value); }
        public static implicit operator ShipmentSequenceType(DBNull value) { return new ShipmentSequenceType(null); }
        private ShipmentSequenceType(long? value) : base(value) { }
        public static implicit operator ShipmentSequenceType(long? value) { return new ShipmentSequenceType(value); }
    }
    public class ShipmentStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShipmentStatusType(string value) : base(value) { }
        public static implicit operator ShipmentStatusType(string value) { return new ShipmentStatusType(value); }
        public static implicit operator ShipmentStatusType(DBNull value) { return new ShipmentStatusType(null); }
    }
    public class ShipMethodGroupType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShipMethodGroupType(string value) : base(value) { }
        public static implicit operator ShipMethodGroupType(string value) { return new ShipMethodGroupType(value); }
        public static implicit operator ShipMethodGroupType(DBNull value) { return new ShipMethodGroupType(null); }
    }
    public class ShipMethodType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShipMethodType(string value) : base(value) { }
        public static implicit operator ShipMethodType(string value) { return new ShipMethodType(value); }
        public static implicit operator ShipMethodType(DBNull value) { return new ShipMethodType(null); }
    }
    public class ShipperNumType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShipperNumType(string value) : base(value) { }
        public static implicit operator ShipperNumType(string value) { return new ShipperNumType(value); }
        public static implicit operator ShipperNumType(DBNull value) { return new ShipperNumType(null); }
    }
    public class ShipperType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShipperType(string value) : base(value) { }
        public static implicit operator ShipperType(string value) { return new ShipperType(value); }
        public static implicit operator ShipperType(DBNull value) { return new ShipperType(null); }
    }
    public class ShippingIntegrationFedexDropoffType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShippingIntegrationFedexDropoffType(string value) : base(value) { }
        public static implicit operator ShippingIntegrationFedexDropoffType(string value) { return new ShippingIntegrationFedexDropoffType(value); }
        public static implicit operator ShippingIntegrationFedexDropoffType(DBNull value) { return new ShippingIntegrationFedexDropoffType(null); }
    }
    public class ShippingIntegrationFedexKeyType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShippingIntegrationFedexKeyType(string value) : base(value) { }
        public static implicit operator ShippingIntegrationFedexKeyType(string value) { return new ShippingIntegrationFedexKeyType(value); }
        public static implicit operator ShippingIntegrationFedexKeyType(DBNull value) { return new ShippingIntegrationFedexKeyType(null); }
    }
    public class ShippingIntegrationFedexLabelFormatType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShippingIntegrationFedexLabelFormatType(string value) : base(value) { }
        public static implicit operator ShippingIntegrationFedexLabelFormatType(string value) { return new ShippingIntegrationFedexLabelFormatType(value); }
        public static implicit operator ShippingIntegrationFedexLabelFormatType(DBNull value) { return new ShippingIntegrationFedexLabelFormatType(null); }
    }
    public class ShippingIntegrationFedexLabelImageTypeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShippingIntegrationFedexLabelImageTypeType(string value) : base(value) { }
        public static implicit operator ShippingIntegrationFedexLabelImageTypeType(string value) { return new ShippingIntegrationFedexLabelImageTypeType(value); }
        public static implicit operator ShippingIntegrationFedexLabelImageTypeType(DBNull value) { return new ShippingIntegrationFedexLabelImageTypeType(null); }
    }
    public class ShippingIntegrationFedexLabelStockTypeType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShippingIntegrationFedexLabelStockTypeType(string value) : base(value) { }
        public static implicit operator ShippingIntegrationFedexLabelStockTypeType(string value) { return new ShippingIntegrationFedexLabelStockTypeType(value); }
        public static implicit operator ShippingIntegrationFedexLabelStockTypeType(DBNull value) { return new ShippingIntegrationFedexLabelStockTypeType(null); }
    }
    public class ShippingIntegrationFedexMeterNumberType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShippingIntegrationFedexMeterNumberType(string value) : base(value) { }
        public static implicit operator ShippingIntegrationFedexMeterNumberType(string value) { return new ShippingIntegrationFedexMeterNumberType(value); }
        public static implicit operator ShippingIntegrationFedexMeterNumberType(DBNull value) { return new ShippingIntegrationFedexMeterNumberType(null); }
    }
    public class ShippingIntegrationFedexPackageTypeType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShippingIntegrationFedexPackageTypeType(string value) : base(value) { }
        public static implicit operator ShippingIntegrationFedexPackageTypeType(string value) { return new ShippingIntegrationFedexPackageTypeType(value); }
        public static implicit operator ShippingIntegrationFedexPackageTypeType(DBNull value) { return new ShippingIntegrationFedexPackageTypeType(null); }
    }
    public class ShippingIntegrationUPSAccessLicenseType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShippingIntegrationUPSAccessLicenseType(string value) : base(value) { }
        public static implicit operator ShippingIntegrationUPSAccessLicenseType(string value) { return new ShippingIntegrationUPSAccessLicenseType(value); }
        public static implicit operator ShippingIntegrationUPSAccessLicenseType(DBNull value) { return new ShippingIntegrationUPSAccessLicenseType(null); }
    }
    public class ShippingIntegrationUPSLabelCodeType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShippingIntegrationUPSLabelCodeType(string value) : base(value) { }
        public static implicit operator ShippingIntegrationUPSLabelCodeType(string value) { return new ShippingIntegrationUPSLabelCodeType(value); }
        public static implicit operator ShippingIntegrationUPSLabelCodeType(DBNull value) { return new ShippingIntegrationUPSLabelCodeType(null); }
    }
    public class ShippingIntegrationUPSLabelStockDimensionType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShippingIntegrationUPSLabelStockDimensionType(int? value) : base(value) { }
        public static implicit operator ShippingIntegrationUPSLabelStockDimensionType(int? value) { return new ShippingIntegrationUPSLabelStockDimensionType(value); }
        public static implicit operator ShippingIntegrationUPSLabelStockDimensionType(DBNull value) { return new ShippingIntegrationUPSLabelStockDimensionType(null); }
        private ShippingIntegrationUPSLabelStockDimensionType(long? value) : base(value) { }
        public static implicit operator ShippingIntegrationUPSLabelStockDimensionType(long? value) { return new ShippingIntegrationUPSLabelStockDimensionType(value); }
    }
    public class ShippingIntegrationUPSPackageTypeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShippingIntegrationUPSPackageTypeType(string value) : base(value) { }
        public static implicit operator ShippingIntegrationUPSPackageTypeType(string value) { return new ShippingIntegrationUPSPackageTypeType(value); }
        public static implicit operator ShippingIntegrationUPSPackageTypeType(DBNull value) { return new ShippingIntegrationUPSPackageTypeType(null); }
    }
    public class ShippingIntegrationUPSUserIdType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShippingIntegrationUPSUserIdType(string value) : base(value) { }
        public static implicit operator ShippingIntegrationUPSUserIdType(string value) { return new ShippingIntegrationUPSUserIdType(value); }
        public static implicit operator ShippingIntegrationUPSUserIdType(DBNull value) { return new ShippingIntegrationUPSUserIdType(null); }
    }
    public class ShippingNameType : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShippingNameType(string value) : base(value) { }
        public static implicit operator ShippingNameType(string value) { return new ShippingNameType(value); }
        public static implicit operator ShippingNameType(DBNull value) { return new ShippingNameType(null); }
    }
    public class ShortDescType : StringType
    {
        public override int Length { get => 72; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ShortDescType(string value) : base(value) { }
        public static implicit operator ShortDescType(string value) { return new ShortDescType(value); }
        public static implicit operator ShortDescType(DBNull value) { return new ShortDescType(null); }
    }
    public class ShrinkFactorType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 4; }
        public override bool Nullable { get => true; }
        private ShrinkFactorType(decimal? value) : base(value) { }
        public static implicit operator ShrinkFactorType(decimal? value) { return new ShrinkFactorType(value); }
        public static implicit operator ShrinkFactorType(DBNull value) { return new ShrinkFactorType(null); }
    }
    public class SICCodeType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SICCodeType(string value) : base(value) { }
        public static implicit operator SICCodeType(string value) { return new SICCodeType(value); }
        public static implicit operator SICCodeType(DBNull value) { return new SICCodeType(null); }
    }
    public class SingleFixBuildLevelType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SingleFixBuildLevelType(int? value) : base(value) { }
        public static implicit operator SingleFixBuildLevelType(int? value) { return new SingleFixBuildLevelType(value); }
        public static implicit operator SingleFixBuildLevelType(DBNull value) { return new SingleFixBuildLevelType(null); }
        private SingleFixBuildLevelType(long? value) : base(value) { }
        public static implicit operator SingleFixBuildLevelType(long? value) { return new SingleFixBuildLevelType(value); }
    }
    public class SingleFixNumberType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SingleFixNumberType(string value) : base(value) { }
        public static implicit operator SingleFixNumberType(string value) { return new SingleFixNumberType(value); }
        public static implicit operator SingleFixNumberType(DBNull value) { return new SingleFixNumberType(null); }
    }
    public class SiteGroupType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SiteGroupType(string value) : base(value) { }
        public static implicit operator SiteGroupType(string value) { return new SiteGroupType(value); }
        public static implicit operator SiteGroupType(DBNull value) { return new SiteGroupType(null); }
    }
    public class SiteListType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SiteListType(string value) : base(value) { }
        public static implicit operator SiteListType(string value) { return new SiteListType(value); }
        public static implicit operator SiteListType(DBNull value) { return new SiteListType(null); }
    }
    public class SiteManagementActionType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SiteManagementActionType(string value) : base(value) { }
        public static implicit operator SiteManagementActionType(string value) { return new SiteManagementActionType(value); }
        public static implicit operator SiteManagementActionType(DBNull value) { return new SiteManagementActionType(null); }
    }
    public class SiteManagementTaskTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SiteManagementTaskTypeType(string value) : base(value) { }
        public static implicit operator SiteManagementTaskTypeType(string value) { return new SiteManagementTaskTypeType(value); }
        public static implicit operator SiteManagementTaskTypeType(DBNull value) { return new SiteManagementTaskTypeType(null); }
    }
    public class SiteManagementStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SiteManagementStatusType(string value) : base(value) { }
        public static implicit operator SiteManagementStatusType(string value) { return new SiteManagementStatusType(value); }
        public static implicit operator SiteManagementStatusType(DBNull value) { return new SiteManagementStatusType(null); }
    }
    public class SiteShipmentIDType : StringType
    {
        public override int Length { get => 56; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SiteShipmentIDType(string value) : base(value) { }
        public static implicit operator SiteShipmentIDType(string value) { return new SiteShipmentIDType(value); }
        public static implicit operator SiteShipmentIDType(DBNull value) { return new SiteShipmentIDType(null); }
    }
    public class SiteType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SiteType(string value) : base(value) { }
        public static implicit operator SiteType(string value) { return new SiteType(value); }
        public static implicit operator SiteType(DBNull value) { return new SiteType(null); }
    }
    public class SiteTypeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SiteTypeType(string value) : base(value) { }
        public static implicit operator SiteTypeType(string value) { return new SiteTypeType(value); }
        public static implicit operator SiteTypeType(DBNull value) { return new SiteTypeType(null); }
    }
    public class SkillType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SkillType(string value) : base(value) { }
        public static implicit operator SkillType(string value) { return new SkillType(value); }
        public static implicit operator SkillType(DBNull value) { return new SkillType(null); }
    }
    public class SlsclassType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SlsclassType(string value) : base(value) { }
        public static implicit operator SlsclassType(string value) { return new SlsclassType(value); }
        public static implicit operator SlsclassType(DBNull value) { return new SlsclassType(null); }
    }
    public class SlsmanType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SlsmanType(string value) : base(value) { }
        public static implicit operator SlsmanType(string value) { return new SlsmanType(value); }
        public static implicit operator SlsmanType(DBNull value) { return new SlsmanType(null); }
    }
    public class SmallintType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SmallintType(short? value) : base(value) { }
        public static implicit operator SmallintType(short? value) { return new SmallintType(value); }
        public static implicit operator SmallintType(DBNull value) { return new SmallintType(null); }
        private SmallintType(int? value) : base(value) { }
        public static implicit operator SmallintType(int? value) { return new SmallintType(value); }
    }
    public class SmallYesNoType : IntType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 1; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SmallYesNoType(int? value) : base(value) { }
        public static implicit operator SmallYesNoType(int? value) { return new SmallYesNoType(value); }
        public static implicit operator SmallYesNoType(DBNull value) { return new SmallYesNoType(null); }
    }
    public class SMTPDeliveryMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SMTPDeliveryMethodType(string value) : base(value) { }
        public static implicit operator SMTPDeliveryMethodType(string value) { return new SMTPDeliveryMethodType(value); }
        public static implicit operator SMTPDeliveryMethodType(DBNull value) { return new SMTPDeliveryMethodType(null); }
    }
    public class SortDirectionPlusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SortDirectionPlusType(string value) : base(value) { }
        public static implicit operator SortDirectionPlusType(string value) { return new SortDirectionPlusType(value); }
        public static implicit operator SortDirectionPlusType(DBNull value) { return new SortDirectionPlusType(null); }
    }
    public class SortFldPosType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SortFldPosType(byte? value) : base(value) { }
        public static implicit operator SortFldPosType(byte? value) { return new SortFldPosType(value); }
        public static implicit operator SortFldPosType(DBNull value) { return new SortFldPosType(null); }
        private SortFldPosType(int? value) : base(value) { }
        public static implicit operator SortFldPosType(int? value) { return new SortFldPosType(value); }
    }
    public class SortIdType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SortIdType(string value) : base(value) { }
        public static implicit operator SortIdType(string value) { return new SortIdType(value); }
        public static implicit operator SortIdType(DBNull value) { return new SortIdType(null); }
    }
    public class SortMethodType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SortMethodType(byte? value) : base(value) { }
        public static implicit operator SortMethodType(byte? value) { return new SortMethodType(value); }
        public static implicit operator SortMethodType(DBNull value) { return new SortMethodType(null); }
        private SortMethodType(int? value) : base(value) { }
        public static implicit operator SortMethodType(int? value) { return new SortMethodType(value); }
    }
    public class SourceType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SourceType(string value) : base(value) { }
        public static implicit operator SourceType(string value) { return new SourceType(value); }
        public static implicit operator SourceType(DBNull value) { return new SourceType(null); }
    }
    public class SQLUserType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SQLUserType(string value) : base(value) { }
        public static implicit operator SQLUserType(string value) { return new SQLUserType(value); }
        public static implicit operator SQLUserType(DBNull value) { return new SQLUserType(null); }
    }
    public class SSDInterchangeIdType : StringType
    {
        public override int Length { get => 10; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SSDInterchangeIdType(string value) : base(value) { }
        public static implicit operator SSDInterchangeIdType(string value) { return new SSDInterchangeIdType(value); }
        public static implicit operator SSDInterchangeIdType(DBNull value) { return new SSDInterchangeIdType(null); }
    }
    public class SsdRefTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SsdRefTypeType(string value) : base(value) { }
        public static implicit operator SsdRefTypeType(string value) { return new SsdRefTypeType(value); }
        public static implicit operator SsdRefTypeType(DBNull value) { return new SsdRefTypeType(null); }
    }
    public class SsnType : StringType
    {
        public override int Length { get => 22; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SsnType(string value) : base(value) { }
        public static implicit operator SsnType(string value) { return new SsnType(value); }
        public static implicit operator SsnType(DBNull value) { return new SsnType(null); }
    }
    public class StatementCycleType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private StatementCycleType(string value) : base(value) { }
        public static implicit operator StatementCycleType(string value) { return new StatementCycleType(value); }
        public static implicit operator StatementCycleType(DBNull value) { return new StatementCycleType(null); }
    }
    public class StateSSDTaxIdType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private StateSSDTaxIdType(string value) : base(value) { }
        public static implicit operator StateSSDTaxIdType(string value) { return new StateSSDTaxIdType(value); }
        public static implicit operator StateSSDTaxIdType(DBNull value) { return new StateSSDTaxIdType(null); }
    }
    public class StateType : StringType
    {
        public override int Length { get => 10; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private StateType(string value) : base(value) { }
        public static implicit operator StateType(string value) { return new StateType(value); }
        public static implicit operator StateType(DBNull value) { return new StateType(null); }
    }
    public class StatusFreqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private StatusFreqType(int? value) : base(value) { }
        public static implicit operator StatusFreqType(int? value) { return new StatusFreqType(value); }
        public static implicit operator StatusFreqType(DBNull value) { return new StatusFreqType(null); }
        private StatusFreqType(long? value) : base(value) { }
        public static implicit operator StatusFreqType(long? value) { return new StatusFreqType(value); }
    }
    public class StaxSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private StaxSeqType(int? value) : base(value) { }
        public static implicit operator StaxSeqType(int? value) { return new StaxSeqType(value); }
        public static implicit operator StaxSeqType(DBNull value) { return new StaxSeqType(null); }
        private StaxSeqType(long? value) : base(value) { }
        public static implicit operator StaxSeqType(long? value) { return new StaxSeqType(value); }
    }
    public class StepType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private StepType(string value) : base(value) { }
        public static implicit operator StepType(string value) { return new StepType(value); }
        public static implicit operator StepType(DBNull value) { return new StepType(null); }
    }
    public class StorageMethodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private StorageMethodType(string value) : base(value) { }
        public static implicit operator StorageMethodType(string value) { return new StorageMethodType(value); }
        public static implicit operator StorageMethodType(DBNull value) { return new StorageMethodType(null); }
    }
    public class StringNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private StringNameType(string value) : base(value) { }
        public static implicit operator StringNameType(string value) { return new StringNameType(value); }
        public static implicit operator StringNameType(DBNull value) { return new StringNameType(null); }
    }
    public class StringTableNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private StringTableNameType(string value) : base(value) { }
        public static implicit operator StringTableNameType(string value) { return new StringTableNameType(value); }
        public static implicit operator StringTableNameType(DBNull value) { return new StringTableNameType(null); }
    }
    public class SubAcctType : StringType
    {
        public override int Length { get => 24; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SubAcctType(string value) : base(value) { }
        public static implicit operator SubAcctType(string value) { return new SubAcctType(value); }
        public static implicit operator SubAcctType(DBNull value) { return new SubAcctType(null); }
    }
    public class SubLanguageIDIntegerType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SubLanguageIDIntegerType(string value) : base(value) { }
        public static implicit operator SubLanguageIDIntegerType(string value) { return new SubLanguageIDIntegerType(value); }
        public static implicit operator SubLanguageIDIntegerType(DBNull value) { return new SubLanguageIDIntegerType(null); }
    }
    public class SuffixNameType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SuffixNameType(string value) : base(value) { }
        public static implicit operator SuffixNameType(string value) { return new SuffixNameType(value); }
        public static implicit operator SuffixNameType(DBNull value) { return new SuffixNameType(null); }
    }
    public class SuffixPoLineProjTaskReqTrnLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SuffixPoLineProjTaskReqTrnLineType(short? value) : base(value) { }
        public static implicit operator SuffixPoLineProjTaskReqTrnLineType(short? value) { return new SuffixPoLineProjTaskReqTrnLineType(value); }
        public static implicit operator SuffixPoLineProjTaskReqTrnLineType(DBNull value) { return new SuffixPoLineProjTaskReqTrnLineType(null); }
        private SuffixPoLineProjTaskReqTrnLineType(int? value) : base(value) { }
        public static implicit operator SuffixPoLineProjTaskReqTrnLineType(int? value) { return new SuffixPoLineProjTaskReqTrnLineType(value); }
    }
    public class SuffixPoReqLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SuffixPoReqLineType(short? value) : base(value) { }
        public static implicit operator SuffixPoReqLineType(short? value) { return new SuffixPoReqLineType(value); }
        public static implicit operator SuffixPoReqLineType(DBNull value) { return new SuffixPoReqLineType(null); }
        private SuffixPoReqLineType(int? value) : base(value) { }
        public static implicit operator SuffixPoReqLineType(int? value) { return new SuffixPoReqLineType(value); }
    }
    public class SuffixPoReqTrnLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SuffixPoReqTrnLineType(short? value) : base(value) { }
        public static implicit operator SuffixPoReqTrnLineType(short? value) { return new SuffixPoReqTrnLineType(value); }
        public static implicit operator SuffixPoReqTrnLineType(DBNull value) { return new SuffixPoReqTrnLineType(null); }
        private SuffixPoReqTrnLineType(int? value) : base(value) { }
        public static implicit operator SuffixPoReqTrnLineType(int? value) { return new SuffixPoReqTrnLineType(value); }
    }
    public class SuffixTrnLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SuffixTrnLineType(short? value) : base(value) { }
        public static implicit operator SuffixTrnLineType(short? value) { return new SuffixTrnLineType(value); }
        public static implicit operator SuffixTrnLineType(DBNull value) { return new SuffixTrnLineType(null); }
        private SuffixTrnLineType(int? value) : base(value) { }
        public static implicit operator SuffixTrnLineType(int? value) { return new SuffixTrnLineType(value); }
    }
    public class SuffixType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SuffixType(short? value) : base(value) { }
        public static implicit operator SuffixType(short? value) { return new SuffixType(value); }
        public static implicit operator SuffixType(DBNull value) { return new SuffixType(null); }
        private SuffixType(int? value) : base(value) { }
        public static implicit operator SuffixType(int? value) { return new SuffixType(value); }
    }
    public class SupplyToleranceHoursType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 4; }
        public override byte Scale { get => 1; }
        public override bool Nullable { get => true; }
        private SupplyToleranceHoursType(decimal? value) : base(value) { }
        public static implicit operator SupplyToleranceHoursType(decimal? value) { return new SupplyToleranceHoursType(value); }
        public static implicit operator SupplyToleranceHoursType(DBNull value) { return new SupplyToleranceHoursType(null); }
    }
    public class SupplyWebPoStatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SupplyWebPoStatType(string value) : base(value) { }
        public static implicit operator SupplyWebPoStatType(string value) { return new SupplyWebPoStatType(value); }
        public static implicit operator SupplyWebPoStatType(DBNull value) { return new SupplyWebPoStatType(null); }
    }
    public class SurchargeFactorType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 4; }
        public override bool Nullable { get => true; }
        private SurchargeFactorType(decimal? value) : base(value) { }
        public static implicit operator SurchargeFactorType(decimal? value) { return new SurchargeFactorType(value); }
        public static implicit operator SurchargeFactorType(DBNull value) { return new SurchargeFactorType(null); }
    }
    public class SurchargeSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SurchargeSeqType(int? value) : base(value) { }
        public static implicit operator SurchargeSeqType(int? value) { return new SurchargeSeqType(value); }
        public static implicit operator SurchargeSeqType(DBNull value) { return new SurchargeSeqType(null); }
        private SurchargeSeqType(long? value) : base(value) { }
        public static implicit operator SurchargeSeqType(long? value) { return new SurchargeSeqType(value); }
    }
    public class SurnameType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SurnameType(string value) : base(value) { }
        public static implicit operator SurnameType(string value) { return new SurnameType(value); }
        public static implicit operator SurnameType(DBNull value) { return new SurnameType(null); }
    }
    public class SymGroupType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SymGroupType(string value) : base(value) { }
        public static implicit operator SymGroupType(string value) { return new SymGroupType(value); }
        public static implicit operator SymGroupType(DBNull value) { return new SymGroupType(null); }
    }
    public class SymUserType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SymUserType(string value) : base(value) { }
        public static implicit operator SymUserType(string value) { return new SymUserType(value); }
        public static implicit operator SymUserType(DBNull value) { return new SymUserType(null); }
    }
    public class SyncIdType : StringType
    {
        public override int Length { get => 1024; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SyncIdType(string value) : base(value) { }
        public static implicit operator SyncIdType(string value) { return new SyncIdType(value); }
        public static implicit operator SyncIdType(DBNull value) { return new SyncIdType(null); }
    }
    public class SyncStateType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SyncStateType(string value) : base(value) { }
        public static implicit operator SyncStateType(string value) { return new SyncStateType(value); }
        public static implicit operator SyncStateType(DBNull value) { return new SyncStateType(null); }
    }
    public class SystemTypeType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private SystemTypeType(string value) : base(value) { }
        public static implicit operator SystemTypeType(string value) { return new SystemTypeType(value); }
        public static implicit operator SystemTypeType(DBNull value) { return new SystemTypeType(null); }
    }
    public class TableGroupType : StringType
    {
        public override int Length { get => 64; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TableGroupType(string value) : base(value) { }
        public static implicit operator TableGroupType(string value) { return new TableGroupType(value); }
        public static implicit operator TableGroupType(DBNull value) { return new TableGroupType(null); }
    }
    public class TableIndexType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TableIndexType(string value) : base(value) { }
        public static implicit operator TableIndexType(string value) { return new TableIndexType(value); }
        public static implicit operator TableIndexType(DBNull value) { return new TableIndexType(null); }
    }
    public class TableNameType : StringType
    {
        public override int Length { get => 256; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TableNameType(string value) : base(value) { }
        public static implicit operator TableNameType(string value) { return new TableNameType(value); }
        public static implicit operator TableNameType(DBNull value) { return new TableNameType(null); }
    }
    public class TakenByType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TakenByType(string value) : base(value) { }
        public static implicit operator TakenByType(string value) { return new TakenByType(value); }
        public static implicit operator TakenByType(DBNull value) { return new TakenByType(null); }
    }
    public class TariffClassificationType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TariffClassificationType(string value) : base(value) { }
        public static implicit operator TariffClassificationType(string value) { return new TariffClassificationType(value); }
        public static implicit operator TariffClassificationType(DBNull value) { return new TariffClassificationType(null); }
    }
    public class TaskNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TaskNumType(int? value) : base(value) { }
        public static implicit operator TaskNumType(int? value) { return new TaskNumType(value); }
        public static implicit operator TaskNumType(DBNull value) { return new TaskNumType(null); }
        private TaskNumType(long? value) : base(value) { }
        public static implicit operator TaskNumType(long? value) { return new TaskNumType(value); }
    }
    public class TaxablePriceType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TaxablePriceType(string value) : base(value) { }
        public static implicit operator TaxablePriceType(string value) { return new TaxablePriceType(value); }
        public static implicit operator TaxablePriceType(DBNull value) { return new TaxablePriceType(null); }
    }
    public class TaxBasisBoxType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 13; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private TaxBasisBoxType(decimal? value) : base(value) { }
        public static implicit operator TaxBasisBoxType(decimal? value) { return new TaxBasisBoxType(value); }
        public static implicit operator TaxBasisBoxType(DBNull value) { return new TaxBasisBoxType(null); }
    }
    public class TaxCodeLabelType : StringType
    {
        public override int Length { get => 18; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TaxCodeLabelType(string value) : base(value) { }
        public static implicit operator TaxCodeLabelType(string value) { return new TaxCodeLabelType(value); }
        public static implicit operator TaxCodeLabelType(DBNull value) { return new TaxCodeLabelType(null); }
    }
    public class TaxCodeType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TaxCodeType(string value) : base(value) { }
        public static implicit operator TaxCodeType(string value) { return new TaxCodeType(value); }
        public static implicit operator TaxCodeType(DBNull value) { return new TaxCodeType(null); }
    }
    public class TaxCodeTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TaxCodeTypeType(string value) : base(value) { }
        public static implicit operator TaxCodeTypeType(string value) { return new TaxCodeTypeType(value); }
        public static implicit operator TaxCodeTypeType(DBNull value) { return new TaxCodeTypeType(null); }
    }
    public class TaxDBVersionNumberType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 4; }
        public override byte Scale { get => 1; }
        public override bool Nullable { get => true; }
        private TaxDBVersionNumberType(decimal? value) : base(value) { }
        public static implicit operator TaxDBVersionNumberType(decimal? value) { return new TaxDBVersionNumberType(value); }
        public static implicit operator TaxDBVersionNumberType(DBNull value) { return new TaxDBVersionNumberType(null); }
    }
    public class TaxDistrictType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TaxDistrictType(string value) : base(value) { }
        public static implicit operator TaxDistrictType(string value) { return new TaxDistrictType(value); }
        public static implicit operator TaxDistrictType(DBNull value) { return new TaxDistrictType(null); }
    }
    public class TaxFreeDaysType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TaxFreeDaysType(short? value) : base(value) { }
        public static implicit operator TaxFreeDaysType(short? value) { return new TaxFreeDaysType(value); }
        public static implicit operator TaxFreeDaysType(DBNull value) { return new TaxFreeDaysType(null); }
        private TaxFreeDaysType(int? value) : base(value) { }
        public static implicit operator TaxFreeDaysType(int? value) { return new TaxFreeDaysType(value); }
    }
    public class TaxIdPromptType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TaxIdPromptType(string value) : base(value) { }
        public static implicit operator TaxIdPromptType(string value) { return new TaxIdPromptType(value); }
        public static implicit operator TaxIdPromptType(DBNull value) { return new TaxIdPromptType(null); }
    }
    public class TaxJurType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TaxJurType(string value) : base(value) { }
        public static implicit operator TaxJurType(string value) { return new TaxJurType(value); }
        public static implicit operator TaxJurType(DBNull value) { return new TaxJurType(null); }
    }
    public class TaxModeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TaxModeType(string value) : base(value) { }
        public static implicit operator TaxModeType(string value) { return new TaxModeType(value); }
        public static implicit operator TaxModeType(DBNull value) { return new TaxModeType(null); }
    }
    public class TaxRateType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 8; }
        public override byte Scale { get => 5; }
        public override bool Nullable { get => true; }
        private TaxRateType(decimal? value) : base(value) { }
        public static implicit operator TaxRateType(decimal? value) { return new TaxRateType(value); }
        public static implicit operator TaxRateType(DBNull value) { return new TaxRateType(null); }
    }
    public class TaxRegNumType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TaxRegNumType(string value) : base(value) { }
        public static implicit operator TaxRegNumType(string value) { return new TaxRegNumType(value); }
        public static implicit operator TaxRegNumType(DBNull value) { return new TaxRegNumType(null); }
    }
    public class TaxSystemsType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TaxSystemsType(byte? value) : base(value) { }
        public static implicit operator TaxSystemsType(byte? value) { return new TaxSystemsType(value); }
        public static implicit operator TaxSystemsType(DBNull value) { return new TaxSystemsType(null); }
        private TaxSystemsType(int? value) : base(value) { }
        public static implicit operator TaxSystemsType(int? value) { return new TaxSystemsType(value); }
    }
    public class TaxSystemType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TaxSystemType(byte? value) : base(value) { }
        public static implicit operator TaxSystemType(byte? value) { return new TaxSystemType(value); }
        public static implicit operator TaxSystemType(DBNull value) { return new TaxSystemType(null); }
        private TaxSystemType(int? value) : base(value) { }
        public static implicit operator TaxSystemType(int? value) { return new TaxSystemType(value); }
    }
    public class TenureType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TenureType(byte? value) : base(value) { }
        public static implicit operator TenureType(byte? value) { return new TenureType(value); }
        public static implicit operator TenureType(DBNull value) { return new TenureType(null); }
        private TenureType(int? value) : base(value) { }
        public static implicit operator TenureType(int? value) { return new TenureType(value); }
    }
    public class TermReasonCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TermReasonCodeType(string value) : base(value) { }
        public static implicit operator TermReasonCodeType(string value) { return new TermReasonCodeType(value); }
        public static implicit operator TermReasonCodeType(DBNull value) { return new TermReasonCodeType(null); }
    }
    public class TermsCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TermsCodeType(string value) : base(value) { }
        public static implicit operator TermsCodeType(string value) { return new TermsCodeType(value); }
        public static implicit operator TermsCodeType(DBNull value) { return new TermsCodeType(null); }
    }
    public class TermsPercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private TermsPercentType(decimal? value) : base(value) { }
        public static implicit operator TermsPercentType(decimal? value) { return new TermsPercentType(value); }
        public static implicit operator TermsPercentType(DBNull value) { return new TermsPercentType(null); }
    }
    public class TerritoryCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TerritoryCodeType(string value) : base(value) { }
        public static implicit operator TerritoryCodeType(string value) { return new TerritoryCodeType(value); }
        public static implicit operator TerritoryCodeType(DBNull value) { return new TerritoryCodeType(null); }
    }
    public class TerritoryType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TerritoryType(string value) : base(value) { }
        public static implicit operator TerritoryType(string value) { return new TerritoryType(value); }
        public static implicit operator TerritoryType(DBNull value) { return new TerritoryType(null); }
    }
    public class TestCodeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TestCodeType(string value) : base(value) { }
        public static implicit operator TestCodeType(string value) { return new TestCodeType(value); }
        public static implicit operator TestCodeType(DBNull value) { return new TestCodeType(null); }
    }
    public class TextLongType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TextLongType(string value) : base(value) { }
        public static implicit operator TextLongType(string value) { return new TextLongType(value); }
        public static implicit operator TextLongType(DBNull value) { return new TextLongType(null); }
    }
    public class TH_CartonPrefixType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TH_CartonPrefixType(string value) : base(value) { }
        public static implicit operator TH_CartonPrefixType(string value) { return new TH_CartonPrefixType(value); }
        public static implicit operator TH_CartonPrefixType(DBNull value) { return new TH_CartonPrefixType(null); }
    }
    public class TH_CartonSizeType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TH_CartonSizeType(string value) : base(value) { }
        public static implicit operator TH_CartonSizeType(string value) { return new TH_CartonSizeType(value); }
        public static implicit operator TH_CartonSizeType(DBNull value) { return new TH_CartonSizeType(null); }
    }
    public class TH_ItemCategoryType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TH_ItemCategoryType(string value) : base(value) { }
        public static implicit operator TH_ItemCategoryType(string value) { return new TH_ItemCategoryType(value); }
        public static implicit operator TH_ItemCategoryType(DBNull value) { return new TH_ItemCategoryType(null); }
    }
    public class TH_MeasurementType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 6; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private TH_MeasurementType(decimal? value) : base(value) { }
        public static implicit operator TH_MeasurementType(decimal? value) { return new TH_MeasurementType(value); }
        public static implicit operator TH_MeasurementType(DBNull value) { return new TH_MeasurementType(null); }
    }
    public class TH_MonthType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TH_MonthType(string value) : base(value) { }
        public static implicit operator TH_MonthType(string value) { return new TH_MonthType(value); }
        public static implicit operator TH_MonthType(DBNull value) { return new TH_MonthType(null); }
    }
    public class TH_PayerTypeOtherType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TH_PayerTypeOtherType(string value) : base(value) { }
        public static implicit operator TH_PayerTypeOtherType(string value) { return new TH_PayerTypeOtherType(value); }
        public static implicit operator TH_PayerTypeOtherType(DBNull value) { return new TH_PayerTypeOtherType(null); }
    }
    public class TH_PayerTypeType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TH_PayerTypeType(byte? value) : base(value) { }
        public static implicit operator TH_PayerTypeType(byte? value) { return new TH_PayerTypeType(value); }
        public static implicit operator TH_PayerTypeType(DBNull value) { return new TH_PayerTypeType(null); }
        private TH_PayerTypeType(int? value) : base(value) { }
        public static implicit operator TH_PayerTypeType(int? value) { return new TH_PayerTypeType(value); }
    }
    public class TH_ShippingPortType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TH_ShippingPortType(string value) : base(value) { }
        public static implicit operator TH_ShippingPortType(string value) { return new TH_ShippingPortType(value); }
        public static implicit operator TH_ShippingPortType(DBNull value) { return new TH_ShippingPortType(null); }
    }
    public class TH_TextType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TH_TextType(string value) : base(value) { }
        public static implicit operator TH_TextType(string value) { return new TH_TextType(value); }
        public static implicit operator TH_TextType(DBNull value) { return new TH_TextType(null); }
    }
    public class TH_VendInvNumType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TH_VendInvNumType(string value) : base(value) { }
        public static implicit operator TH_VendInvNumType(string value) { return new TH_VendInvNumType(value); }
        public static implicit operator TH_VendInvNumType(DBNull value) { return new TH_VendInvNumType(null); }
    }
    public class TH_WHTSequenceType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TH_WHTSequenceType(string value) : base(value) { }
        public static implicit operator TH_WHTSequenceType(string value) { return new TH_WHTSequenceType(value); }
        public static implicit operator TH_WHTSequenceType(DBNull value) { return new TH_WHTSequenceType(null); }
    }
    public class TH_WHTTaxType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TH_WHTTaxType(string value) : base(value) { }
        public static implicit operator TH_WHTTaxType(string value) { return new TH_WHTTaxType(value); }
        public static implicit operator TH_WHTTaxType(DBNull value) { return new TH_WHTTaxType(null); }
    }
    public class TH_WHTTypeType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TH_WHTTypeType(string value) : base(value) { }
        public static implicit operator TH_WHTTypeType(string value) { return new TH_WHTTypeType(value); }
        public static implicit operator TH_WHTTypeType(DBNull value) { return new TH_WHTTypeType(null); }
    }
    public class TH_YearType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TH_YearType(string value) : base(value) { }
        public static implicit operator TH_YearType(string value) { return new TH_YearType(value); }
        public static implicit operator TH_YearType(DBNull value) { return new TH_YearType(null); }
    }
    public class THDocumentTypeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private THDocumentTypeType(string value) : base(value) { }
        public static implicit operator THDocumentTypeType(string value) { return new THDocumentTypeType(value); }
        public static implicit operator THDocumentTypeType(DBNull value) { return new THDocumentTypeType(null); }
    }
    public class THPrefixType : StringType
    {
        public override int Length { get => 10; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private THPrefixType(string value) : base(value) { }
        public static implicit operator THPrefixType(string value) { return new THPrefixType(value); }
        public static implicit operator THPrefixType(DBNull value) { return new THPrefixType(null); }
    }
    public class ThresholdExpressionType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ThresholdExpressionType(string value) : base(value) { }
        public static implicit operator ThresholdExpressionType(string value) { return new ThresholdExpressionType(value); }
        public static implicit operator ThresholdExpressionType(DBNull value) { return new ThresholdExpressionType(null); }
    }
    public class THTransTypeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private THTransTypeType(string value) : base(value) { }
        public static implicit operator THTransTypeType(string value) { return new THTransTypeType(value); }
        public static implicit operator THTransTypeType(DBNull value) { return new THTransTypeType(null); }
    }
    public class TickDurationType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TickDurationType(short? value) : base(value) { }
        public static implicit operator TickDurationType(short? value) { return new TickDurationType(value); }
        public static implicit operator TickDurationType(DBNull value) { return new TickDurationType(null); }
        private TickDurationType(int? value) : base(value) { }
        public static implicit operator TickDurationType(int? value) { return new TickDurationType(value); }
    }
    public class TickOffsetType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TickOffsetType(short? value) : base(value) { }
        public static implicit operator TickOffsetType(short? value) { return new TickOffsetType(value); }
        public static implicit operator TickOffsetType(DBNull value) { return new TickOffsetType(null); }
        private TickOffsetType(int? value) : base(value) { }
        public static implicit operator TickOffsetType(int? value) { return new TickOffsetType(value); }
    }
    public class TicksType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TicksType(decimal? value) : base(value) { }
        public static implicit operator TicksType(decimal? value) { return new TicksType(value); }
        public static implicit operator TicksType(DBNull value) { return new TicksType(null); }
    }
    public class TimeCodeType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TimeCodeType(string value) : base(value) { }
        public static implicit operator TimeCodeType(string value) { return new TimeCodeType(value); }
        public static implicit operator TimeCodeType(DBNull value) { return new TimeCodeType(null); }
    }
    public class TimeHoursType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 4; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private TimeHoursType(decimal? value) : base(value) { }
        public static implicit operator TimeHoursType(decimal? value) { return new TimeHoursType(value); }
        public static implicit operator TimeHoursType(DBNull value) { return new TimeHoursType(null); }
    }
    public class TimeoutType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TimeoutType(int? value) : base(value) { }
        public static implicit operator TimeoutType(int? value) { return new TimeoutType(value); }
        public static implicit operator TimeoutType(DBNull value) { return new TimeoutType(null); }
        private TimeoutType(long? value) : base(value) { }
        public static implicit operator TimeoutType(long? value) { return new TimeoutType(value); }
    }
    public class TimeSecondsType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TimeSecondsType(int? value) : base(value) { }
        public static implicit operator TimeSecondsType(int? value) { return new TimeSecondsType(value); }
        public static implicit operator TimeSecondsType(DBNull value) { return new TimeSecondsType(null); }
        private TimeSecondsType(long? value) : base(value) { }
        public static implicit operator TimeSecondsType(long? value) { return new TimeSecondsType(value); }
    }
    public class TimesPerYearType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TimesPerYearType(short? value) : base(value) { }
        public static implicit operator TimesPerYearType(short? value) { return new TimesPerYearType(value); }
        public static implicit operator TimesPerYearType(DBNull value) { return new TimesPerYearType(null); }
        private TimesPerYearType(int? value) : base(value) { }
        public static implicit operator TimesPerYearType(int? value) { return new TimesPerYearType(value); }
    }
    public class TimeType : DateTimeType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 23; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private TimeType(DateTime? value) : base(value) { }
        public static implicit operator TimeType(DateTime? value) { return new TimeType(value); }
        public static implicit operator TimeType(DBNull value) { return new TimeType(null); }
    }
    public class TimeZoneType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TimeZoneType(string value) : base(value) { }
        public static implicit operator TimeZoneType(string value) { return new TimeZoneType(value); }
        public static implicit operator TimeZoneType(DBNull value) { return new TimeZoneType(null); }
    }
    public class TipCreditRateType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 6; }
        public override bool Nullable { get => true; }
        private TipCreditRateType(decimal? value) : base(value) { }
        public static implicit operator TipCreditRateType(decimal? value) { return new TipCreditRateType(value); }
        public static implicit operator TipCreditRateType(DBNull value) { return new TipCreditRateType(null); }
    }
    public class TokenType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TokenType(decimal? value) : base(value) { }
        public static implicit operator TokenType(decimal? value) { return new TokenType(value); }
        public static implicit operator TokenType(DBNull value) { return new TokenType(null); }
    }
    public class ToleranceDaysType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ToleranceDaysType(short? value) : base(value) { }
        public static implicit operator ToleranceDaysType(short? value) { return new ToleranceDaysType(value); }
        public static implicit operator ToleranceDaysType(DBNull value) { return new ToleranceDaysType(null); }
        private ToleranceDaysType(int? value) : base(value) { }
        public static implicit operator ToleranceDaysType(int? value) { return new ToleranceDaysType(value); }
    }
    public class TolerancePercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 7; }
        public override byte Scale { get => 4; }
        public override bool Nullable { get => true; }
        private TolerancePercentType(decimal? value) : base(value) { }
        public static implicit operator TolerancePercentType(decimal? value) { return new TolerancePercentType(value); }
        public static implicit operator TolerancePercentType(DBNull value) { return new TolerancePercentType(null); }
    }
    public class ToolTipType : StringType
    {
        public override int Length { get => 144; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ToolTipType(string value) : base(value) { }
        public static implicit operator ToolTipType(string value) { return new ToolTipType(value); }
        public static implicit operator ToolTipType(DBNull value) { return new ToolTipType(null); }
    }
    public class TopicType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TopicType(string value) : base(value) { }
        public static implicit operator TopicType(string value) { return new TopicType(value); }
        public static implicit operator TopicType(DBNull value) { return new TopicType(null); }
    }
    public class TotalDaysOSType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TotalDaysOSType(int? value) : base(value) { }
        public static implicit operator TotalDaysOSType(int? value) { return new TotalDaysOSType(value); }
        public static implicit operator TotalDaysOSType(DBNull value) { return new TotalDaysOSType(null); }
        private TotalDaysOSType(long? value) : base(value) { }
        public static implicit operator TotalDaysOSType(long? value) { return new TotalDaysOSType(value); }
    }
    public class TotalHoursType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 19; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private TotalHoursType(decimal? value) : base(value) { }
        public static implicit operator TotalHoursType(decimal? value) { return new TotalHoursType(value); }
        public static implicit operator TotalHoursType(DBNull value) { return new TotalHoursType(null); }
    }
    public class TotalProdMixQuantityType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TotalProdMixQuantityType(short? value) : base(value) { }
        public static implicit operator TotalProdMixQuantityType(short? value) { return new TotalProdMixQuantityType(value); }
        public static implicit operator TotalProdMixQuantityType(DBNull value) { return new TotalProdMixQuantityType(null); }
        private TotalProdMixQuantityType(int? value) : base(value) { }
        public static implicit operator TotalProdMixQuantityType(int? value) { return new TotalProdMixQuantityType(value); }
    }
    public class TotalWeightType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private TotalWeightType(decimal? value) : base(value) { }
        public static implicit operator TotalWeightType(decimal? value) { return new TotalWeightType(value); }
        public static implicit operator TotalWeightType(DBNull value) { return new TotalWeightType(null); }
    }
    public class TotVatDueType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 20; }
        public override byte Scale { get => 8; }
        public override bool Nullable { get => true; }
        private TotVatDueType(decimal? value) : base(value) { }
        public static implicit operator TotVatDueType(decimal? value) { return new TotVatDueType(value); }
        public static implicit operator TotVatDueType(DBNull value) { return new TotVatDueType(null); }
    }
    public class TPCodeType : StringType
    {
        public override int Length { get => 34; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TPCodeType(string value) : base(value) { }
        public static implicit operator TPCodeType(string value) { return new TPCodeType(value); }
        public static implicit operator TPCodeType(DBNull value) { return new TPCodeType(null); }
    }
    public class TrackedOperTypeType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TrackedOperTypeType(string value) : base(value) { }
        public static implicit operator TrackedOperTypeType(string value) { return new TrackedOperTypeType(value); }
        public static implicit operator TrackedOperTypeType(DBNull value) { return new TrackedOperTypeType(null); }
    }
    public class TrackingNumberType : StringType
    {
        public override int Length { get => 68; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TrackingNumberType(string value) : base(value) { }
        public static implicit operator TrackingNumberType(string value) { return new TrackingNumberType(value); }
        public static implicit operator TrackingNumberType(DBNull value) { return new TrackingNumberType(null); }
    }
    public class TrackTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TrackTypeType(string value) : base(value) { }
        public static implicit operator TrackTypeType(string value) { return new TrackTypeType(value); }
        public static implicit operator TrackTypeType(DBNull value) { return new TrackTypeType(null); }
    }
    public class TrainingCostType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 7; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private TrainingCostType(decimal? value) : base(value) { }
        public static implicit operator TrainingCostType(decimal? value) { return new TrainingCostType(value); }
        public static implicit operator TrainingCostType(DBNull value) { return new TrainingCostType(null); }
    }
    public class TrainingFeeType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 7; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private TrainingFeeType(decimal? value) : base(value) { }
        public static implicit operator TrainingFeeType(decimal? value) { return new TrainingFeeType(value); }
        public static implicit operator TrainingFeeType(DBNull value) { return new TrainingFeeType(null); }
    }
    public class TrainLocType : StringType
    {
        public override int Length { get => 70; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TrainLocType(string value) : base(value) { }
        public static implicit operator TrainLocType(string value) { return new TrainLocType(value); }
        public static implicit operator TrainLocType(DBNull value) { return new TrainLocType(null); }
    }
    public class TransferStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TransferStatusType(string value) : base(value) { }
        public static implicit operator TransferStatusType(string value) { return new TransferStatusType(value); }
        public static implicit operator TransferStatusType(DBNull value) { return new TransferStatusType(null); }
    }
    public class TransIndicatorType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TransIndicatorType(string value) : base(value) { }
        public static implicit operator TransIndicatorType(string value) { return new TransIndicatorType(value); }
        public static implicit operator TransIndicatorType(DBNull value) { return new TransIndicatorType(null); }
    }
    public class TransitTimeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TransitTimeType(short? value) : base(value) { }
        public static implicit operator TransitTimeType(short? value) { return new TransitTimeType(value); }
        public static implicit operator TransitTimeType(DBNull value) { return new TransitTimeType(null); }
        private TransitTimeType(int? value) : base(value) { }
        public static implicit operator TransitTimeType(int? value) { return new TransitTimeType(value); }
    }
    public class TransNat2Type : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TransNat2Type(string value) : base(value) { }
        public static implicit operator TransNat2Type(string value) { return new TransNat2Type(value); }
        public static implicit operator TransNat2Type(DBNull value) { return new TransNat2Type(null); }
    }
    public class TransNatType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TransNatType(string value) : base(value) { }
        public static implicit operator TransNatType(string value) { return new TransNatType(value); }
        public static implicit operator TransNatType(DBNull value) { return new TransNatType(null); }
    }
    public class TransportType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TransportType(string value) : base(value) { }
        public static implicit operator TransportType(string value) { return new TransportType(value); }
        public static implicit operator TransportType(DBNull value) { return new TransportType(null); }
    }
    public class TransRestrictionCodeType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TransRestrictionCodeType(string value) : base(value) { }
        public static implicit operator TransRestrictionCodeType(string value) { return new TransRestrictionCodeType(value); }
        public static implicit operator TransRestrictionCodeType(DBNull value) { return new TransRestrictionCodeType(null); }
    }
    public class TRKFormName : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TRKFormName(string value) : base(value) { }
        public static implicit operator TRKFormName(string value) { return new TRKFormName(value); }
        public static implicit operator TRKFormName(DBNull value) { return new TRKFormName(null); }
    }
    public class TRKFormNameBase : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TRKFormNameBase(string value) : base(value) { }
        public static implicit operator TRKFormNameBase(string value) { return new TRKFormNameBase(value); }
        public static implicit operator TRKFormNameBase(DBNull value) { return new TRKFormNameBase(null); }
    }
    public class TrnLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TrnLineType(short? value) : base(value) { }
        public static implicit operator TrnLineType(short? value) { return new TrnLineType(value); }
        public static implicit operator TrnLineType(DBNull value) { return new TrnLineType(null); }
        private TrnLineType(int? value) : base(value) { }
        public static implicit operator TrnLineType(int? value) { return new TrnLineType(value); }
    }
    public class TrnNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TrnNumType(string value) : base(value) { }
        public static implicit operator TrnNumType(string value) { return new TrnNumType(value); }
        public static implicit operator TrnNumType(DBNull value) { return new TrnNumType(null); }
    }
    public class TrnPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TrnPrefixType(string value) : base(value) { }
        public static implicit operator TrnPrefixType(string value) { return new TrnPrefixType(value); }
        public static implicit operator TrnPrefixType(DBNull value) { return new TrnPrefixType(null); }
    }
    public class TrxFenceType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TrxFenceType(short? value) : base(value) { }
        public static implicit operator TrxFenceType(short? value) { return new TrxFenceType(value); }
        public static implicit operator TrxFenceType(DBNull value) { return new TrxFenceType(null); }
        private TrxFenceType(int? value) : base(value) { }
        public static implicit operator TrxFenceType(int? value) { return new TrxFenceType(value); }
    }
    public class TTVoucherType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TTVoucherType(string value) : base(value) { }
        public static implicit operator TTVoucherType(string value) { return new TTVoucherType(value); }
        public static implicit operator TTVoucherType(DBNull value) { return new TTVoucherType(null); }
    }
    public class TypeOfNoteType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private TypeOfNoteType(string value) : base(value) { }
        public static implicit operator TypeOfNoteType(string value) { return new TypeOfNoteType(value); }
        public static implicit operator TypeOfNoteType(DBNull value) { return new TypeOfNoteType(null); }
    }
    public class UdfaLevelTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UdfaLevelTypeType(string value) : base(value) { }
        public static implicit operator UdfaLevelTypeType(string value) { return new UdfaLevelTypeType(value); }
        public static implicit operator UdfaLevelTypeType(DBNull value) { return new UdfaLevelTypeType(null); }
    }
    public class UetColorType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UetColorType(byte? value) : base(value) { }
        public static implicit operator UetColorType(byte? value) { return new UetColorType(value); }
        public static implicit operator UetColorType(DBNull value) { return new UetColorType(null); }
        private UetColorType(int? value) : base(value) { }
        public static implicit operator UetColorType(int? value) { return new UetColorType(value); }
    }
    public class UetDataTypeType : StringType
    {
        public override int Length { get => 32; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UetDataTypeType(string value) : base(value) { }
        public static implicit operator UetDataTypeType(string value) { return new UetDataTypeType(value); }
        public static implicit operator UetDataTypeType(DBNull value) { return new UetDataTypeType(null); }
    }
    public class UetDefaultType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UetDefaultType(string value) : base(value) { }
        public static implicit operator UetDefaultType(string value) { return new UetDefaultType(value); }
        public static implicit operator UetDefaultType(DBNull value) { return new UetDefaultType(null); }
    }
    public class UetFldDtypeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UetFldDtypeType(short? value) : base(value) { }
        public static implicit operator UetFldDtypeType(short? value) { return new UetFldDtypeType(value); }
        public static implicit operator UetFldDtypeType(DBNull value) { return new UetFldDtypeType(null); }
        private UetFldDtypeType(int? value) : base(value) { }
        public static implicit operator UetFldDtypeType(int? value) { return new UetFldDtypeType(value); }
    }
    public class UetFormatType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UetFormatType(string value) : base(value) { }
        public static implicit operator UetFormatType(string value) { return new UetFormatType(value); }
        public static implicit operator UetFormatType(DBNull value) { return new UetFormatType(null); }
    }
    public class UetHeightType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UetHeightType(byte? value) : base(value) { }
        public static implicit operator UetHeightType(byte? value) { return new UetHeightType(value); }
        public static implicit operator UetHeightType(DBNull value) { return new UetHeightType(null); }
        private UetHeightType(int? value) : base(value) { }
        public static implicit operator UetHeightType(int? value) { return new UetHeightType(value); }
    }
    public class UetIndexSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UetIndexSeqType(short? value) : base(value) { }
        public static implicit operator UetIndexSeqType(short? value) { return new UetIndexSeqType(value); }
        public static implicit operator UetIndexSeqType(DBNull value) { return new UetIndexSeqType(null); }
        private UetIndexSeqType(int? value) : base(value) { }
        public static implicit operator UetIndexSeqType(int? value) { return new UetIndexSeqType(value); }
    }
    public class UetInlineListType : StringType
    {
        public override int Length { get => 144; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UetInlineListType(string value) : base(value) { }
        public static implicit operator UetInlineListType(string value) { return new UetInlineListType(value); }
        public static implicit operator UetInlineListType(DBNull value) { return new UetInlineListType(null); }
    }
    public class UetOrderType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UetOrderType(short? value) : base(value) { }
        public static implicit operator UetOrderType(short? value) { return new UetOrderType(value); }
        public static implicit operator UetOrderType(DBNull value) { return new UetOrderType(null); }
        private UetOrderType(int? value) : base(value) { }
        public static implicit operator UetOrderType(int? value) { return new UetOrderType(value); }
    }
    public class UetPrecisionType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UetPrecisionType(short? value) : base(value) { }
        public static implicit operator UetPrecisionType(short? value) { return new UetPrecisionType(value); }
        public static implicit operator UetPrecisionType(DBNull value) { return new UetPrecisionType(null); }
        private UetPrecisionType(int? value) : base(value) { }
        public static implicit operator UetPrecisionType(int? value) { return new UetPrecisionType(value); }
    }
    public class UetScaleType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UetScaleType(byte? value) : base(value) { }
        public static implicit operator UetScaleType(byte? value) { return new UetScaleType(value); }
        public static implicit operator UetScaleType(DBNull value) { return new UetScaleType(null); }
        private UetScaleType(int? value) : base(value) { }
        public static implicit operator UetScaleType(int? value) { return new UetScaleType(value); }
    }
    public class UetSysApplyType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UetSysApplyType(string value) : base(value) { }
        public static implicit operator UetSysApplyType(string value) { return new UetSysApplyType(value); }
        public static implicit operator UetSysApplyType(DBNull value) { return new UetSysApplyType(null); }
    }
    public class UetTicMarksType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UetTicMarksType(string value) : base(value) { }
        public static implicit operator UetTicMarksType(string value) { return new UetTicMarksType(value); }
        public static implicit operator UetTicMarksType(DBNull value) { return new UetTicMarksType(null); }
    }
    public class UetUtilTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UetUtilTypeType(string value) : base(value) { }
        public static implicit operator UetUtilTypeType(string value) { return new UetUtilTypeType(value); }
        public static implicit operator UetUtilTypeType(DBNull value) { return new UetUtilTypeType(null); }
    }
    public class UetWidgetTypeType : StringType
    {
        public override int Length { get => 28; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UetWidgetTypeType(string value) : base(value) { }
        public static implicit operator UetWidgetTypeType(string value) { return new UetWidgetTypeType(value); }
        public static implicit operator UetWidgetTypeType(DBNull value) { return new UetWidgetTypeType(null); }
    }
    public class UetWidthType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UetWidthType(byte? value) : base(value) { }
        public static implicit operator UetWidthType(byte? value) { return new UetWidthType(value); }
        public static implicit operator UetWidthType(DBNull value) { return new UetWidthType(null); }
        private UetWidthType(int? value) : base(value) { }
        public static implicit operator UetWidthType(int? value) { return new UetWidthType(value); }
    }
    public class UMCategoryType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UMCategoryType(string value) : base(value) { }
        public static implicit operator UMCategoryType(string value) { return new UMCategoryType(value); }
        public static implicit operator UMCategoryType(DBNull value) { return new UMCategoryType(null); }
    }
    public class UmClassType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UmClassType(string value) : base(value) { }
        public static implicit operator UmClassType(string value) { return new UmClassType(value); }
        public static implicit operator UmClassType(DBNull value) { return new UmClassType(null); }
    }
    public class UMConvFactorType : FloatType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 53; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UMConvFactorType(double? value) : base(value) { }
        public static implicit operator UMConvFactorType(double? value) { return new UMConvFactorType(value); }
        public static implicit operator UMConvFactorType(DBNull value) { return new UMConvFactorType((double?)null); }
        private UMConvFactorType(decimal? value) : base(value) { }
        public static implicit operator UMConvFactorType(decimal? value) { return new UMConvFactorType(value); }
    }
    public class UMConvTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UMConvTypeType(string value) : base(value) { }
        public static implicit operator UMConvTypeType(string value) { return new UMConvTypeType(value); }
        public static implicit operator UMConvTypeType(DBNull value) { return new UMConvTypeType(null); }
    }
    public class UmFamilyType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UmFamilyType(short? value) : base(value) { }
        public static implicit operator UmFamilyType(short? value) { return new UmFamilyType(value); }
        public static implicit operator UmFamilyType(DBNull value) { return new UmFamilyType(null); }
        private UmFamilyType(int? value) : base(value) { }
        public static implicit operator UmFamilyType(int? value) { return new UmFamilyType(value); }
    }
    public class UMType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UMType(string value) : base(value) { }
        public static implicit operator UMType(string value) { return new UMType(value); }
        public static implicit operator UMType(DBNull value) { return new UMType(null); }
    }
    public class UnionDuesTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UnionDuesTypeType(string value) : base(value) { }
        public static implicit operator UnionDuesTypeType(string value) { return new UnionDuesTypeType(value); }
        public static implicit operator UnionDuesTypeType(DBNull value) { return new UnionDuesTypeType(null); }
    }
    public class UnitCode1Type : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UnitCode1Type(string value) : base(value) { }
        public static implicit operator UnitCode1Type(string value) { return new UnitCode1Type(value); }
        public static implicit operator UnitCode1Type(DBNull value) { return new UnitCode1Type(null); }
    }
    public class UnitCode2Type : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UnitCode2Type(string value) : base(value) { }
        public static implicit operator UnitCode2Type(string value) { return new UnitCode2Type(value); }
        public static implicit operator UnitCode2Type(DBNull value) { return new UnitCode2Type(null); }
    }
    public class UnitCode3Type : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UnitCode3Type(string value) : base(value) { }
        public static implicit operator UnitCode3Type(string value) { return new UnitCode3Type(value); }
        public static implicit operator UnitCode3Type(DBNull value) { return new UnitCode3Type(null); }
    }
    public class UnitCode4Type : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UnitCode4Type(string value) : base(value) { }
        public static implicit operator UnitCode4Type(string value) { return new UnitCode4Type(value); }
        public static implicit operator UnitCode4Type(DBNull value) { return new UnitCode4Type(null); }
    }
    public class UnitCodeAccessType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UnitCodeAccessType(string value) : base(value) { }
        public static implicit operator UnitCodeAccessType(string value) { return new UnitCodeAccessType(value); }
        public static implicit operator UnitCodeAccessType(DBNull value) { return new UnitCodeAccessType(null); }
    }
    public class UnitWeightType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 11; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private UnitWeightType(decimal? value) : base(value) { }
        public static implicit operator UnitWeightType(decimal? value) { return new UnitWeightType(value); }
        public static implicit operator UnitWeightType(DBNull value) { return new UnitWeightType(null); }
    }
    public class UnknownRefLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UnknownRefLineType(short? value) : base(value) { }
        public static implicit operator UnknownRefLineType(short? value) { return new UnknownRefLineType(value); }
        public static implicit operator UnknownRefLineType(DBNull value) { return new UnknownRefLineType(null); }
        private UnknownRefLineType(int? value) : base(value) { }
        public static implicit operator UnknownRefLineType(int? value) { return new UnknownRefLineType(value); }
    }
    public class UnknownRefNumLastTranType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UnknownRefNumLastTranType(string value) : base(value) { }
        public static implicit operator UnknownRefNumLastTranType(string value) { return new UnknownRefNumLastTranType(value); }
        public static implicit operator UnknownRefNumLastTranType(DBNull value) { return new UnknownRefNumLastTranType(null); }
    }
    public class UnknownRefNumVoucherType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UnknownRefNumVoucherType(string value) : base(value) { }
        public static implicit operator UnknownRefNumVoucherType(string value) { return new UnknownRefNumVoucherType(value); }
        public static implicit operator UnknownRefNumVoucherType(DBNull value) { return new UnknownRefNumVoucherType(null); }
    }
    public class UnknownRefReleaseType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UnknownRefReleaseType(short? value) : base(value) { }
        public static implicit operator UnknownRefReleaseType(short? value) { return new UnknownRefReleaseType(value); }
        public static implicit operator UnknownRefReleaseType(DBNull value) { return new UnknownRefReleaseType(null); }
        private UnknownRefReleaseType(int? value) : base(value) { }
        public static implicit operator UnknownRefReleaseType(int? value) { return new UnknownRefReleaseType(value); }
    }
    public class UnknownRefTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UnknownRefTypeType(string value) : base(value) { }
        public static implicit operator UnknownRefTypeType(string value) { return new UnknownRefTypeType(value); }
        public static implicit operator UnknownRefTypeType(DBNull value) { return new UnknownRefTypeType(null); }
    }
    public class UNNumType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UNNumType(string value) : base(value) { }
        public static implicit operator UNNumType(string value) { return new UNNumType(value); }
        public static implicit operator UNNumType(DBNull value) { return new UNNumType(null); }
    }
    public class UnusedCharType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UnusedCharType(string value) : base(value) { }
        public static implicit operator UnusedCharType(string value) { return new UnusedCharType(value); }
        public static implicit operator UnusedCharType(DBNull value) { return new UnusedCharType(null); }
    }
    public class UnusedType : StringType
    {
        public override int Length { get => 64; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UnusedType(string value) : base(value) { }
        public static implicit operator UnusedType(string value) { return new UnusedType(value); }
        public static implicit operator UnusedType(DBNull value) { return new UnusedType(null); }
    }
    public class UpdCurCostType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UpdCurCostType(string value) : base(value) { }
        public static implicit operator UpdCurCostType(string value) { return new UpdCurCostType(value); }
        public static implicit operator UpdCurCostType(DBNull value) { return new UpdCurCostType(null); }
    }
    public class UpliftPatchIdType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UpliftPatchIdType(int? value) : base(value) { }
        public static implicit operator UpliftPatchIdType(int? value) { return new UpliftPatchIdType(value); }
        public static implicit operator UpliftPatchIdType(DBNull value) { return new UpliftPatchIdType(null); }
        private UpliftPatchIdType(long? value) : base(value) { }
        public static implicit operator UpliftPatchIdType(long? value) { return new UpliftPatchIdType(value); }
    }
    public class URLType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private URLType(string value) : base(value) { }
        public static implicit operator URLType(string value) { return new URLType(value); }
        public static implicit operator URLType(DBNull value) { return new URLType(null); }
    }
    public class UserCharFldType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UserCharFldType(string value) : base(value) { }
        public static implicit operator UserCharFldType(string value) { return new UserCharFldType(value); }
        public static implicit operator UserCharFldType(DBNull value) { return new UserCharFldType(null); }
    }
    public class UserCodeType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UserCodeType(string value) : base(value) { }
        public static implicit operator UserCodeType(string value) { return new UserCodeType(value); }
        public static implicit operator UserCodeType(DBNull value) { return new UserCodeType(null); }
    }
    public class UserDateFldType : DateTimeType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 23; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private UserDateFldType(DateTime? value) : base(value) { }
        public static implicit operator UserDateFldType(DateTime? value) { return new UserDateFldType(value); }
        public static implicit operator UserDateFldType(DBNull value) { return new UserDateFldType(null); }
    }
    public class UserDeciFldType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private UserDeciFldType(decimal? value) : base(value) { }
        public static implicit operator UserDeciFldType(decimal? value) { return new UserDeciFldType(value); }
        public static implicit operator UserDeciFldType(DBNull value) { return new UserDeciFldType(null); }
    }
    public class UserFlagType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UserFlagType(short? value) : base(value) { }
        public static implicit operator UserFlagType(short? value) { return new UserFlagType(value); }
        public static implicit operator UserFlagType(DBNull value) { return new UserFlagType(null); }
        private UserFlagType(int? value) : base(value) { }
        public static implicit operator UserFlagType(int? value) { return new UserFlagType(value); }
    }
    public class UserLogiFldType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UserLogiFldType(byte? value) : base(value) { }
        public static implicit operator UserLogiFldType(byte? value) { return new UserLogiFldType(value); }
        public static implicit operator UserLogiFldType(DBNull value) { return new UserLogiFldType(null); }
        private UserLogiFldType(int? value) : base(value) { }
        public static implicit operator UserLogiFldType(int? value) { return new UserLogiFldType(value); }
    }
    public class UsernameType : StringType
    {
        public override int Length { get => 256; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private UsernameType(string value) : base(value) { }
        public static implicit operator UsernameType(string value) { return new UsernameType(value); }
        public static implicit operator UsernameType(DBNull value) { return new UsernameType(null); }
    }
    public class UtilizationType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 4; }
        public override byte Scale { get => 1; }
        public override bool Nullable { get => true; }
        private UtilizationType(decimal? value) : base(value) { }
        public static implicit operator UtilizationType(decimal? value) { return new UtilizationType(value); }
        public static implicit operator UtilizationType(DBNull value) { return new UtilizationType(null); }
    }
    public class VacPeriodType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VacPeriodType(string value) : base(value) { }
        public static implicit operator VacPeriodType(string value) { return new VacPeriodType(value); }
        public static implicit operator VacPeriodType(DBNull value) { return new VacPeriodType(null); }
    }
    public class ValueXMLTypeType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ValueXMLTypeType(string value) : base(value) { }
        public static implicit operator ValueXMLTypeType(string value) { return new ValueXMLTypeType(value); }
        public static implicit operator ValueXMLTypeType(DBNull value) { return new ValueXMLTypeType(null); }
    }
    public class VariationNumberIDType : DecimalType
    {
        public override int Length { get => 13; }
        public override byte Precision { get => 22; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VariationNumberIDType(decimal? value) : base(value) { }
        public static implicit operator VariationNumberIDType(decimal? value) { return new VariationNumberIDType(value); }
        public static implicit operator VariationNumberIDType(DBNull value) { return new VariationNumberIDType(null); }
    }
    public class VariousBigRefLineType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VariousBigRefLineType(int? value) : base(value) { }
        public static implicit operator VariousBigRefLineType(int? value) { return new VariousBigRefLineType(value); }
        public static implicit operator VariousBigRefLineType(DBNull value) { return new VariousBigRefLineType(null); }
        private VariousBigRefLineType(long? value) : base(value) { }
        public static implicit operator VariousBigRefLineType(long? value) { return new VariousBigRefLineType(value); }
    }
    public class VariousSmallRefLineType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VariousSmallRefLineType(short? value) : base(value) { }
        public static implicit operator VariousSmallRefLineType(short? value) { return new VariousSmallRefLineType(value); }
        public static implicit operator VariousSmallRefLineType(DBNull value) { return new VariousSmallRefLineType(null); }
        private VariousSmallRefLineType(int? value) : base(value) { }
        public static implicit operator VariousSmallRefLineType(int? value) { return new VariousSmallRefLineType(value); }
    }
    public class VarLeadTimeType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 5; }
        public override bool Nullable { get => true; }
        private VarLeadTimeType(decimal? value) : base(value) { }
        public static implicit operator VarLeadTimeType(decimal? value) { return new VarLeadTimeType(value); }
        public static implicit operator VarLeadTimeType(DBNull value) { return new VarLeadTimeType(null); }
    }
    public class VATAdjustmentSequenceType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATAdjustmentSequenceType(int? value) : base(value) { }
        public static implicit operator VATAdjustmentSequenceType(int? value) { return new VATAdjustmentSequenceType(value); }
        public static implicit operator VATAdjustmentSequenceType(DBNull value) { return new VATAdjustmentSequenceType(null); }
        private VATAdjustmentSequenceType(long? value) : base(value) { }
        public static implicit operator VATAdjustmentSequenceType(long? value) { return new VATAdjustmentSequenceType(value); }
    }
    public class VATAdjustmentStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATAdjustmentStatusType(string value) : base(value) { }
        public static implicit operator VATAdjustmentStatusType(string value) { return new VATAdjustmentStatusType(value); }
        public static implicit operator VATAdjustmentStatusType(DBNull value) { return new VATAdjustmentStatusType(null); }
    }
    public class VatAmtBoxType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 13; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private VatAmtBoxType(decimal? value) : base(value) { }
        public static implicit operator VatAmtBoxType(decimal? value) { return new VatAmtBoxType(value); }
        public static implicit operator VatAmtBoxType(DBNull value) { return new VatAmtBoxType(null); }
    }
    public class VATBoxListType : StringType
    {
        public override int Length { get => 36; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATBoxListType(string value) : base(value) { }
        public static implicit operator VATBoxListType(string value) { return new VATBoxListType(value); }
        public static implicit operator VATBoxListType(DBNull value) { return new VATBoxListType(null); }
    }
    public class VATBoxType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATBoxType(byte? value) : base(value) { }
        public static implicit operator VATBoxType(byte? value) { return new VATBoxType(value); }
        public static implicit operator VATBoxType(DBNull value) { return new VATBoxType(null); }
        private VATBoxType(int? value) : base(value) { }
        public static implicit operator VATBoxType(int? value) { return new VATBoxType(value); }
    }
    public class VATClientId2Type : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATClientId2Type(string value) : base(value) { }
        public static implicit operator VATClientId2Type(string value) { return new VATClientId2Type(value); }
        public static implicit operator VATClientId2Type(DBNull value) { return new VATClientId2Type(null); }
    }
    public class VATClientIdType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATClientIdType(string value) : base(value) { }
        public static implicit operator VATClientIdType(string value) { return new VATClientIdType(value); }
        public static implicit operator VATClientIdType(DBNull value) { return new VATClientIdType(null); }
    }
    public class VATClientIdType2 : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATClientIdType2(string value) : base(value) { }
        public static implicit operator VATClientIdType2(string value) { return new VATClientIdType2(value); }
        public static implicit operator VATClientIdType2(DBNull value) { return new VATClientIdType2(null); }
    }
    public class VATObligationPaymentSequenceType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATObligationPaymentSequenceType(int? value) : base(value) { }
        public static implicit operator VATObligationPaymentSequenceType(int? value) { return new VATObligationPaymentSequenceType(value); }
        public static implicit operator VATObligationPaymentSequenceType(DBNull value) { return new VATObligationPaymentSequenceType(null); }
        private VATObligationPaymentSequenceType(long? value) : base(value) { }
        public static implicit operator VATObligationPaymentSequenceType(long? value) { return new VATObligationPaymentSequenceType(value); }
    }
    public class VATObligationPeriodTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATObligationPeriodTypeType(string value) : base(value) { }
        public static implicit operator VATObligationPeriodTypeType(string value) { return new VATObligationPeriodTypeType(value); }
        public static implicit operator VATObligationPeriodTypeType(DBNull value) { return new VATObligationPeriodTypeType(null); }
    }
    public class VATObligationStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATObligationStatusType(string value) : base(value) { }
        public static implicit operator VATObligationStatusType(string value) { return new VATObligationStatusType(value); }
        public static implicit operator VATObligationStatusType(DBNull value) { return new VATObligationStatusType(null); }
    }
    public class VATObligationType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATObligationType(string value) : base(value) { }
        public static implicit operator VATObligationType(string value) { return new VATObligationType(value); }
        public static implicit operator VATObligationType(DBNull value) { return new VATObligationType(null); }
    }
    public class VATPeriodKeyType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATPeriodKeyType(string value) : base(value) { }
        public static implicit operator VATPeriodKeyType(string value) { return new VATPeriodKeyType(value); }
        public static implicit operator VATPeriodKeyType(DBNull value) { return new VATPeriodKeyType(null); }
    }
    public class VATProceduralMarkingIdType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATProceduralMarkingIdType(string value) : base(value) { }
        public static implicit operator VATProceduralMarkingIdType(string value) { return new VATProceduralMarkingIdType(value); }
        public static implicit operator VATProceduralMarkingIdType(DBNull value) { return new VATProceduralMarkingIdType(null); }
    }
    public class VATProceduralMarkingRefNumType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATProceduralMarkingRefNumType(string value) : base(value) { }
        public static implicit operator VATProceduralMarkingRefNumType(string value) { return new VATProceduralMarkingRefNumType(value); }
        public static implicit operator VATProceduralMarkingRefNumType(DBNull value) { return new VATProceduralMarkingRefNumType(null); }
    }
    public class VATProceduralMarkingRefTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATProceduralMarkingRefTypeType(string value) : base(value) { }
        public static implicit operator VATProceduralMarkingRefTypeType(string value) { return new VATProceduralMarkingRefTypeType(value); }
        public static implicit operator VATProceduralMarkingRefTypeType(DBNull value) { return new VATProceduralMarkingRefTypeType(null); }
    }
    public class VATReportCategoryNameType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATReportCategoryNameType(string value) : base(value) { }
        public static implicit operator VATReportCategoryNameType(string value) { return new VATReportCategoryNameType(value); }
        public static implicit operator VATReportCategoryNameType(DBNull value) { return new VATReportCategoryNameType(null); }
    }
    public class VATReportLineNumberDescriptionType : StringType
    {
        public override int Length { get => 300; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATReportLineNumberDescriptionType(string value) : base(value) { }
        public static implicit operator VATReportLineNumberDescriptionType(string value) { return new VATReportLineNumberDescriptionType(value); }
        public static implicit operator VATReportLineNumberDescriptionType(DBNull value) { return new VATReportLineNumberDescriptionType(null); }
    }
    public class VATReportLineNumberType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATReportLineNumberType(int? value) : base(value) { }
        public static implicit operator VATReportLineNumberType(int? value) { return new VATReportLineNumberType(value); }
        public static implicit operator VATReportLineNumberType(DBNull value) { return new VATReportLineNumberType(null); }
        private VATReportLineNumberType(long? value) : base(value) { }
        public static implicit operator VATReportLineNumberType(long? value) { return new VATReportLineNumberType(value); }
    }
    public class VATReportNumberForTaxType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATReportNumberForTaxType(int? value) : base(value) { }
        public static implicit operator VATReportNumberForTaxType(int? value) { return new VATReportNumberForTaxType(value); }
        public static implicit operator VATReportNumberForTaxType(DBNull value) { return new VATReportNumberForTaxType(null); }
        private VATReportNumberForTaxType(long? value) : base(value) { }
        public static implicit operator VATReportNumberForTaxType(long? value) { return new VATReportNumberForTaxType(value); }
    }
    public class VATReportTaxTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATReportTaxTypeType(string value) : base(value) { }
        public static implicit operator VATReportTaxTypeType(string value) { return new VATReportTaxTypeType(value); }
        public static implicit operator VATReportTaxTypeType(DBNull value) { return new VATReportTaxTypeType(null); }
    }
    public class VATReturnAmountType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 13; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private VATReturnAmountType(decimal? value) : base(value) { }
        public static implicit operator VATReturnAmountType(decimal? value) { return new VATReturnAmountType(value); }
        public static implicit operator VATReturnAmountType(DBNull value) { return new VATReturnAmountType(null); }
    }
    public class VATReturnBundleNumType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATReturnBundleNumType(string value) : base(value) { }
        public static implicit operator VATReturnBundleNumType(string value) { return new VATReturnBundleNumType(value); }
        public static implicit operator VATReturnBundleNumType(DBNull value) { return new VATReturnBundleNumType(null); }
    }
    public class VATReturnLiabilityTypeType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATReturnLiabilityTypeType(string value) : base(value) { }
        public static implicit operator VATReturnLiabilityTypeType(string value) { return new VATReturnLiabilityTypeType(value); }
        public static implicit operator VATReturnLiabilityTypeType(DBNull value) { return new VATReturnLiabilityTypeType(null); }
    }
    public class VATReturnPayIndicatorType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATReturnPayIndicatorType(string value) : base(value) { }
        public static implicit operator VATReturnPayIndicatorType(string value) { return new VATReturnPayIndicatorType(value); }
        public static implicit operator VATReturnPayIndicatorType(DBNull value) { return new VATReturnPayIndicatorType(null); }
    }
    public class VATReturnRefNumType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATReturnRefNumType(string value) : base(value) { }
        public static implicit operator VATReturnRefNumType(string value) { return new VATReturnRefNumType(value); }
        public static implicit operator VATReturnRefNumType(DBNull value) { return new VATReturnRefNumType(null); }
    }
    public class VATReturnTaxBasisType : DecimalType
    {
        public override int Length { get => 9; }
        public override byte Precision { get => 13; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATReturnTaxBasisType(decimal? value) : base(value) { }
        public static implicit operator VATReturnTaxBasisType(decimal? value) { return new VATReturnTaxBasisType(value); }
        public static implicit operator VATReturnTaxBasisType(DBNull value) { return new VATReturnTaxBasisType(null); }
    }
    public class VATSecretKeyType : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATSecretKeyType(string value) : base(value) { }
        public static implicit operator VATSecretKeyType(string value) { return new VATSecretKeyType(value); }
        public static implicit operator VATSecretKeyType(DBNull value) { return new VATSecretKeyType(null); }
    }
    public class VATTokenType : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VATTokenType(string value) : base(value) { }
        public static implicit operator VATTokenType(string value) { return new VATTokenType(value); }
        public static implicit operator VATTokenType(DBNull value) { return new VATTokenType(null); }
    }
    public class VchDistSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VchDistSeqType(int? value) : base(value) { }
        public static implicit operator VchDistSeqType(int? value) { return new VchDistSeqType(value); }
        public static implicit operator VchDistSeqType(DBNull value) { return new VchDistSeqType(null); }
        private VchDistSeqType(long? value) : base(value) { }
        public static implicit operator VchDistSeqType(long? value) { return new VchDistSeqType(value); }
    }
    public class VchHdrTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VchHdrTypeType(string value) : base(value) { }
        public static implicit operator VchHdrTypeType(string value) { return new VchHdrTypeType(value); }
        public static implicit operator VchHdrTypeType(DBNull value) { return new VchHdrTypeType(null); }
    }
    public class VchItemSeqType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VchItemSeqType(short? value) : base(value) { }
        public static implicit operator VchItemSeqType(short? value) { return new VchItemSeqType(value); }
        public static implicit operator VchItemSeqType(DBNull value) { return new VchItemSeqType(null); }
        private VchItemSeqType(int? value) : base(value) { }
        public static implicit operator VchItemSeqType(int? value) { return new VchItemSeqType(value); }
    }
    public class VchPrStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VchPrStatusType(string value) : base(value) { }
        public static implicit operator VchPrStatusType(string value) { return new VchPrStatusType(value); }
        public static implicit operator VchPrStatusType(DBNull value) { return new VchPrStatusType(null); }
    }
    public class VehicleNumType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VehicleNumType(string value) : base(value) { }
        public static implicit operator VehicleNumType(string value) { return new VehicleNumType(value); }
        public static implicit operator VehicleNumType(DBNull value) { return new VehicleNumType(null); }
    }
    public class VendInvNumType : StringType
    {
        public override int Length { get => 44; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VendInvNumType(string value) : base(value) { }
        public static implicit operator VendInvNumType(string value) { return new VendInvNumType(value); }
        public static implicit operator VendInvNumType(DBNull value) { return new VendInvNumType(null); }
    }
    public class VendInvoiceType : StringType
    {
        public override int Length { get => 44; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VendInvoiceType(string value) : base(value) { }
        public static implicit operator VendInvoiceType(string value) { return new VendInvoiceType(value); }
        public static implicit operator VendInvoiceType(DBNull value) { return new VendInvoiceType(null); }
    }
    public class VendItemType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VendItemType(string value) : base(value) { }
        public static implicit operator VendItemType(string value) { return new VendItemType(value); }
        public static implicit operator VendItemType(DBNull value) { return new VendItemType(null); }
    }
    public class VendLcrNumType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VendLcrNumType(string value) : base(value) { }
        public static implicit operator VendLcrNumType(string value) { return new VendLcrNumType(value); }
        public static implicit operator VendLcrNumType(DBNull value) { return new VendLcrNumType(null); }
    }
    public class VendLotType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VendLotType(string value) : base(value) { }
        public static implicit operator VendLotType(string value) { return new VendLotType(value); }
        public static implicit operator VendLotType(DBNull value) { return new VendLotType(null); }
    }
    public class VendModeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VendModeType(string value) : base(value) { }
        public static implicit operator VendModeType(string value) { return new VendModeType(value); }
        public static implicit operator VendModeType(DBNull value) { return new VendModeType(null); }
    }
    public class VendNumType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VendNumType(string value) : base(value) { }
        public static implicit operator VendNumType(string value) { return new VendNumType(value); }
        public static implicit operator VendNumType(DBNull value) { return new VendNumType(null); }
    }
    public class VendOrderType : StringType
    {
        public override int Length { get => 44; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VendOrderType(string value) : base(value) { }
        public static implicit operator VendOrderType(string value) { return new VendOrderType(value); }
        public static implicit operator VendOrderType(DBNull value) { return new VendOrderType(null); }
    }
    public class VendorPayTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VendorPayTypeType(string value) : base(value) { }
        public static implicit operator VendorPayTypeType(string value) { return new VendorPayTypeType(value); }
        public static implicit operator VendorPayTypeType(DBNull value) { return new VendorPayTypeType(null); }
    }
    public class VendorStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VendorStatusType(string value) : base(value) { }
        public static implicit operator VendorStatusType(string value) { return new VendorStatusType(value); }
        public static implicit operator VendorStatusType(DBNull value) { return new VendorStatusType(null); }
    }
    public class VendTypeType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VendTypeType(string value) : base(value) { }
        public static implicit operator VendTypeType(string value) { return new VendTypeType(value); }
        public static implicit operator VendTypeType(DBNull value) { return new VendTypeType(null); }
    }
    public class VersionLevelType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private VersionLevelType(decimal? value) : base(value) { }
        public static implicit operator VersionLevelType(decimal? value) { return new VersionLevelType(value); }
        public static implicit operator VersionLevelType(DBNull value) { return new VersionLevelType(null); }
    }
    public class VeryLongListType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VeryLongListType(string value) : base(value) { }
        public static implicit operator VeryLongListType(string value) { return new VeryLongListType(value); }
        public static implicit operator VeryLongListType(DBNull value) { return new VeryLongListType(null); }
    }
    public class VotingRuleType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VotingRuleType(string value) : base(value) { }
        public static implicit operator VotingRuleType(string value) { return new VotingRuleType(value); }
        public static implicit operator VotingRuleType(DBNull value) { return new VotingRuleType(null); }
    }
    public class VoucherType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VoucherType(int? value) : base(value) { }
        public static implicit operator VoucherType(int? value) { return new VoucherType(value); }
        public static implicit operator VoucherType(DBNull value) { return new VoucherType(null); }
        private VoucherType(long? value) : base(value) { }
        public static implicit operator VoucherType(long? value) { return new VoucherType(value); }
    }
    public class VouchSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VouchSeqType(int? value) : base(value) { }
        public static implicit operator VouchSeqType(int? value) { return new VouchSeqType(value); }
        public static implicit operator VouchSeqType(DBNull value) { return new VouchSeqType(null); }
        private VouchSeqType(long? value) : base(value) { }
        public static implicit operator VouchSeqType(long? value) { return new VouchSeqType(value); }
    }
    public class VSSItemType : StringType
    {
        public override int Length { get => 800; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VSSItemType(string value) : base(value) { }
        public static implicit operator VSSItemType(string value) { return new VSSItemType(value); }
        public static implicit operator VSSItemType(DBNull value) { return new VSSItemType(null); }
    }
    public class VSSVersionType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VSSVersionType(int? value) : base(value) { }
        public static implicit operator VSSVersionType(int? value) { return new VSSVersionType(value); }
        public static implicit operator VSSVersionType(DBNull value) { return new VSSVersionType(null); }
        private VSSVersionType(long? value) : base(value) { }
        public static implicit operator VSSVersionType(long? value) { return new VSSVersionType(value); }
    }
    public class VTXAddressTypeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXAddressTypeType(string value) : base(value) { }
        public static implicit operator VTXAddressTypeType(string value) { return new VTXAddressTypeType(value); }
        public static implicit operator VTXAddressTypeType(DBNull value) { return new VTXAddressTypeType(null); }
    }
    public class VTXAvataxDocCodetype : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXAvataxDocCodetype(string value) : base(value) { }
        public static implicit operator VTXAvataxDocCodetype(string value) { return new VTXAvataxDocCodetype(value); }
        public static implicit operator VTXAvataxDocCodetype(DBNull value) { return new VTXAvataxDocCodetype(null); }
    }
    public class VTXAvataxDocDateType : DateTimeType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 23; }
        public override byte Scale { get => 3; }
        public override bool Nullable { get => true; }
        private VTXAvataxDocDateType(DateTime? value) : base(value) { }
        public static implicit operator VTXAvataxDocDateType(DateTime? value) { return new VTXAvataxDocDateType(value); }
        public static implicit operator VTXAvataxDocDateType(DBNull value) { return new VTXAvataxDocDateType(null); }
    }
    public class VTXAvataxDocTypeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXAvataxDocTypeType(int? value) : base(value) { }
        public static implicit operator VTXAvataxDocTypeType(int? value) { return new VTXAvataxDocTypeType(value); }
        public static implicit operator VTXAvataxDocTypeType(DBNull value) { return new VTXAvataxDocTypeType(null); }
        private VTXAvataxDocTypeType(long? value) : base(value) { }
        public static implicit operator VTXAvataxDocTypeType(long? value) { return new VTXAvataxDocTypeType(value); }
    }
    public class VTXCombRateType : FloatType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 53; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXCombRateType(double? value) : base(value) { }
        public static implicit operator VTXCombRateType(double? value) { return new VTXCombRateType(value); }
        public static implicit operator VTXCombRateType(DBNull value) { return new VTXCombRateType((double?)null); }
        private VTXCombRateType(decimal? value) : base(value) { }
        public static implicit operator VTXCombRateType(decimal? value) { return new VTXCombRateType(value); }
    }
    public class VTXCompCdType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXCompCdType(string value) : base(value) { }
        public static implicit operator VTXCompCdType(string value) { return new VTXCompCdType(value); }
        public static implicit operator VTXCompCdType(DBNull value) { return new VTXCompCdType(null); }
    }
    public class VTXComponentCdType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXComponentCdType(string value) : base(value) { }
        public static implicit operator VTXComponentCdType(string value) { return new VTXComponentCdType(value); }
        public static implicit operator VTXComponentCdType(DBNull value) { return new VTXComponentCdType(null); }
    }
    public class VTXCountryCanadaType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXCountryCanadaType(string value) : base(value) { }
        public static implicit operator VTXCountryCanadaType(string value) { return new VTXCountryCanadaType(value); }
        public static implicit operator VTXCountryCanadaType(DBNull value) { return new VTXCountryCanadaType(null); }
    }
    public class VTXCountryUSType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXCountryUSType(string value) : base(value) { }
        public static implicit operator VTXCountryUSType(string value) { return new VTXCountryUSType(value); }
        public static implicit operator VTXCountryUSType(DBNull value) { return new VTXCountryUSType(null); }
    }
    public class VTXCustCdType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXCustCdType(string value) : base(value) { }
        public static implicit operator VTXCustCdType(string value) { return new VTXCustCdType(value); }
        public static implicit operator VTXCustCdType(DBNull value) { return new VTXCustCdType(null); }
    }
    public class VTXCustClassCdType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXCustClassCdType(string value) : base(value) { }
        public static implicit operator VTXCustClassCdType(string value) { return new VTXCustClassCdType(value); }
        public static implicit operator VTXCustClassCdType(DBNull value) { return new VTXCustClassCdType(null); }
    }
    public class VTXCustExmtCertifNumType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXCustExmtCertifNumType(string value) : base(value) { }
        public static implicit operator VTXCustExmtCertifNumType(string value) { return new VTXCustExmtCertifNumType(value); }
        public static implicit operator VTXCustExmtCertifNumType(DBNull value) { return new VTXCustExmtCertifNumType(null); }
    }
    public class VTXCustExmtFlagType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXCustExmtFlagType(int? value) : base(value) { }
        public static implicit operator VTXCustExmtFlagType(int? value) { return new VTXCustExmtFlagType(value); }
        public static implicit operator VTXCustExmtFlagType(DBNull value) { return new VTXCustExmtFlagType(null); }
        private VTXCustExmtFlagType(long? value) : base(value) { }
        public static implicit operator VTXCustExmtFlagType(long? value) { return new VTXCustExmtFlagType(value); }
    }
    public class VTXDatasourceType : StringType
    {
        public override int Length { get => 140; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXDatasourceType(string value) : base(value) { }
        public static implicit operator VTXDatasourceType(string value) { return new VTXDatasourceType(value); }
        public static implicit operator VTXDatasourceType(DBNull value) { return new VTXDatasourceType(null); }
    }
    public class VTXDBTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXDBTypeType(string value) : base(value) { }
        public static implicit operator VTXDBTypeType(string value) { return new VTXDBTypeType(value); }
        public static implicit operator VTXDBTypeType(DBNull value) { return new VTXDBTypeType(null); }
    }
    public class VTXDBVersionType : StringType
    {
        public override int Length { get => 16; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXDBVersionType(string value) : base(value) { }
        public static implicit operator VTXDBVersionType(string value) { return new VTXDBVersionType(value); }
        public static implicit operator VTXDBVersionType(DBNull value) { return new VTXDBVersionType(null); }
    }
    public class VTXDebugMsgType : StringType
    {
        public override int Length { get => 6000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXDebugMsgType(string value) : base(value) { }
        public static implicit operator VTXDebugMsgType(string value) { return new VTXDebugMsgType(value); }
        public static implicit operator VTXDebugMsgType(DBNull value) { return new VTXDebugMsgType(null); }
    }
    public class VTXDebugSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXDebugSeqType(int? value) : base(value) { }
        public static implicit operator VTXDebugSeqType(int? value) { return new VTXDebugSeqType(value); }
        public static implicit operator VTXDebugSeqType(DBNull value) { return new VTXDebugSeqType(null); }
        private VTXDebugSeqType(long? value) : base(value) { }
        public static implicit operator VTXDebugSeqType(long? value) { return new VTXDebugSeqType(value); }
    }
    public class VTXDivCdType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXDivCdType(string value) : base(value) { }
        public static implicit operator VTXDivCdType(string value) { return new VTXDivCdType(value); }
        public static implicit operator VTXDivCdType(DBNull value) { return new VTXDivCdType(null); }
    }
    public class VTXDivCodeType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXDivCodeType(string value) : base(value) { }
        public static implicit operator VTXDivCodeType(string value) { return new VTXDivCodeType(value); }
        public static implicit operator VTXDivCodeType(DBNull value) { return new VTXDivCodeType(null); }
    }
    public class VTXExemptCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXExemptCodeType(string value) : base(value) { }
        public static implicit operator VTXExemptCodeType(string value) { return new VTXExemptCodeType(value); }
        public static implicit operator VTXExemptCodeType(DBNull value) { return new VTXExemptCodeType(null); }
    }
    public class VTXExemptLevelType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXExemptLevelType(string value) : base(value) { }
        public static implicit operator VTXExemptLevelType(string value) { return new VTXExemptLevelType(value); }
        public static implicit operator VTXExemptLevelType(DBNull value) { return new VTXExemptLevelType(null); }
    }
    public class VTXExemptProductType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXExemptProductType(string value) : base(value) { }
        public static implicit operator VTXExemptProductType(string value) { return new VTXExemptProductType(value); }
        public static implicit operator VTXExemptProductType(DBNull value) { return new VTXExemptProductType(null); }
    }
    public class VTXExtdAmtType : FloatType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 53; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXExtdAmtType(double? value) : base(value) { }
        public static implicit operator VTXExtdAmtType(double? value) { return new VTXExtdAmtType(value); }
        public static implicit operator VTXExtdAmtType(DBNull value) { return new VTXExtdAmtType((double?)null); }
        private VTXExtdAmtType(decimal? value) : base(value) { }
        public static implicit operator VTXExtdAmtType(decimal? value) { return new VTXExtdAmtType(value); }
    }
    public class VTXGeoCodeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXGeoCodeType(int? value) : base(value) { }
        public static implicit operator VTXGeoCodeType(int? value) { return new VTXGeoCodeType(value); }
        public static implicit operator VTXGeoCodeType(DBNull value) { return new VTXGeoCodeType(null); }
        private VTXGeoCodeType(long? value) : base(value) { }
        public static implicit operator VTXGeoCodeType(long? value) { return new VTXGeoCodeType(value); }
    }
    public class VTXGlAcctType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXGlAcctType(string value) : base(value) { }
        public static implicit operator VTXGlAcctType(string value) { return new VTXGlAcctType(value); }
        public static implicit operator VTXGlAcctType(DBNull value) { return new VTXGlAcctType(null); }
    }
    public class VTXHdrRef1Type : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXHdrRef1Type(string value) : base(value) { }
        public static implicit operator VTXHdrRef1Type(string value) { return new VTXHdrRef1Type(value); }
        public static implicit operator VTXHdrRef1Type(DBNull value) { return new VTXHdrRef1Type(null); }
    }
    public class VTXHdrRef2Type : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXHdrRef2Type(string value) : base(value) { }
        public static implicit operator VTXHdrRef2Type(string value) { return new VTXHdrRef2Type(value); }
        public static implicit operator VTXHdrRef2Type(DBNull value) { return new VTXHdrRef2Type(null); }
    }
    public class VTXHdrRef3Type : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXHdrRef3Type(int? value) : base(value) { }
        public static implicit operator VTXHdrRef3Type(int? value) { return new VTXHdrRef3Type(value); }
        public static implicit operator VTXHdrRef3Type(DBNull value) { return new VTXHdrRef3Type(null); }
        private VTXHdrRef3Type(long? value) : base(value) { }
        public static implicit operator VTXHdrRef3Type(long? value) { return new VTXHdrRef3Type(value); }
    }
    public class VTXIndsysGeneralConnectStringType : StringType
    {
        public override int Length { get => 150; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXIndsysGeneralConnectStringType(string value) : base(value) { }
        public static implicit operator VTXIndsysGeneralConnectStringType(string value) { return new VTXIndsysGeneralConnectStringType(value); }
        public static implicit operator VTXIndsysGeneralConnectStringType(DBNull value) { return new VTXIndsysGeneralConnectStringType(null); }
    }
    public class VTXIndsysMfgStatesConnStrType : StringType
    {
        public override int Length { get => 150; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXIndsysMfgStatesConnStrType(string value) : base(value) { }
        public static implicit operator VTXIndsysMfgStatesConnStrType(string value) { return new VTXIndsysMfgStatesConnStrType(value); }
        public static implicit operator VTXIndsysMfgStatesConnStrType(DBNull value) { return new VTXIndsysMfgStatesConnStrType(null); }
    }
    public class VTXIndsysStatesConnectStringType : StringType
    {
        public override int Length { get => 150; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXIndsysStatesConnectStringType(string value) : base(value) { }
        public static implicit operator VTXIndsysStatesConnectStringType(string value) { return new VTXIndsysStatesConnectStringType(value); }
        public static implicit operator VTXIndsysStatesConnectStringType(DBNull value) { return new VTXIndsysStatesConnectStringType(null); }
    }
    public class VTXIndsysZip4ConnectStringType : StringType
    {
        public override int Length { get => 150; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXIndsysZip4ConnectStringType(string value) : base(value) { }
        public static implicit operator VTXIndsysZip4ConnectStringType(string value) { return new VTXIndsysZip4ConnectStringType(value); }
        public static implicit operator VTXIndsysZip4ConnectStringType(DBNull value) { return new VTXIndsysZip4ConnectStringType(null); }
    }
    public class VTXInputBufferType : StringType
    {
        public override int Length { get => 6000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXInputBufferType(string value) : base(value) { }
        public static implicit operator VTXInputBufferType(string value) { return new VTXInputBufferType(value); }
        public static implicit operator VTXInputBufferType(DBNull value) { return new VTXInputBufferType(null); }
    }
    public class VTXIntLineType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXIntLineType(int? value) : base(value) { }
        public static implicit operator VTXIntLineType(int? value) { return new VTXIntLineType(value); }
        public static implicit operator VTXIntLineType(DBNull value) { return new VTXIntLineType(null); }
        private VTXIntLineType(long? value) : base(value) { }
        public static implicit operator VTXIntLineType(long? value) { return new VTXIntLineType(value); }
    }
    public class VTXInvCntlNoType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXInvCntlNoType(string value) : base(value) { }
        public static implicit operator VTXInvCntlNoType(string value) { return new VTXInvCntlNoType(value); }
        public static implicit operator VTXInvCntlNoType(DBNull value) { return new VTXInvCntlNoType(null); }
    }
    public class VTXInvDateType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXInvDateType(string value) : base(value) { }
        public static implicit operator VTXInvDateType(string value) { return new VTXInvDateType(value); }
        public static implicit operator VTXInvDateType(DBNull value) { return new VTXInvDateType(null); }
    }
    public class VTXInvGrossAmtType : FloatType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 53; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXInvGrossAmtType(double? value) : base(value) { }
        public static implicit operator VTXInvGrossAmtType(double? value) { return new VTXInvGrossAmtType(value); }
        public static implicit operator VTXInvGrossAmtType(DBNull value) { return new VTXInvGrossAmtType((double?)null); }
        private VTXInvGrossAmtType(decimal? value) : base(value) { }
        public static implicit operator VTXInvGrossAmtType(decimal? value) { return new VTXInvGrossAmtType(value); }
    }
    public class VTXInvNoType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXInvNoType(string value) : base(value) { }
        public static implicit operator VTXInvNoType(string value) { return new VTXInvNoType(value); }
        public static implicit operator VTXInvNoType(DBNull value) { return new VTXInvNoType(null); }
    }
    public class VTXInvTotalTaxType : FloatType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 53; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXInvTotalTaxType(double? value) : base(value) { }
        public static implicit operator VTXInvTotalTaxType(double? value) { return new VTXInvTotalTaxType(value); }
        public static implicit operator VTXInvTotalTaxType(DBNull value) { return new VTXInvTotalTaxType((double?)null); }
        private VTXInvTotalTaxType(decimal? value) : base(value) { }
        public static implicit operator VTXInvTotalTaxType(decimal? value) { return new VTXInvTotalTaxType(value); }
    }
    public class VTXLineNoType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXLineNoType(int? value) : base(value) { }
        public static implicit operator VTXLineNoType(int? value) { return new VTXLineNoType(value); }
        public static implicit operator VTXLineNoType(DBNull value) { return new VTXLineNoType(null); }
        private VTXLineNoType(long? value) : base(value) { }
        public static implicit operator VTXLineNoType(long? value) { return new VTXLineNoType(value); }
    }
    public class VTXLineRef1Type : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXLineRef1Type(string value) : base(value) { }
        public static implicit operator VTXLineRef1Type(string value) { return new VTXLineRef1Type(value); }
        public static implicit operator VTXLineRef1Type(DBNull value) { return new VTXLineRef1Type(null); }
    }
    public class VTXLineRef2Type : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXLineRef2Type(int? value) : base(value) { }
        public static implicit operator VTXLineRef2Type(int? value) { return new VTXLineRef2Type(value); }
        public static implicit operator VTXLineRef2Type(DBNull value) { return new VTXLineRef2Type(null); }
        private VTXLineRef2Type(long? value) : base(value) { }
        public static implicit operator VTXLineRef2Type(long? value) { return new VTXLineRef2Type(value); }
    }
    public class VTXLineRef3Type : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXLineRef3Type(int? value) : base(value) { }
        public static implicit operator VTXLineRef3Type(int? value) { return new VTXLineRef3Type(value); }
        public static implicit operator VTXLineRef3Type(DBNull value) { return new VTXLineRef3Type(null); }
        private VTXLineRef3Type(long? value) : base(value) { }
        public static implicit operator VTXLineRef3Type(long? value) { return new VTXLineRef3Type(value); }
    }
    public class VTXLineRefType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXLineRefType(string value) : base(value) { }
        public static implicit operator VTXLineRefType(string value) { return new VTXLineRefType(value); }
        public static implicit operator VTXLineRefType(DBNull value) { return new VTXLineRefType(null); }
    }
    public class VTXLineType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXLineType(string value) : base(value) { }
        public static implicit operator VTXLineType(string value) { return new VTXLineType(value); }
        public static implicit operator VTXLineType(DBNull value) { return new VTXLineType(null); }
    }
    public class VTXLineUserType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXLineUserType(string value) : base(value) { }
        public static implicit operator VTXLineUserType(string value) { return new VTXLineUserType(value); }
        public static implicit operator VTXLineUserType(DBNull value) { return new VTXLineUserType(null); }
    }
    public class VTXLogErrorsFileNameType : StringType
    {
        public override int Length { get => 140; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXLogErrorsFileNameType(string value) : base(value) { }
        public static implicit operator VTXLogErrorsFileNameType(string value) { return new VTXLogErrorsFileNameType(value); }
        public static implicit operator VTXLogErrorsFileNameType(DBNull value) { return new VTXLogErrorsFileNameType(null); }
    }
    public class VTXLogErrorsType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXLogErrorsType(string value) : base(value) { }
        public static implicit operator VTXLogErrorsType(string value) { return new VTXLogErrorsType(value); }
        public static implicit operator VTXLogErrorsType(DBNull value) { return new VTXLogErrorsType(null); }
    }
    public class VTXMsgLocType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXMsgLocType(string value) : base(value) { }
        public static implicit operator VTXMsgLocType(string value) { return new VTXMsgLocType(value); }
        public static implicit operator VTXMsgLocType(DBNull value) { return new VTXMsgLocType(null); }
    }
    public class VTXMultiplierType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXMultiplierType(int? value) : base(value) { }
        public static implicit operator VTXMultiplierType(int? value) { return new VTXMultiplierType(value); }
        public static implicit operator VTXMultiplierType(DBNull value) { return new VTXMultiplierType(null); }
        private VTXMultiplierType(long? value) : base(value) { }
        public static implicit operator VTXMultiplierType(long? value) { return new VTXMultiplierType(value); }
    }
    public class VTXProdQtyType : FloatType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 53; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXProdQtyType(double? value) : base(value) { }
        public static implicit operator VTXProdQtyType(double? value) { return new VTXProdQtyType(value); }
        public static implicit operator VTXProdQtyType(DBNull value) { return new VTXProdQtyType((double?)null); }
        private VTXProdQtyType(decimal? value) : base(value) { }
        public static implicit operator VTXProdQtyType(decimal? value) { return new VTXProdQtyType(value); }
    }
    public class VTXProdRptingCdType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXProdRptingCdType(string value) : base(value) { }
        public static implicit operator VTXProdRptingCdType(string value) { return new VTXProdRptingCdType(value); }
        public static implicit operator VTXProdRptingCdType(DBNull value) { return new VTXProdRptingCdType(null); }
    }
    public class VTXProdSetCdType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXProdSetCdType(string value) : base(value) { }
        public static implicit operator VTXProdSetCdType(string value) { return new VTXProdSetCdType(value); }
        public static implicit operator VTXProdSetCdType(DBNull value) { return new VTXProdSetCdType(null); }
    }
    public class VTXProductTaxingType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXProductTaxingType(string value) : base(value) { }
        public static implicit operator VTXProductTaxingType(string value) { return new VTXProductTaxingType(value); }
        public static implicit operator VTXProductTaxingType(DBNull value) { return new VTXProductTaxingType(null); }
    }
    public class VTXRefTypeType : StringType
    {
        public override int Length { get => 28; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXRefTypeType(string value) : base(value) { }
        public static implicit operator VTXRefTypeType(string value) { return new VTXRefTypeType(value); }
        public static implicit operator VTXRefTypeType(DBNull value) { return new VTXRefTypeType(null); }
    }
    public class VTXSalesUseType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXSalesUseType(string value) : base(value) { }
        public static implicit operator VTXSalesUseType(string value) { return new VTXSalesUseType(value); }
        public static implicit operator VTXSalesUseType(DBNull value) { return new VTXSalesUseType(null); }
    }
    public class VTXSendCodeType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXSendCodeType(string value) : base(value) { }
        public static implicit operator VTXSendCodeType(string value) { return new VTXSendCodeType(value); }
        public static implicit operator VTXSendCodeType(DBNull value) { return new VTXSendCodeType(null); }
    }
    public class VTXServerNameType : StringType
    {
        public override int Length { get => 140; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXServerNameType(string value) : base(value) { }
        public static implicit operator VTXServerNameType(string value) { return new VTXServerNameType(value); }
        public static implicit operator VTXServerNameType(DBNull value) { return new VTXServerNameType(null); }
    }
    public class VTXSfAccessCdType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXSfAccessCdType(int? value) : base(value) { }
        public static implicit operator VTXSfAccessCdType(int? value) { return new VTXSfAccessCdType(value); }
        public static implicit operator VTXSfAccessCdType(DBNull value) { return new VTXSfAccessCdType(null); }
        private VTXSfAccessCdType(long? value) : base(value) { }
        public static implicit operator VTXSfAccessCdType(long? value) { return new VTXSfAccessCdType(value); }
    }
    public class VTXSfGeoType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXSfGeoType(int? value) : base(value) { }
        public static implicit operator VTXSfGeoType(int? value) { return new VTXSfGeoType(value); }
        public static implicit operator VTXSfGeoType(DBNull value) { return new VTXSfGeoType(null); }
        private VTXSfGeoType(long? value) : base(value) { }
        public static implicit operator VTXSfGeoType(long? value) { return new VTXSfGeoType(value); }
    }
    public class VTXSfJurisInCityType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXSfJurisInCityType(int? value) : base(value) { }
        public static implicit operator VTXSfJurisInCityType(int? value) { return new VTXSfJurisInCityType(value); }
        public static implicit operator VTXSfJurisInCityType(DBNull value) { return new VTXSfJurisInCityType(null); }
        private VTXSfJurisInCityType(long? value) : base(value) { }
        public static implicit operator VTXSfJurisInCityType(long? value) { return new VTXSfJurisInCityType(value); }
    }
    public class VTXSgeoType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXSgeoType(int? value) : base(value) { }
        public static implicit operator VTXSgeoType(int? value) { return new VTXSgeoType(value); }
        public static implicit operator VTXSgeoType(DBNull value) { return new VTXSgeoType(null); }
        private VTXSgeoType(long? value) : base(value) { }
        public static implicit operator VTXSgeoType(long? value) { return new VTXSgeoType(value); }
    }
    public class VTXShortCompCdType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXShortCompCdType(string value) : base(value) { }
        public static implicit operator VTXShortCompCdType(string value) { return new VTXShortCompCdType(value); }
        public static implicit operator VTXShortCompCdType(DBNull value) { return new VTXShortCompCdType(null); }
    }
    public class VTXShortInvNoType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXShortInvNoType(string value) : base(value) { }
        public static implicit operator VTXShortInvNoType(string value) { return new VTXShortInvNoType(value); }
        public static implicit operator VTXShortInvNoType(DBNull value) { return new VTXShortInvNoType(null); }
    }
    public class VTXStAccessCdType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXStAccessCdType(int? value) : base(value) { }
        public static implicit operator VTXStAccessCdType(int? value) { return new VTXStAccessCdType(value); }
        public static implicit operator VTXStAccessCdType(DBNull value) { return new VTXStAccessCdType(null); }
        private VTXStAccessCdType(long? value) : base(value) { }
        public static implicit operator VTXStAccessCdType(long? value) { return new VTXStAccessCdType(value); }
    }
    public class VTXSTEPUseType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXSTEPUseType(string value) : base(value) { }
        public static implicit operator VTXSTEPUseType(string value) { return new VTXSTEPUseType(value); }
        public static implicit operator VTXSTEPUseType(DBNull value) { return new VTXSTEPUseType(null); }
    }
    public class VTXStGeoType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXStGeoType(int? value) : base(value) { }
        public static implicit operator VTXStGeoType(int? value) { return new VTXStGeoType(value); }
        public static implicit operator VTXStGeoType(DBNull value) { return new VTXStGeoType(null); }
        private VTXStGeoType(long? value) : base(value) { }
        public static implicit operator VTXStGeoType(long? value) { return new VTXStGeoType(value); }
    }
    public class VTXStJurisInCityType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXStJurisInCityType(int? value) : base(value) { }
        public static implicit operator VTXStJurisInCityType(int? value) { return new VTXStJurisInCityType(value); }
        public static implicit operator VTXStJurisInCityType(DBNull value) { return new VTXStJurisInCityType(null); }
        private VTXStJurisInCityType(long? value) : base(value) { }
        public static implicit operator VTXStJurisInCityType(long? value) { return new VTXStJurisInCityType(value); }
    }
    public class VTXStoreCdType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXStoreCdType(string value) : base(value) { }
        public static implicit operator VTXStoreCdType(string value) { return new VTXStoreCdType(value); }
        public static implicit operator VTXStoreCdType(DBNull value) { return new VTXStoreCdType(null); }
    }
    public class VTXStoreStateType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXStoreStateType(string value) : base(value) { }
        public static implicit operator VTXStoreStateType(string value) { return new VTXStoreStateType(value); }
        public static implicit operator VTXStoreStateType(DBNull value) { return new VTXStoreStateType(null); }
    }
    public class VTXTaxbltyFlagType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTaxbltyFlagType(int? value) : base(value) { }
        public static implicit operator VTXTaxbltyFlagType(int? value) { return new VTXTaxbltyFlagType(value); }
        public static implicit operator VTXTaxbltyFlagType(DBNull value) { return new VTXTaxbltyFlagType(null); }
        private VTXTaxbltyFlagType(long? value) : base(value) { }
        public static implicit operator VTXTaxbltyFlagType(long? value) { return new VTXTaxbltyFlagType(value); }
    }
    public class VTXTaxedGeoFlagType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTaxedGeoFlagType(int? value) : base(value) { }
        public static implicit operator VTXTaxedGeoFlagType(int? value) { return new VTXTaxedGeoFlagType(value); }
        public static implicit operator VTXTaxedGeoFlagType(DBNull value) { return new VTXTaxedGeoFlagType(null); }
        private VTXTaxedGeoFlagType(long? value) : base(value) { }
        public static implicit operator VTXTaxedGeoFlagType(long? value) { return new VTXTaxedGeoFlagType(value); }
    }
    public class VTXTaxingJurisType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTaxingJurisType(int? value) : base(value) { }
        public static implicit operator VTXTaxingJurisType(int? value) { return new VTXTaxingJurisType(value); }
        public static implicit operator VTXTaxingJurisType(DBNull value) { return new VTXTaxingJurisType(null); }
        private VTXTaxingJurisType(long? value) : base(value) { }
        public static implicit operator VTXTaxingJurisType(long? value) { return new VTXTaxingJurisType(value); }
    }
    public class VTXTotalTaxType : FloatType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 53; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTotalTaxType(double? value) : base(value) { }
        public static implicit operator VTXTotalTaxType(double? value) { return new VTXTotalTaxType(value); }
        public static implicit operator VTXTotalTaxType(DBNull value) { return new VTXTotalTaxType((double?)null); }
        private VTXTotalTaxType(decimal? value) : base(value) { }
        public static implicit operator VTXTotalTaxType(decimal? value) { return new VTXTotalTaxType(value); }
    }
    public class VTXTransCdType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTransCdType(int? value) : base(value) { }
        public static implicit operator VTXTransCdType(int? value) { return new VTXTransCdType(value); }
        public static implicit operator VTXTransCdType(DBNull value) { return new VTXTransCdType(null); }
        private VTXTransCdType(long? value) : base(value) { }
        public static implicit operator VTXTransCdType(long? value) { return new VTXTransCdType(value); }
    }
    public class VTXTransDateType : StringType
    {
        public override int Length { get => 50; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTransDateType(string value) : base(value) { }
        public static implicit operator VTXTransDateType(string value) { return new VTXTransDateType(value); }
        public static implicit operator VTXTransDateType(DBNull value) { return new VTXTransDateType(null); }
    }
    public class VTXTransQtyType : FloatType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 53; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTransQtyType(double? value) : base(value) { }
        public static implicit operator VTXTransQtyType(double? value) { return new VTXTransQtyType(value); }
        public static implicit operator VTXTransQtyType(DBNull value) { return new VTXTransQtyType((double?)null); }
        private VTXTransQtyType(decimal? value) : base(value) { }
        public static implicit operator VTXTransQtyType(decimal? value) { return new VTXTransQtyType(value); }
    }
    public class VTXTransSubTypeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTransSubTypeType(int? value) : base(value) { }
        public static implicit operator VTXTransSubTypeType(int? value) { return new VTXTransSubTypeType(value); }
        public static implicit operator VTXTransSubTypeType(DBNull value) { return new VTXTransSubTypeType(null); }
        private VTXTransSubTypeType(long? value) : base(value) { }
        public static implicit operator VTXTransSubTypeType(long? value) { return new VTXTransSubTypeType(value); }
    }
    public class VTXTransTypeRefnum : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTransTypeRefnum(string value) : base(value) { }
        public static implicit operator VTXTransTypeRefnum(string value) { return new VTXTransTypeRefnum(value); }
        public static implicit operator VTXTransTypeRefnum(DBNull value) { return new VTXTransTypeRefnum(null); }
    }
    public class VTXTransTypeRefType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTransTypeRefType(string value) : base(value) { }
        public static implicit operator VTXTransTypeRefType(string value) { return new VTXTransTypeRefType(value); }
        public static implicit operator VTXTransTypeRefType(DBNull value) { return new VTXTransTypeRefType(null); }
    }
    public class VTXTransTypeTransType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTransTypeTransType(string value) : base(value) { }
        public static implicit operator VTXTransTypeTransType(string value) { return new VTXTransTypeTransType(value); }
        public static implicit operator VTXTransTypeTransType(DBNull value) { return new VTXTransTypeTransType(null); }
    }
    public class VTXTransTypeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTransTypeType(int? value) : base(value) { }
        public static implicit operator VTXTransTypeType(int? value) { return new VTXTransTypeType(value); }
        public static implicit operator VTXTransTypeType(DBNull value) { return new VTXTransTypeType(null); }
        private VTXTransTypeType(long? value) : base(value) { }
        public static implicit operator VTXTransTypeType(long? value) { return new VTXTransTypeType(value); }
    }
    public class VTXTWAuditType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTWAuditType(string value) : base(value) { }
        public static implicit operator VTXTWAuditType(string value) { return new VTXTWAuditType(value); }
        public static implicit operator VTXTWAuditType(DBNull value) { return new VTXTWAuditType(null); }
    }
    public class VTXTWESrcType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTWESrcType(string value) : base(value) { }
        public static implicit operator VTXTWESrcType(string value) { return new VTXTWESrcType(value); }
        public static implicit operator VTXTWESrcType(DBNull value) { return new VTXTWESrcType(null); }
    }
    public class VTXTweTrnDocIdType : LongType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 19; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTweTrnDocIdType(long? value) : base(value) { }
        public static implicit operator VTXTweTrnDocIdType(long? value) { return new VTXTweTrnDocIdType(value); }
        public static implicit operator VTXTweTrnDocIdType(DBNull value) { return new VTXTweTrnDocIdType(null); }
    }
    public class VTXTWETrnIdType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTWETrnIdType(string value) : base(value) { }
        public static implicit operator VTXTWETrnIdType(string value) { return new VTXTWETrnIdType(value); }
        public static implicit operator VTXTWETrnIdType(DBNull value) { return new VTXTWETrnIdType(null); }
    }
    public class VTXTWSystemType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTWSystemType(string value) : base(value) { }
        public static implicit operator VTXTWSystemType(string value) { return new VTXTWSystemType(value); }
        public static implicit operator VTXTWSystemType(DBNull value) { return new VTXTWSystemType(null); }
    }
    public class VTXTXWGeoCodeType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXTXWGeoCodeType(string value) : base(value) { }
        public static implicit operator VTXTXWGeoCodeType(string value) { return new VTXTXWGeoCodeType(value); }
        public static implicit operator VTXTXWGeoCodeType(DBNull value) { return new VTXTXWGeoCodeType(null); }
    }
    public class VTXValidateCustomerType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private VTXValidateCustomerType(string value) : base(value) { }
        public static implicit operator VTXValidateCustomerType(string value) { return new VTXValidateCustomerType(value); }
        public static implicit operator VTXValidateCustomerType(DBNull value) { return new VTXValidateCustomerType(null); }
    }
    public class W2BoxType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private W2BoxType(string value) : base(value) { }
        public static implicit operator W2BoxType(string value) { return new W2BoxType(value); }
        public static implicit operator W2BoxType(DBNull value) { return new W2BoxType(null); }
    }
    public class W2CodeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private W2CodeType(string value) : base(value) { }
        public static implicit operator W2CodeType(string value) { return new W2CodeType(value); }
        public static implicit operator W2CodeType(DBNull value) { return new W2CodeType(null); }
    }
    public class W2EmployerTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private W2EmployerTypeType(string value) : base(value) { }
        public static implicit operator W2EmployerTypeType(string value) { return new W2EmployerTypeType(value); }
        public static implicit operator W2EmployerTypeType(DBNull value) { return new W2EmployerTypeType(null); }
    }
    public class W2NameCodeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private W2NameCodeType(string value) : base(value) { }
        public static implicit operator W2NameCodeType(string value) { return new W2NameCodeType(value); }
        public static implicit operator W2NameCodeType(DBNull value) { return new W2NameCodeType(null); }
    }
    public class WaitMonthsType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WaitMonthsType(byte? value) : base(value) { }
        public static implicit operator WaitMonthsType(byte? value) { return new WaitMonthsType(value); }
        public static implicit operator WaitMonthsType(DBNull value) { return new WaitMonthsType(null); }
        private WaitMonthsType(int? value) : base(value) { }
        public static implicit operator WaitMonthsType(int? value) { return new WaitMonthsType(value); }
    }
    public class WantAdDaysType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WantAdDaysType(byte? value) : base(value) { }
        public static implicit operator WantAdDaysType(byte? value) { return new WantAdDaysType(value); }
        public static implicit operator WantAdDaysType(DBNull value) { return new WantAdDaysType(null); }
        private WantAdDaysType(int? value) : base(value) { }
        public static implicit operator WantAdDaysType(int? value) { return new WantAdDaysType(value); }
    }
    public class WaNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WaNumType(int? value) : base(value) { }
        public static implicit operator WaNumType(int? value) { return new WaNumType(value); }
        public static implicit operator WaNumType(DBNull value) { return new WaNumType(null); }
        private WaNumType(long? value) : base(value) { }
        public static implicit operator WaNumType(long? value) { return new WaNumType(value); }
    }
    public class WarningThresholdPercentType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 7; }
        public override byte Scale { get => 4; }
        public override bool Nullable { get => true; }
        private WarningThresholdPercentType(decimal? value) : base(value) { }
        public static implicit operator WarningThresholdPercentType(decimal? value) { return new WarningThresholdPercentType(value); }
        public static implicit operator WarningThresholdPercentType(DBNull value) { return new WarningThresholdPercentType(null); }
    }
    public class WaybillType : StringType
    {
        public override int Length { get => 60; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WaybillType(string value) : base(value) { }
        public static implicit operator WaybillType(string value) { return new WaybillType(value); }
        public static implicit operator WaybillType(DBNull value) { return new WaybillType(null); }
    }
    public class WBActionTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBActionTypeType(string value) : base(value) { }
        public static implicit operator WBActionTypeType(string value) { return new WBActionTypeType(value); }
        public static implicit operator WBActionTypeType(DBNull value) { return new WBActionTypeType(null); }
    }
    public class WBAggregateNameType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBAggregateNameType(string value) : base(value) { }
        public static implicit operator WBAggregateNameType(string value) { return new WBAggregateNameType(value); }
        public static implicit operator WBAggregateNameType(DBNull value) { return new WBAggregateNameType(null); }
    }
    public class WBCategoryType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBCategoryType(string value) : base(value) { }
        public static implicit operator WBCategoryType(string value) { return new WBCategoryType(value); }
        public static implicit operator WBCategoryType(DBNull value) { return new WBCategoryType(null); }
    }
    public class WBColorType : StringType
    {
        public override int Length { get => 22; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBColorType(string value) : base(value) { }
        public static implicit operator WBColorType(string value) { return new WBColorType(value); }
        public static implicit operator WBColorType(DBNull value) { return new WBColorType(null); }
    }
    public class WBDetailNameType : StringType
    {
        public override int Length { get => 1000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBDetailNameType(string value) : base(value) { }
        public static implicit operator WBDetailNameType(string value) { return new WBDetailNameType(value); }
        public static implicit operator WBDetailNameType(DBNull value) { return new WBDetailNameType(null); }
    }
    public class WBDetailParmsType : StringType
    {
        public override int Length { get => 1000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBDetailParmsType(string value) : base(value) { }
        public static implicit operator WBDetailParmsType(string value) { return new WBDetailParmsType(value); }
        public static implicit operator WBDetailParmsType(DBNull value) { return new WBDetailParmsType(null); }
    }
    public class WBDetailTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBDetailTypeType(string value) : base(value) { }
        public static implicit operator WBDetailTypeType(string value) { return new WBDetailTypeType(value); }
        public static implicit operator WBDetailTypeType(DBNull value) { return new WBDetailTypeType(null); }
    }
    public class WBDisplayTypeType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBDisplayTypeType(string value) : base(value) { }
        public static implicit operator WBDisplayTypeType(string value) { return new WBDisplayTypeType(value); }
        public static implicit operator WBDisplayTypeType(DBNull value) { return new WBDisplayTypeType(null); }
    }
    public class WBDrillColNameType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBDrillColNameType(string value) : base(value) { }
        public static implicit operator WBDrillColNameType(string value) { return new WBDrillColNameType(value); }
        public static implicit operator WBDrillColNameType(DBNull value) { return new WBDrillColNameType(null); }
    }
    public class WBDrillNumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBDrillNumType(int? value) : base(value) { }
        public static implicit operator WBDrillNumType(int? value) { return new WBDrillNumType(value); }
        public static implicit operator WBDrillNumType(DBNull value) { return new WBDrillNumType(null); }
        private WBDrillNumType(long? value) : base(value) { }
        public static implicit operator WBDrillNumType(long? value) { return new WBDrillNumType(value); }
    }
    public class WBEmailTypeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBEmailTypeType(string value) : base(value) { }
        public static implicit operator WBEmailTypeType(string value) { return new WBEmailTypeType(value); }
        public static implicit operator WBEmailTypeType(DBNull value) { return new WBEmailTypeType(null); }
    }
    public class WBFilterType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBFilterType(string value) : base(value) { }
        public static implicit operator WBFilterType(string value) { return new WBFilterType(value); }
        public static implicit operator WBFilterType(DBNull value) { return new WBFilterType(null); }
    }
    public class WBFooterFormatType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBFooterFormatType(string value) : base(value) { }
        public static implicit operator WBFooterFormatType(string value) { return new WBFooterFormatType(value); }
        public static implicit operator WBFooterFormatType(DBNull value) { return new WBFooterFormatType(null); }
    }
    public class WBKPIGaugeTypeType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBKPIGaugeTypeType(string value) : base(value) { }
        public static implicit operator WBKPIGaugeTypeType(string value) { return new WBKPIGaugeTypeType(value); }
        public static implicit operator WBKPIGaugeTypeType(DBNull value) { return new WBKPIGaugeTypeType(null); }
    }
    public class WBKPINumType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBKPINumType(int? value) : base(value) { }
        public static implicit operator WBKPINumType(int? value) { return new WBKPINumType(value); }
        public static implicit operator WBKPINumType(DBNull value) { return new WBKPINumType(null); }
        private WBKPINumType(long? value) : base(value) { }
        public static implicit operator WBKPINumType(long? value) { return new WBKPINumType(value); }
    }
    public class WBLinkType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBLinkType(string value) : base(value) { }
        public static implicit operator WBLinkType(string value) { return new WBLinkType(value); }
        public static implicit operator WBLinkType(DBNull value) { return new WBLinkType(null); }
    }
    public class WBOperatorType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBOperatorType(string value) : base(value) { }
        public static implicit operator WBOperatorType(string value) { return new WBOperatorType(value); }
        public static implicit operator WBOperatorType(DBNull value) { return new WBOperatorType(null); }
    }
    public class WBProfileType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBProfileType(string value) : base(value) { }
        public static implicit operator WBProfileType(string value) { return new WBProfileType(value); }
        public static implicit operator WBProfileType(DBNull value) { return new WBProfileType(null); }
    }
    public class WBProgNameType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBProgNameType(string value) : base(value) { }
        public static implicit operator WBProgNameType(string value) { return new WBProgNameType(value); }
        public static implicit operator WBProgNameType(DBNull value) { return new WBProgNameType(null); }
    }
    public class WBPropertyClassNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBPropertyClassNameType(string value) : base(value) { }
        public static implicit operator WBPropertyClassNameType(string value) { return new WBPropertyClassNameType(value); }
        public static implicit operator WBPropertyClassNameType(DBNull value) { return new WBPropertyClassNameType(null); }
    }
    public class WBPropertyNameType : StringType
    {
        public override int Length { get => 160; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBPropertyNameType(string value) : base(value) { }
        public static implicit operator WBPropertyNameType(string value) { return new WBPropertyNameType(value); }
        public static implicit operator WBPropertyNameType(DBNull value) { return new WBPropertyNameType(null); }
    }
    public class WBRecordCapType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBRecordCapType(int? value) : base(value) { }
        public static implicit operator WBRecordCapType(int? value) { return new WBRecordCapType(value); }
        public static implicit operator WBRecordCapType(DBNull value) { return new WBRecordCapType(null); }
        private WBRecordCapType(long? value) : base(value) { }
        public static implicit operator WBRecordCapType(long? value) { return new WBRecordCapType(value); }
    }
    public class WBScopeNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBScopeNameType(string value) : base(value) { }
        public static implicit operator WBScopeNameType(string value) { return new WBScopeNameType(value); }
        public static implicit operator WBScopeNameType(DBNull value) { return new WBScopeNameType(null); }
    }
    public class WBScopeTypeType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBScopeTypeType(short? value) : base(value) { }
        public static implicit operator WBScopeTypeType(short? value) { return new WBScopeTypeType(value); }
        public static implicit operator WBScopeTypeType(DBNull value) { return new WBScopeTypeType(null); }
        private WBScopeTypeType(int? value) : base(value) { }
        public static implicit operator WBScopeTypeType(int? value) { return new WBScopeTypeType(value); }
    }
    public class WbsItemRefTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WbsItemRefTypeType(string value) : base(value) { }
        public static implicit operator WbsItemRefTypeType(string value) { return new WbsItemRefTypeType(value); }
        public static implicit operator WbsItemRefTypeType(DBNull value) { return new WbsItemRefTypeType(null); }
    }
    public class WbsNumType : StringType
    {
        public override int Length { get => 30; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WbsNumType(string value) : base(value) { }
        public static implicit operator WbsNumType(string value) { return new WbsNumType(value); }
        public static implicit operator WbsNumType(DBNull value) { return new WbsNumType(null); }
    }
    public class WBSourceNameType : StringType
    {
        public override int Length { get => 1000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBSourceNameType(string value) : base(value) { }
        public static implicit operator WBSourceNameType(string value) { return new WBSourceNameType(value); }
        public static implicit operator WBSourceNameType(DBNull value) { return new WBSourceNameType(null); }
    }
    public class WBSourceParmsType : StringType
    {
        public override int Length { get => 1000; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBSourceParmsType(string value) : base(value) { }
        public static implicit operator WBSourceParmsType(string value) { return new WBSourceParmsType(value); }
        public static implicit operator WBSourceParmsType(DBNull value) { return new WBSourceParmsType(null); }
    }
    public class WBSourceTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBSourceTypeType(string value) : base(value) { }
        public static implicit operator WBSourceTypeType(string value) { return new WBSourceTypeType(value); }
        public static implicit operator WBSourceTypeType(DBNull value) { return new WBSourceTypeType(null); }
    }
    public class WBSStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBSStatusType(string value) : base(value) { }
        public static implicit operator WBSStatusType(string value) { return new WBSStatusType(value); }
        public static implicit operator WBSStatusType(DBNull value) { return new WBSStatusType(null); }
    }
    public class WBSymbolType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WBSymbolType(string value) : base(value) { }
        public static implicit operator WBSymbolType(string value) { return new WBSymbolType(value); }
        public static implicit operator WBSymbolType(DBNull value) { return new WBSymbolType(null); }
    }
    public class WcAliasType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WcAliasType(string value) : base(value) { }
        public static implicit operator WcAliasType(string value) { return new WcAliasType(value); }
        public static implicit operator WcAliasType(DBNull value) { return new WcAliasType(null); }
    }
    public class WcOffsetType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private WcOffsetType(decimal? value) : base(value) { }
        public static implicit operator WcOffsetType(decimal? value) { return new WcOffsetType(value); }
        public static implicit operator WcOffsetType(DBNull value) { return new WcOffsetType(null); }
    }
    public class WcsCollSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WcsCollSeqType(int? value) : base(value) { }
        public static implicit operator WcsCollSeqType(int? value) { return new WcsCollSeqType(value); }
        public static implicit operator WcsCollSeqType(DBNull value) { return new WcsCollSeqType(null); }
        private WcsCollSeqType(long? value) : base(value) { }
        public static implicit operator WcsCollSeqType(long? value) { return new WcsCollSeqType(value); }
    }
    public class WcsCollValueType : StringType
    {
        public override int Length { get => 80; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WcsCollValueType(string value) : base(value) { }
        public static implicit operator WcsCollValueType(string value) { return new WcsCollValueType(value); }
        public static implicit operator WcsCollValueType(DBNull value) { return new WcsCollValueType(null); }
    }
    public class WcsCriteriaFrozenZoneThruType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WcsCriteriaFrozenZoneThruType(byte? value) : base(value) { }
        public static implicit operator WcsCriteriaFrozenZoneThruType(byte? value) { return new WcsCriteriaFrozenZoneThruType(value); }
        public static implicit operator WcsCriteriaFrozenZoneThruType(DBNull value) { return new WcsCriteriaFrozenZoneThruType(null); }
        private WcsCriteriaFrozenZoneThruType(int? value) : base(value) { }
        public static implicit operator WcsCriteriaFrozenZoneThruType(int? value) { return new WcsCriteriaFrozenZoneThruType(value); }
    }
    public class WcseqZoneType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WcseqZoneType(string value) : base(value) { }
        public static implicit operator WcseqZoneType(string value) { return new WcseqZoneType(value); }
        public static implicit operator WcseqZoneType(DBNull value) { return new WcseqZoneType(null); }
    }
    public class WcsGroupIdType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WcsGroupIdType(int? value) : base(value) { }
        public static implicit operator WcsGroupIdType(int? value) { return new WcsGroupIdType(value); }
        public static implicit operator WcsGroupIdType(DBNull value) { return new WcsGroupIdType(null); }
        private WcsGroupIdType(long? value) : base(value) { }
        public static implicit operator WcsGroupIdType(long? value) { return new WcsGroupIdType(value); }
    }
    public class WcsortFieldType : StringType
    {
        public override int Length { get => 240; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WcsortFieldType(string value) : base(value) { }
        public static implicit operator WcsortFieldType(string value) { return new WcsortFieldType(value); }
        public static implicit operator WcsortFieldType(DBNull value) { return new WcsortFieldType(null); }
    }
    public class WcsSeqType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WcsSeqType(byte? value) : base(value) { }
        public static implicit operator WcsSeqType(byte? value) { return new WcsSeqType(value); }
        public static implicit operator WcsSeqType(DBNull value) { return new WcsSeqType(null); }
        private WcsSeqType(int? value) : base(value) { }
        public static implicit operator WcsSeqType(int? value) { return new WcsSeqType(value); }
    }
    public class WcsSortSeqType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WcsSortSeqType(int? value) : base(value) { }
        public static implicit operator WcsSortSeqType(int? value) { return new WcsSortSeqType(value); }
        public static implicit operator WcsSortSeqType(DBNull value) { return new WcsSortSeqType(null); }
        private WcsSortSeqType(long? value) : base(value) { }
        public static implicit operator WcsSortSeqType(long? value) { return new WcsSortSeqType(value); }
    }
    public class WcType : StringType
    {
        public override int Length { get => 12; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WcType(string value) : base(value) { }
        public static implicit operator WcType(string value) { return new WcType(value); }
        public static implicit operator WcType(DBNull value) { return new WcType(null); }
    }
    public class WebCoPrefixType : StringType
    {
        public override int Length { get => 14; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WebCoPrefixType(string value) : base(value) { }
        public static implicit operator WebCoPrefixType(string value) { return new WebCoPrefixType(value); }
        public static implicit operator WebCoPrefixType(DBNull value) { return new WebCoPrefixType(null); }
    }
    public class WebCoStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WebCoStatusType(string value) : base(value) { }
        public static implicit operator WebCoStatusType(string value) { return new WebCoStatusType(value); }
        public static implicit operator WebCoStatusType(DBNull value) { return new WebCoStatusType(null); }
    }
    public class WebServiceCarrierType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WebServiceCarrierType(string value) : base(value) { }
        public static implicit operator WebServiceCarrierType(string value) { return new WebServiceCarrierType(value); }
        public static implicit operator WebServiceCarrierType(DBNull value) { return new WebServiceCarrierType(null); }
    }
    public class WebServiceElementTagNameType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WebServiceElementTagNameType(string value) : base(value) { }
        public static implicit operator WebServiceElementTagNameType(string value) { return new WebServiceElementTagNameType(value); }
        public static implicit operator WebServiceElementTagNameType(DBNull value) { return new WebServiceElementTagNameType(null); }
    }
    public class WebServiceElementTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WebServiceElementTypeType(string value) : base(value) { }
        public static implicit operator WebServiceElementTypeType(string value) { return new WebServiceElementTypeType(value); }
        public static implicit operator WebServiceElementTypeType(DBNull value) { return new WebServiceElementTypeType(null); }
    }
    public class WebServiceElementValueType : StringType
    {
        public override int Length { get => 200; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WebServiceElementValueType(string value) : base(value) { }
        public static implicit operator WebServiceElementValueType(string value) { return new WebServiceElementValueType(value); }
        public static implicit operator WebServiceElementValueType(DBNull value) { return new WebServiceElementValueType(null); }
    }
    public class WebServiceNameType : StringType
    {
        public override int Length { get => 120; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WebServiceNameType(string value) : base(value) { }
        public static implicit operator WebServiceNameType(string value) { return new WebServiceNameType(value); }
        public static implicit operator WebServiceNameType(DBNull value) { return new WebServiceNameType(null); }
    }
    public class WebServiceStatusType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WebServiceStatusType(string value) : base(value) { }
        public static implicit operator WebServiceStatusType(string value) { return new WebServiceStatusType(value); }
        public static implicit operator WebServiceStatusType(DBNull value) { return new WebServiceStatusType(null); }
    }
    public class WebServiceVersionType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WebServiceVersionType(int? value) : base(value) { }
        public static implicit operator WebServiceVersionType(int? value) { return new WebServiceVersionType(value); }
        public static implicit operator WebServiceVersionType(DBNull value) { return new WebServiceVersionType(null); }
        private WebServiceVersionType(long? value) : base(value) { }
        public static implicit operator WebServiceVersionType(long? value) { return new WebServiceVersionType(value); }
    }
    public class WeekDayType : ByteType
    {
        public override int Length { get => 1; }
        public override byte Precision { get => 3; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WeekDayType(byte? value) : base(value) { }
        public static implicit operator WeekDayType(byte? value) { return new WeekDayType(value); }
        public static implicit operator WeekDayType(DBNull value) { return new WeekDayType(null); }
        private WeekDayType(int? value) : base(value) { }
        public static implicit operator WeekDayType(int? value) { return new WeekDayType(value); }
    }
    public class WeeksWorkedType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 8; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private WeeksWorkedType(decimal? value) : base(value) { }
        public static implicit operator WeeksWorkedType(decimal? value) { return new WeeksWorkedType(value); }
        public static implicit operator WeeksWorkedType(DBNull value) { return new WeeksWorkedType(null); }
    }
    public class WeightType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 9; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private WeightType(decimal? value) : base(value) { }
        public static implicit operator WeightType(decimal? value) { return new WeightType(value); }
        public static implicit operator WeightType(DBNull value) { return new WeightType(null); }
    }
    public class WeightUnitsType : StringType
    {
        public override int Length { get => 6; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WeightUnitsType(string value) : base(value) { }
        public static implicit operator WeightUnitsType(string value) { return new WeightUnitsType(value); }
        public static implicit operator WeightUnitsType(DBNull value) { return new WeightUnitsType(null); }
    }
    public class WhseType : StringType
    {
        public override int Length { get => 8; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WhseType(string value) : base(value) { }
        public static implicit operator WhseType(string value) { return new WhseType(value); }
        public static implicit operator WhseType(DBNull value) { return new WhseType(null); }
    }
    public class WideTextType : StringType
    {
        public override int Length { get => 264; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WideTextType(string value) : base(value) { }
        public static implicit operator WideTextType(string value) { return new WideTextType(value); }
        public static implicit operator WideTextType(DBNull value) { return new WideTextType(null); }
    }
    public class WidgetEditorCharsType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WidgetEditorCharsType(int? value) : base(value) { }
        public static implicit operator WidgetEditorCharsType(int? value) { return new WidgetEditorCharsType(value); }
        public static implicit operator WidgetEditorCharsType(DBNull value) { return new WidgetEditorCharsType(null); }
        private WidgetEditorCharsType(long? value) : base(value) { }
        public static implicit operator WidgetEditorCharsType(long? value) { return new WidgetEditorCharsType(value); }
    }
    public class WidgetSliderValueType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WidgetSliderValueType(int? value) : base(value) { }
        public static implicit operator WidgetSliderValueType(int? value) { return new WidgetSliderValueType(value); }
        public static implicit operator WidgetSliderValueType(DBNull value) { return new WidgetSliderValueType(null); }
        private WidgetSliderValueType(long? value) : base(value) { }
        public static implicit operator WidgetSliderValueType(long? value) { return new WidgetSliderValueType(value); }
    }
    public class WildcardType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WildcardType(string value) : base(value) { }
        public static implicit operator WildcardType(string value) { return new WildcardType(value); }
        public static implicit operator WildcardType(DBNull value) { return new WildcardType(null); }
    }
    public class WksBasisType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WksBasisType(string value) : base(value) { }
        public static implicit operator WksBasisType(string value) { return new WksBasisType(value); }
        public static implicit operator WksBasisType(DBNull value) { return new WksBasisType(null); }
    }
    public class WorkCountryType : StringType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkCountryType(string value) : base(value) { }
        public static implicit operator WorkCountryType(string value) { return new WorkCountryType(value); }
        public static implicit operator WorkCountryType(DBNull value) { return new WorkCountryType(null); }
    }
    public class WorkersCompensationAbbreviationType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkersCompensationAbbreviationType(string value) : base(value) { }
        public static implicit operator WorkersCompensationAbbreviationType(string value) { return new WorkersCompensationAbbreviationType(value); }
        public static implicit operator WorkersCompensationAbbreviationType(DBNull value) { return new WorkersCompensationAbbreviationType(null); }
    }
    public class WorkersCompensationAgentIDType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkersCompensationAgentIDType(string value) : base(value) { }
        public static implicit operator WorkersCompensationAgentIDType(string value) { return new WorkersCompensationAgentIDType(value); }
        public static implicit operator WorkersCompensationAgentIDType(DBNull value) { return new WorkersCompensationAgentIDType(null); }
    }
    public class WorkersCompensationAuthorityIDType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkersCompensationAuthorityIDType(string value) : base(value) { }
        public static implicit operator WorkersCompensationAuthorityIDType(string value) { return new WorkersCompensationAuthorityIDType(value); }
        public static implicit operator WorkersCompensationAuthorityIDType(DBNull value) { return new WorkersCompensationAuthorityIDType(null); }
    }
    public class WorkersCompensationClaimNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkersCompensationClaimNumType(string value) : base(value) { }
        public static implicit operator WorkersCompensationClaimNumType(string value) { return new WorkersCompensationClaimNumType(value); }
        public static implicit operator WorkersCompensationClaimNumType(DBNull value) { return new WorkersCompensationClaimNumType(null); }
    }
    public class WorkersCompensationClassCodeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkersCompensationClassCodeType(string value) : base(value) { }
        public static implicit operator WorkersCompensationClassCodeType(string value) { return new WorkersCompensationClassCodeType(value); }
        public static implicit operator WorkersCompensationClassCodeType(DBNull value) { return new WorkersCompensationClassCodeType(null); }
    }
    public class WorkersCompensationDCOIDType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkersCompensationDCOIDType(string value) : base(value) { }
        public static implicit operator WorkersCompensationDCOIDType(string value) { return new WorkersCompensationDCOIDType(value); }
        public static implicit operator WorkersCompensationDCOIDType(DBNull value) { return new WorkersCompensationDCOIDType(null); }
    }
    public class WorkersCompensationIndustryClassificationType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkersCompensationIndustryClassificationType(string value) : base(value) { }
        public static implicit operator WorkersCompensationIndustryClassificationType(string value) { return new WorkersCompensationIndustryClassificationType(value); }
        public static implicit operator WorkersCompensationIndustryClassificationType(DBNull value) { return new WorkersCompensationIndustryClassificationType(null); }
    }
    public class WorkersCompensationInitialTreatmentIDType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkersCompensationInitialTreatmentIDType(string value) : base(value) { }
        public static implicit operator WorkersCompensationInitialTreatmentIDType(string value) { return new WorkersCompensationInitialTreatmentIDType(value); }
        public static implicit operator WorkersCompensationInitialTreatmentIDType(DBNull value) { return new WorkersCompensationInitialTreatmentIDType(null); }
    }
    public class WorkersCompensationInjuryCodeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkersCompensationInjuryCodeType(string value) : base(value) { }
        public static implicit operator WorkersCompensationInjuryCodeType(string value) { return new WorkersCompensationInjuryCodeType(value); }
        public static implicit operator WorkersCompensationInjuryCodeType(DBNull value) { return new WorkersCompensationInjuryCodeType(null); }
    }
    public class WorkersCompensationInjuryGroupIDType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkersCompensationInjuryGroupIDType(string value) : base(value) { }
        public static implicit operator WorkersCompensationInjuryGroupIDType(string value) { return new WorkersCompensationInjuryGroupIDType(value); }
        public static implicit operator WorkersCompensationInjuryGroupIDType(DBNull value) { return new WorkersCompensationInjuryGroupIDType(null); }
    }
    public class WorkersCompensationInjuryGroupTypeType : StringType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkersCompensationInjuryGroupTypeType(string value) : base(value) { }
        public static implicit operator WorkersCompensationInjuryGroupTypeType(string value) { return new WorkersCompensationInjuryGroupTypeType(value); }
        public static implicit operator WorkersCompensationInjuryGroupTypeType(DBNull value) { return new WorkersCompensationInjuryGroupTypeType(null); }
    }
    public class WorkersCompensationInsurerIDType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkersCompensationInsurerIDType(string value) : base(value) { }
        public static implicit operator WorkersCompensationInsurerIDType(string value) { return new WorkersCompensationInsurerIDType(value); }
        public static implicit operator WorkersCompensationInsurerIDType(DBNull value) { return new WorkersCompensationInsurerIDType(null); }
    }
    public class WorkersCompensationJurisdictionClaimNumType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkersCompensationJurisdictionClaimNumType(string value) : base(value) { }
        public static implicit operator WorkersCompensationJurisdictionClaimNumType(string value) { return new WorkersCompensationJurisdictionClaimNumType(value); }
        public static implicit operator WorkersCompensationJurisdictionClaimNumType(DBNull value) { return new WorkersCompensationJurisdictionClaimNumType(null); }
    }
    public class WorkersCompensationJurisdictionCodeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkersCompensationJurisdictionCodeType(string value) : base(value) { }
        public static implicit operator WorkersCompensationJurisdictionCodeType(string value) { return new WorkersCompensationJurisdictionCodeType(value); }
        public static implicit operator WorkersCompensationJurisdictionCodeType(DBNull value) { return new WorkersCompensationJurisdictionCodeType(null); }
    }
    public class WorkersCompensationPolicyIDType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkersCompensationPolicyIDType(string value) : base(value) { }
        public static implicit operator WorkersCompensationPolicyIDType(string value) { return new WorkersCompensationPolicyIDType(value); }
        public static implicit operator WorkersCompensationPolicyIDType(DBNull value) { return new WorkersCompensationPolicyIDType(null); }
    }
    public class WorkersCompensationStateCodeType : StringType
    {
        public override int Length { get => 20; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkersCompensationStateCodeType(string value) : base(value) { }
        public static implicit operator WorkersCompensationStateCodeType(string value) { return new WorkersCompensationStateCodeType(value); }
        public static implicit operator WorkersCompensationStateCodeType(DBNull value) { return new WorkersCompensationStateCodeType(null); }
    }
    public class WorkflowNameType : StringType
    {
        public override int Length { get => 800; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkflowNameType(string value) : base(value) { }
        public static implicit operator WorkflowNameType(string value) { return new WorkflowNameType(value); }
        public static implicit operator WorkflowNameType(DBNull value) { return new WorkflowNameType(null); }
    }
    public class WorkStatusType : StringType
    {
        public override int Length { get => 40; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WorkStatusType(string value) : base(value) { }
        public static implicit operator WorkStatusType(string value) { return new WorkStatusType(value); }
        public static implicit operator WorkStatusType(DBNull value) { return new WorkStatusType(null); }
    }
    public class WSFormWizardCategoryNameType : StringType
    {
        public override int Length { get => 100; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private WSFormWizardCategoryNameType(string value) : base(value) { }
        public static implicit operator WSFormWizardCategoryNameType(string value) { return new WSFormWizardCategoryNameType(value); }
        public static implicit operator WSFormWizardCategoryNameType(DBNull value) { return new WSFormWizardCategoryNameType(null); }
    }
    public class XMLNodeIDType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private XMLNodeIDType(int? value) : base(value) { }
        public static implicit operator XMLNodeIDType(int? value) { return new XMLNodeIDType(value); }
        public static implicit operator XMLNodeIDType(DBNull value) { return new XMLNodeIDType(null); }
        private XMLNodeIDType(long? value) : base(value) { }
        public static implicit operator XMLNodeIDType(long? value) { return new XMLNodeIDType(value); }
    }
    public class XMLStringType : StringType
    {
        public override int Length { get => -1; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private XMLStringType(string value) : base(value) { }
        public static implicit operator XMLStringType(string value) { return new XMLStringType(value); }
        public static implicit operator XMLStringType(DBNull value) { return new XMLStringType(null); }
    }
    public class YearsInBusinessType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private YearsInBusinessType(int? value) : base(value) { }
        public static implicit operator YearsInBusinessType(int? value) { return new YearsInBusinessType(value); }
        public static implicit operator YearsInBusinessType(DBNull value) { return new YearsInBusinessType(null); }
        private YearsInBusinessType(long? value) : base(value) { }
        public static implicit operator YearsInBusinessType(long? value) { return new YearsInBusinessType(value); }
    }
    public class YearType : ShortType
    {
        public override int Length { get => 2; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private YearType(short? value) : base(value) { }
        public static implicit operator YearType(short? value) { return new YearType(value); }
        public static implicit operator YearType(DBNull value) { return new YearType(null); }
        private YearType(int? value) : base(value) { }
        public static implicit operator YearType(int? value) { return new YearType(value); }
    }
    public class YieldType : DecimalType
    {
        public override int Length { get => 5; }
        public override byte Precision { get => 5; }
        public override byte Scale { get => 2; }
        public override bool Nullable { get => true; }
        private YieldType(decimal? value) : base(value) { }
        public static implicit operator YieldType(decimal? value) { return new YieldType(value); }
        public static implicit operator YieldType(DBNull value) { return new YieldType(null); }
    }
    public class YtdLeadTimeType : IntType
    {
        public override int Length { get => 4; }
        public override byte Precision { get => 10; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private YtdLeadTimeType(int? value) : base(value) { }
        public static implicit operator YtdLeadTimeType(int? value) { return new YtdLeadTimeType(value); }
        public static implicit operator YtdLeadTimeType(DBNull value) { return new YtdLeadTimeType(null); }
        private YtdLeadTimeType(long? value) : base(value) { }
        public static implicit operator YtdLeadTimeType(long? value) { return new YtdLeadTimeType(value); }
    }
    public class ZFRLetterType : StringType
    {
        public override int Length { get => 10; }
        public override byte Precision { get => 0; }
        public override byte Scale { get => 0; }
        public override bool Nullable { get => true; }
        private ZFRLetterType(string value) : base(value) { }
        public static implicit operator ZFRLetterType(string value) { return new ZFRLetterType(value); }
        public static implicit operator ZFRLetterType(DBNull value) { return new ZFRLetterType(null); }
    }


}